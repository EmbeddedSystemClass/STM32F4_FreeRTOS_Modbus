
STM32F4_ModbusRTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08008360  08008360  00018360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008460  08008460  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008460  08008460  00018460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008468  08008468  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008468  08008468  00018468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800846c  0800846c  0001846c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000441c  20000078  080084e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004494  080084e8  00024494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001179b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b34  00000000  00000000  00031843  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de8  00000000  00000000  00034378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca0  00000000  00000000  00035160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000229a8  00000000  00000000  00035e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c33b  00000000  00000000  000587a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0434  00000000  00000000  00064ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134f17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c10  00000000  00000000  00134f94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008344 	.word	0x08008344

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008344 	.word	0x08008344

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_uldivmod>:
 8000ae8:	b953      	cbnz	r3, 8000b00 <__aeabi_uldivmod+0x18>
 8000aea:	b94a      	cbnz	r2, 8000b00 <__aeabi_uldivmod+0x18>
 8000aec:	2900      	cmp	r1, #0
 8000aee:	bf08      	it	eq
 8000af0:	2800      	cmpeq	r0, #0
 8000af2:	bf1c      	itt	ne
 8000af4:	f04f 31ff 	movne.w	r1, #4294967295
 8000af8:	f04f 30ff 	movne.w	r0, #4294967295
 8000afc:	f000 b972 	b.w	8000de4 <__aeabi_idiv0>
 8000b00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b08:	f000 f806 	bl	8000b18 <__udivmoddi4>
 8000b0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b14:	b004      	add	sp, #16
 8000b16:	4770      	bx	lr

08000b18 <__udivmoddi4>:
 8000b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b1c:	9e08      	ldr	r6, [sp, #32]
 8000b1e:	4604      	mov	r4, r0
 8000b20:	4688      	mov	r8, r1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d14b      	bne.n	8000bbe <__udivmoddi4+0xa6>
 8000b26:	428a      	cmp	r2, r1
 8000b28:	4615      	mov	r5, r2
 8000b2a:	d967      	bls.n	8000bfc <__udivmoddi4+0xe4>
 8000b2c:	fab2 f282 	clz	r2, r2
 8000b30:	b14a      	cbz	r2, 8000b46 <__udivmoddi4+0x2e>
 8000b32:	f1c2 0720 	rsb	r7, r2, #32
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b3e:	4095      	lsls	r5, r2
 8000b40:	ea47 0803 	orr.w	r8, r7, r3
 8000b44:	4094      	lsls	r4, r2
 8000b46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4a:	0c23      	lsrs	r3, r4, #16
 8000b4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b50:	fa1f fc85 	uxth.w	ip, r5
 8000b54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x60>
 8000b64:	18eb      	adds	r3, r5, r3
 8000b66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b6a:	f080 811b 	bcs.w	8000da4 <__udivmoddi4+0x28c>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 8118 	bls.w	8000da4 <__udivmoddi4+0x28c>
 8000b74:	3f02      	subs	r7, #2
 8000b76:	442b      	add	r3, r5
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b8c:	45a4      	cmp	ip, r4
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x8c>
 8000b90:	192c      	adds	r4, r5, r4
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b96:	f080 8107 	bcs.w	8000da8 <__udivmoddi4+0x290>
 8000b9a:	45a4      	cmp	ip, r4
 8000b9c:	f240 8104 	bls.w	8000da8 <__udivmoddi4+0x290>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	442c      	add	r4, r5
 8000ba4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ba8:	eba4 040c 	sub.w	r4, r4, ip
 8000bac:	2700      	movs	r7, #0
 8000bae:	b11e      	cbz	r6, 8000bb8 <__udivmoddi4+0xa0>
 8000bb0:	40d4      	lsrs	r4, r2
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000bb8:	4639      	mov	r1, r7
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d909      	bls.n	8000bd6 <__udivmoddi4+0xbe>
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	f000 80eb 	beq.w	8000d9e <__udivmoddi4+0x286>
 8000bc8:	2700      	movs	r7, #0
 8000bca:	e9c6 0100 	strd	r0, r1, [r6]
 8000bce:	4638      	mov	r0, r7
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	fab3 f783 	clz	r7, r3
 8000bda:	2f00      	cmp	r7, #0
 8000bdc:	d147      	bne.n	8000c6e <__udivmoddi4+0x156>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xd0>
 8000be2:	4282      	cmp	r2, r0
 8000be4:	f200 80fa 	bhi.w	8000ddc <__udivmoddi4+0x2c4>
 8000be8:	1a84      	subs	r4, r0, r2
 8000bea:	eb61 0303 	sbc.w	r3, r1, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d0e0      	beq.n	8000bb8 <__udivmoddi4+0xa0>
 8000bf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfa:	e7dd      	b.n	8000bb8 <__udivmoddi4+0xa0>
 8000bfc:	b902      	cbnz	r2, 8000c00 <__udivmoddi4+0xe8>
 8000bfe:	deff      	udf	#255	; 0xff
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	2a00      	cmp	r2, #0
 8000c06:	f040 808f 	bne.w	8000d28 <__udivmoddi4+0x210>
 8000c0a:	1b49      	subs	r1, r1, r5
 8000c0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c10:	fa1f f885 	uxth.w	r8, r5
 8000c14:	2701      	movs	r7, #1
 8000c16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c24:	fb08 f10c 	mul.w	r1, r8, ip
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	d907      	bls.n	8000c3c <__udivmoddi4+0x124>
 8000c2c:	18eb      	adds	r3, r5, r3
 8000c2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x122>
 8000c34:	4299      	cmp	r1, r3
 8000c36:	f200 80cd 	bhi.w	8000dd4 <__udivmoddi4+0x2bc>
 8000c3a:	4684      	mov	ip, r0
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	b2a3      	uxth	r3, r4
 8000c40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c4c:	fb08 f800 	mul.w	r8, r8, r0
 8000c50:	45a0      	cmp	r8, r4
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0x14c>
 8000c54:	192c      	adds	r4, r5, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x14a>
 8000c5c:	45a0      	cmp	r8, r4
 8000c5e:	f200 80b6 	bhi.w	8000dce <__udivmoddi4+0x2b6>
 8000c62:	4618      	mov	r0, r3
 8000c64:	eba4 0408 	sub.w	r4, r4, r8
 8000c68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c6c:	e79f      	b.n	8000bae <__udivmoddi4+0x96>
 8000c6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000c72:	40bb      	lsls	r3, r7
 8000c74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000c80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c8c:	4325      	orrs	r5, r4
 8000c8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c92:	0c2c      	lsrs	r4, r5, #16
 8000c94:	fb08 3319 	mls	r3, r8, r9, r3
 8000c98:	fa1f fa8e 	uxth.w	sl, lr
 8000c9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca4:	429c      	cmp	r4, r3
 8000ca6:	fa02 f207 	lsl.w	r2, r2, r7
 8000caa:	fa00 f107 	lsl.w	r1, r0, r7
 8000cae:	d90b      	bls.n	8000cc8 <__udivmoddi4+0x1b0>
 8000cb0:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cb8:	f080 8087 	bcs.w	8000dca <__udivmoddi4+0x2b2>
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	f240 8084 	bls.w	8000dca <__udivmoddi4+0x2b2>
 8000cc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cc6:	4473      	add	r3, lr
 8000cc8:	1b1b      	subs	r3, r3, r4
 8000cca:	b2ad      	uxth	r5, r5
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cdc:	45a2      	cmp	sl, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x1da>
 8000ce0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce8:	d26b      	bcs.n	8000dc2 <__udivmoddi4+0x2aa>
 8000cea:	45a2      	cmp	sl, r4
 8000cec:	d969      	bls.n	8000dc2 <__udivmoddi4+0x2aa>
 8000cee:	3802      	subs	r0, #2
 8000cf0:	4474      	add	r4, lr
 8000cf2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cf6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfa:	eba4 040a 	sub.w	r4, r4, sl
 8000cfe:	454c      	cmp	r4, r9
 8000d00:	46c2      	mov	sl, r8
 8000d02:	464b      	mov	r3, r9
 8000d04:	d354      	bcc.n	8000db0 <__udivmoddi4+0x298>
 8000d06:	d051      	beq.n	8000dac <__udivmoddi4+0x294>
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d069      	beq.n	8000de0 <__udivmoddi4+0x2c8>
 8000d0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d10:	eb64 0403 	sbc.w	r4, r4, r3
 8000d14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d18:	40fd      	lsrs	r5, r7
 8000d1a:	40fc      	lsrs	r4, r7
 8000d1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d20:	e9c6 5400 	strd	r5, r4, [r6]
 8000d24:	2700      	movs	r7, #0
 8000d26:	e747      	b.n	8000bb8 <__udivmoddi4+0xa0>
 8000d28:	f1c2 0320 	rsb	r3, r2, #32
 8000d2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000d30:	4095      	lsls	r5, r2
 8000d32:	fa01 f002 	lsl.w	r0, r1, r2
 8000d36:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3e:	4338      	orrs	r0, r7
 8000d40:	0c01      	lsrs	r1, r0, #16
 8000d42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d46:	fa1f f885 	uxth.w	r8, r5
 8000d4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb07 f308 	mul.w	r3, r7, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x256>
 8000d5e:	1869      	adds	r1, r5, r1
 8000d60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d64:	d22f      	bcs.n	8000dc6 <__udivmoddi4+0x2ae>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d92d      	bls.n	8000dc6 <__udivmoddi4+0x2ae>
 8000d6a:	3f02      	subs	r7, #2
 8000d6c:	4429      	add	r1, r5
 8000d6e:	1acb      	subs	r3, r1, r3
 8000d70:	b281      	uxth	r1, r0
 8000d72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7e:	fb00 f308 	mul.w	r3, r0, r8
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x27e>
 8000d86:	1869      	adds	r1, r5, r1
 8000d88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d8c:	d217      	bcs.n	8000dbe <__udivmoddi4+0x2a6>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d915      	bls.n	8000dbe <__udivmoddi4+0x2a6>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4429      	add	r1, r5
 8000d96:	1ac9      	subs	r1, r1, r3
 8000d98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d9c:	e73b      	b.n	8000c16 <__udivmoddi4+0xfe>
 8000d9e:	4637      	mov	r7, r6
 8000da0:	4630      	mov	r0, r6
 8000da2:	e709      	b.n	8000bb8 <__udivmoddi4+0xa0>
 8000da4:	4607      	mov	r7, r0
 8000da6:	e6e7      	b.n	8000b78 <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fb      	b.n	8000ba4 <__udivmoddi4+0x8c>
 8000dac:	4541      	cmp	r1, r8
 8000dae:	d2ab      	bcs.n	8000d08 <__udivmoddi4+0x1f0>
 8000db0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db4:	eb69 020e 	sbc.w	r2, r9, lr
 8000db8:	3801      	subs	r0, #1
 8000dba:	4613      	mov	r3, r2
 8000dbc:	e7a4      	b.n	8000d08 <__udivmoddi4+0x1f0>
 8000dbe:	4660      	mov	r0, ip
 8000dc0:	e7e9      	b.n	8000d96 <__udivmoddi4+0x27e>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	e795      	b.n	8000cf2 <__udivmoddi4+0x1da>
 8000dc6:	4667      	mov	r7, ip
 8000dc8:	e7d1      	b.n	8000d6e <__udivmoddi4+0x256>
 8000dca:	4681      	mov	r9, r0
 8000dcc:	e77c      	b.n	8000cc8 <__udivmoddi4+0x1b0>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	442c      	add	r4, r5
 8000dd2:	e747      	b.n	8000c64 <__udivmoddi4+0x14c>
 8000dd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd8:	442b      	add	r3, r5
 8000dda:	e72f      	b.n	8000c3c <__udivmoddi4+0x124>
 8000ddc:	4638      	mov	r0, r7
 8000dde:	e708      	b.n	8000bf2 <__udivmoddi4+0xda>
 8000de0:	4637      	mov	r7, r6
 8000de2:	e6e9      	b.n	8000bb8 <__udivmoddi4+0xa0>

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <delay_init+0x44>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <delay_init+0x44>)
 8000df8:	f023 0304 	bic.w	r3, r3, #4
 8000dfc:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	08db      	lsrs	r3, r3, #3
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <delay_init+0x48>)
 8000e06:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <delay_init+0x48>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	461a      	mov	r2, r3
 8000e10:	0152      	lsls	r2, r2, #5
 8000e12:	1ad2      	subs	r2, r2, r3
 8000e14:	0092      	lsls	r2, r2, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <delay_init+0x4c>)
 8000e1e:	801a      	strh	r2, [r3, #0]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e010 	.word	0xe000e010
 8000e30:	20000094 	.word	0x20000094
 8000e34:	20000096 	.word	0x20000096

08000e38 <delay_ms>:

void delay_ms(uint16_t nms)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <delay_ms+0x60>)
 8000e46:	8812      	ldrh	r2, [r2, #0]
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <delay_ms+0x64>)
 8000e4c:	fb01 f303 	mul.w	r3, r1, r3
 8000e50:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           //清空計數器
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <delay_ms+0x64>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <delay_ms+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <delay_ms+0x64>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <delay_ms+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <delay_ms+0x46>
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f2      	beq.n	8000e64 <delay_ms+0x2c>
	SysTick->CTRL=0x00;       //關閉計數器
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <delay_ms+0x64>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <delay_ms+0x64>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000096 	.word	0x20000096
 8000e9c:	e000e010 	.word	0xe000e010

08000ea0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <vApplicationGetIdleTaskMemory+0x30>)
 8000eb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000098 	.word	0x20000098
 8000ed0:	200000ec 	.word	0x200000ec
 8000ed4:	00000000 	.word	0x00000000

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b090      	sub	sp, #64	; 0x40
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f001 f8b7 	bl	8002050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee2:	f000 f8eb 	bl	80010bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f000 fabf 	bl	8001468 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eea:	f000 fa95 	bl	8001418 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8000eee:	f000 fa69 	bl	80013c4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000ef2:	f000 f941 	bl	8001178 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  delay_init(16);
 8000ef6:	2010      	movs	r0, #16
 8000ef8:	f7ff ff76 	bl	8000de8 <delay_init>

  //TODO:
  SwitchValue[0] = HAL_GPIO_ReadPin(GPIOE, Switch1_Pin);
 8000efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f00:	4863      	ldr	r0, [pc, #396]	; (8001090 <main+0x1b8>)
 8000f02:	f002 fb47 	bl	8003594 <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b62      	ldr	r3, [pc, #392]	; (8001094 <main+0x1bc>)
 8000f0c:	701a      	strb	r2, [r3, #0]
  SwitchValue[1] = HAL_GPIO_ReadPin(GPIOE, Switch2_Pin);
 8000f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f12:	485f      	ldr	r0, [pc, #380]	; (8001090 <main+0x1b8>)
 8000f14:	f002 fb3e 	bl	8003594 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b5d      	ldr	r3, [pc, #372]	; (8001094 <main+0x1bc>)
 8000f1e:	705a      	strb	r2, [r3, #1]
  SwitchValue[2] = HAL_GPIO_ReadPin(GPIOE, Switch3_Pin);
 8000f20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f24:	485a      	ldr	r0, [pc, #360]	; (8001090 <main+0x1b8>)
 8000f26:	f002 fb35 	bl	8003594 <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b59      	ldr	r3, [pc, #356]	; (8001094 <main+0x1bc>)
 8000f30:	709a      	strb	r2, [r3, #2]
  SwitchValue[3] = HAL_GPIO_ReadPin(GPIOE, Switch4_Pin);
 8000f32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f36:	4856      	ldr	r0, [pc, #344]	; (8001090 <main+0x1b8>)
 8000f38:	f002 fb2c 	bl	8003594 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b54      	ldr	r3, [pc, #336]	; (8001094 <main+0x1bc>)
 8000f42:	70da      	strb	r2, [r3, #3]
  SwitchValue[4] = HAL_GPIO_ReadPin(GPIOE, Switch5_Pin);
 8000f44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f48:	4851      	ldr	r0, [pc, #324]	; (8001090 <main+0x1b8>)
 8000f4a:	f002 fb23 	bl	8003594 <HAL_GPIO_ReadPin>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b50      	ldr	r3, [pc, #320]	; (8001094 <main+0x1bc>)
 8000f54:	711a      	strb	r2, [r3, #4]
  SwitchValue[5] = HAL_GPIO_ReadPin(GPIOE, Switch6_Pin);
 8000f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5a:	484d      	ldr	r0, [pc, #308]	; (8001090 <main+0x1b8>)
 8000f5c:	f002 fb1a 	bl	8003594 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b4b      	ldr	r3, [pc, #300]	; (8001094 <main+0x1bc>)
 8000f66:	715a      	strb	r2, [r3, #5]
  SwitchValue[6] = HAL_GPIO_ReadPin(GPIOE, Switch7_Pin);
 8000f68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f6c:	4848      	ldr	r0, [pc, #288]	; (8001090 <main+0x1b8>)
 8000f6e:	f002 fb11 	bl	8003594 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b47      	ldr	r3, [pc, #284]	; (8001094 <main+0x1bc>)
 8000f78:	719a      	strb	r2, [r3, #6]
  SwitchValue[7] = HAL_GPIO_ReadPin(GPIOE, Switch8_Pin);
 8000f7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f7e:	4844      	ldr	r0, [pc, #272]	; (8001090 <main+0x1b8>)
 8000f80:	f002 fb08 	bl	8003594 <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b42      	ldr	r3, [pc, #264]	; (8001094 <main+0x1bc>)
 8000f8a:	71da      	strb	r2, [r3, #7]


  //TODO:
  for(uint8_t i = 0; i <8; i++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000f92:	e039      	b.n	8001008 <main+0x130>
  {
	  slaveID += SwitchValue[i] * pow(2,i);
 8000f94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f98:	4a3e      	ldr	r2, [pc, #248]	; (8001094 <main+0x1bc>)
 8000f9a:	5cd3      	ldrb	r3, [r2, r3]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fa69 	bl	8000474 <__aeabi_i2d>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	460d      	mov	r5, r1
 8000fa6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fa52 	bl	8000454 <__aeabi_ui2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	ec43 2b11 	vmov	d1, r2, r3
 8000fb8:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8001088 <main+0x1b0>
 8000fbc:	f006 f96c 	bl	8007298 <pow>
 8000fc0:	ec53 2b10 	vmov	r2, r3, d0
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	f7ff fabe 	bl	8000548 <__aeabi_dmul>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	460c      	mov	r4, r1
 8000fd0:	4625      	mov	r5, r4
 8000fd2:	461c      	mov	r4, r3
 8000fd4:	4b30      	ldr	r3, [pc, #192]	; (8001098 <main+0x1c0>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa4b 	bl	8000474 <__aeabi_i2d>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	f7ff f8f9 	bl	80001dc <__adddf3>
 8000fea:	4603      	mov	r3, r0
 8000fec:	460c      	mov	r4, r1
 8000fee:	4618      	mov	r0, r3
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	f7ff fd59 	bl	8000aa8 <__aeabi_d2uiz>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <main+0x1c0>)
 8000ffc:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i <8; i++)
 8000ffe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001002:	3301      	adds	r3, #1
 8001004:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001008:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800100c:	2b07      	cmp	r3, #7
 800100e:	d9c1      	bls.n	8000f94 <main+0xbc>
  }

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCVALUE, 16);
 8001010:	2210      	movs	r2, #16
 8001012:	4922      	ldr	r1, [pc, #136]	; (800109c <main+0x1c4>)
 8001014:	4822      	ldr	r0, [pc, #136]	; (80010a0 <main+0x1c8>)
 8001016:	f001 f8d1 	bl	80021bc <HAL_ADC_Start_DMA>

  delay_ms(100);
 800101a:	2064      	movs	r0, #100	; 0x64
 800101c:	f7ff ff0c 	bl	8000e38 <delay_ms>

 //ADCstatus =  HAL_ADC_Stop_DMA(&hadc1);

  HAL_UART_Receive_DMA(&huart6, rxbuffer, 8);
 8001020:	2208      	movs	r2, #8
 8001022:	4920      	ldr	r1, [pc, #128]	; (80010a4 <main+0x1cc>)
 8001024:	4820      	ldr	r0, [pc, #128]	; (80010a8 <main+0x1d0>)
 8001026:	f002 ffef 	bl	8004008 <HAL_UART_Receive_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ModbusTransTask */
  osThreadDef(ModbusTransTask, ModbusTransThread, osPriorityNormal, 0, 128);
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <main+0x1d4>)
 800102c:	f107 0420 	add.w	r4, r7, #32
 8001030:	461d      	mov	r5, r3
 8001032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001036:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800103a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusTransTaskHandle = osThreadCreate(osThread(ModbusTransTask), NULL);
 800103e:	f107 0320 	add.w	r3, r7, #32
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f003 ff38 	bl	8004eba <osThreadCreate>
 800104a:	4602      	mov	r2, r0
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <main+0x1d8>)
 800104e:	601a      	str	r2, [r3, #0]

  /* definition and creation of ModbusSetTask */
  osThreadDef(ModbusSetTask, ModbusSetThread, osPriorityNormal, 0, 128);
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <main+0x1dc>)
 8001052:	1d3c      	adds	r4, r7, #4
 8001054:	461d      	mov	r5, r3
 8001056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800105e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusSetTaskHandle = osThreadCreate(osThread(ModbusSetTask), NULL);
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f003 ff27 	bl	8004eba <osThreadCreate>
 800106c:	4602      	mov	r2, r0
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <main+0x1e0>)
 8001070:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  ModBus_Init();
 8001072:	f000 fb17 	bl	80016a4 <ModBus_Init>
  ModBus_SetAddress(slaveID);
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <main+0x1c0>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f000 fb72 	bl	8001764 <ModBus_SetAddress>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001080:	f003 ff14 	bl	8004eac <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001084:	e7fe      	b.n	8001084 <main+0x1ac>
 8001086:	bf00      	nop
 8001088:	00000000 	.word	0x00000000
 800108c:	40000000 	.word	0x40000000
 8001090:	40021000 	.word	0x40021000
 8001094:	200041a4 	.word	0x200041a4
 8001098:	200002ec 	.word	0x200002ec
 800109c:	200040ec 	.word	0x200040ec
 80010a0:	200040a4 	.word	0x200040a4
 80010a4:	200041ac 	.word	0x200041ac
 80010a8:	20004164 	.word	0x20004164
 80010ac:	08008370 	.word	0x08008370
 80010b0:	2000409c 	.word	0x2000409c
 80010b4:	0800839c 	.word	0x0800839c
 80010b8:	200040a0 	.word	0x200040a0

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b094      	sub	sp, #80	; 0x50
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 0320 	add.w	r3, r7, #32
 80010c6:	2230      	movs	r2, #48	; 0x30
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f006 f8db 	bl	8007286 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	4b22      	ldr	r3, [pc, #136]	; (8001170 <SystemClock_Config+0xb4>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	4a21      	ldr	r2, [pc, #132]	; (8001170 <SystemClock_Config+0xb4>)
 80010ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ee:	6413      	str	r3, [r2, #64]	; 0x40
 80010f0:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <SystemClock_Config+0xb4>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <SystemClock_Config+0xb8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <SystemClock_Config+0xb8>)
 8001106:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <SystemClock_Config+0xb8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001118:	2302      	movs	r3, #2
 800111a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111c:	2301      	movs	r3, #1
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001120:	2310      	movs	r3, #16
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001124:	2300      	movs	r3, #0
 8001126:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001128:	f107 0320 	add.w	r3, r7, #32
 800112c:	4618      	mov	r0, r3
 800112e:	f002 fa49 	bl	80035c4 <HAL_RCC_OscConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001138:	f000 fa74 	bl	8001624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113c:	230f      	movs	r3, #15
 800113e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fca4 	bl	8003aa4 <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001162:	f000 fa5f 	bl	8001624 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3750      	adds	r7, #80	; 0x50
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40007000 	.word	0x40007000

08001178 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800118a:	4b8b      	ldr	r3, [pc, #556]	; (80013b8 <MX_ADC1_Init+0x240>)
 800118c:	4a8b      	ldr	r2, [pc, #556]	; (80013bc <MX_ADC1_Init+0x244>)
 800118e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001190:	4b89      	ldr	r3, [pc, #548]	; (80013b8 <MX_ADC1_Init+0x240>)
 8001192:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001196:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001198:	4b87      	ldr	r3, [pc, #540]	; (80013b8 <MX_ADC1_Init+0x240>)
 800119a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800119e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011a0:	4b85      	ldr	r3, [pc, #532]	; (80013b8 <MX_ADC1_Init+0x240>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011a6:	4b84      	ldr	r3, [pc, #528]	; (80013b8 <MX_ADC1_Init+0x240>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ac:	4b82      	ldr	r3, [pc, #520]	; (80013b8 <MX_ADC1_Init+0x240>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b4:	4b80      	ldr	r3, [pc, #512]	; (80013b8 <MX_ADC1_Init+0x240>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ba:	4b7f      	ldr	r3, [pc, #508]	; (80013b8 <MX_ADC1_Init+0x240>)
 80011bc:	4a80      	ldr	r2, [pc, #512]	; (80013c0 <MX_ADC1_Init+0x248>)
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c0:	4b7d      	ldr	r3, [pc, #500]	; (80013b8 <MX_ADC1_Init+0x240>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 80011c6:	4b7c      	ldr	r3, [pc, #496]	; (80013b8 <MX_ADC1_Init+0x240>)
 80011c8:	2210      	movs	r2, #16
 80011ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011cc:	4b7a      	ldr	r3, [pc, #488]	; (80013b8 <MX_ADC1_Init+0x240>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d4:	4b78      	ldr	r3, [pc, #480]	; (80013b8 <MX_ADC1_Init+0x240>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011da:	4877      	ldr	r0, [pc, #476]	; (80013b8 <MX_ADC1_Init+0x240>)
 80011dc:	f000 ffaa 	bl	8002134 <HAL_ADC_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80011e6:	f000 fa1d 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80011f2:	2307      	movs	r3, #7
 80011f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	4619      	mov	r1, r3
 80011fa:	486f      	ldr	r0, [pc, #444]	; (80013b8 <MX_ADC1_Init+0x240>)
 80011fc:	f001 f8ee 	bl	80023dc <HAL_ADC_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001206:	f000 fa0d 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800120a:	2301      	movs	r3, #1
 800120c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800120e:	2302      	movs	r3, #2
 8001210:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	4619      	mov	r1, r3
 8001216:	4868      	ldr	r0, [pc, #416]	; (80013b8 <MX_ADC1_Init+0x240>)
 8001218:	f001 f8e0 	bl	80023dc <HAL_ADC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001222:	f000 f9ff 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001226:	2302      	movs	r3, #2
 8001228:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800122a:	2303      	movs	r3, #3
 800122c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	4619      	mov	r1, r3
 8001232:	4861      	ldr	r0, [pc, #388]	; (80013b8 <MX_ADC1_Init+0x240>)
 8001234:	f001 f8d2 	bl	80023dc <HAL_ADC_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800123e:	f000 f9f1 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001242:	2303      	movs	r3, #3
 8001244:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001246:	2304      	movs	r3, #4
 8001248:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124a:	463b      	mov	r3, r7
 800124c:	4619      	mov	r1, r3
 800124e:	485a      	ldr	r0, [pc, #360]	; (80013b8 <MX_ADC1_Init+0x240>)
 8001250:	f001 f8c4 	bl	80023dc <HAL_ADC_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800125a:	f000 f9e3 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800125e:	2304      	movs	r3, #4
 8001260:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001262:	2305      	movs	r3, #5
 8001264:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	4619      	mov	r1, r3
 800126a:	4853      	ldr	r0, [pc, #332]	; (80013b8 <MX_ADC1_Init+0x240>)
 800126c:	f001 f8b6 	bl	80023dc <HAL_ADC_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8001276:	f000 f9d5 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800127a:	2305      	movs	r3, #5
 800127c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800127e:	2306      	movs	r3, #6
 8001280:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	4619      	mov	r1, r3
 8001286:	484c      	ldr	r0, [pc, #304]	; (80013b8 <MX_ADC1_Init+0x240>)
 8001288:	f001 f8a8 	bl	80023dc <HAL_ADC_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8001292:	f000 f9c7 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001296:	2306      	movs	r3, #6
 8001298:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800129a:	2307      	movs	r3, #7
 800129c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129e:	463b      	mov	r3, r7
 80012a0:	4619      	mov	r1, r3
 80012a2:	4845      	ldr	r0, [pc, #276]	; (80013b8 <MX_ADC1_Init+0x240>)
 80012a4:	f001 f89a 	bl	80023dc <HAL_ADC_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 80012ae:	f000 f9b9 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012b2:	2307      	movs	r3, #7
 80012b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80012b6:	2308      	movs	r3, #8
 80012b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ba:	463b      	mov	r3, r7
 80012bc:	4619      	mov	r1, r3
 80012be:	483e      	ldr	r0, [pc, #248]	; (80013b8 <MX_ADC1_Init+0x240>)
 80012c0:	f001 f88c 	bl	80023dc <HAL_ADC_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 80012ca:	f000 f9ab 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012ce:	2308      	movs	r3, #8
 80012d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80012d2:	2309      	movs	r3, #9
 80012d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	4619      	mov	r1, r3
 80012da:	4837      	ldr	r0, [pc, #220]	; (80013b8 <MX_ADC1_Init+0x240>)
 80012dc:	f001 f87e 	bl	80023dc <HAL_ADC_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80012e6:	f000 f99d 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012ea:	2309      	movs	r3, #9
 80012ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80012ee:	230a      	movs	r3, #10
 80012f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f2:	463b      	mov	r3, r7
 80012f4:	4619      	mov	r1, r3
 80012f6:	4830      	ldr	r0, [pc, #192]	; (80013b8 <MX_ADC1_Init+0x240>)
 80012f8:	f001 f870 	bl	80023dc <HAL_ADC_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001302:	f000 f98f 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001306:	230a      	movs	r3, #10
 8001308:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800130a:	230b      	movs	r3, #11
 800130c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130e:	463b      	mov	r3, r7
 8001310:	4619      	mov	r1, r3
 8001312:	4829      	ldr	r0, [pc, #164]	; (80013b8 <MX_ADC1_Init+0x240>)
 8001314:	f001 f862 	bl	80023dc <HAL_ADC_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 800131e:	f000 f981 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001322:	230b      	movs	r3, #11
 8001324:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001326:	230c      	movs	r3, #12
 8001328:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132a:	463b      	mov	r3, r7
 800132c:	4619      	mov	r1, r3
 800132e:	4822      	ldr	r0, [pc, #136]	; (80013b8 <MX_ADC1_Init+0x240>)
 8001330:	f001 f854 	bl	80023dc <HAL_ADC_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 800133a:	f000 f973 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800133e:	230c      	movs	r3, #12
 8001340:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001342:	230d      	movs	r3, #13
 8001344:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001346:	463b      	mov	r3, r7
 8001348:	4619      	mov	r1, r3
 800134a:	481b      	ldr	r0, [pc, #108]	; (80013b8 <MX_ADC1_Init+0x240>)
 800134c:	f001 f846 	bl	80023dc <HAL_ADC_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 8001356:	f000 f965 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800135a:	230d      	movs	r3, #13
 800135c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 800135e:	230e      	movs	r3, #14
 8001360:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <MX_ADC1_Init+0x240>)
 8001368:	f001 f838 	bl	80023dc <HAL_ADC_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC1_Init+0x1fe>
  {
    Error_Handler();
 8001372:	f000 f957 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001376:	230e      	movs	r3, #14
 8001378:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 800137a:	230f      	movs	r3, #15
 800137c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	480d      	ldr	r0, [pc, #52]	; (80013b8 <MX_ADC1_Init+0x240>)
 8001384:	f001 f82a 	bl	80023dc <HAL_ADC_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_ADC1_Init+0x21a>
  {
    Error_Handler();
 800138e:	f000 f949 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001392:	230f      	movs	r3, #15
 8001394:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8001396:	2310      	movs	r3, #16
 8001398:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139a:	463b      	mov	r3, r7
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <MX_ADC1_Init+0x240>)
 80013a0:	f001 f81c 	bl	80023dc <HAL_ADC_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_ADC1_Init+0x236>
  {
    Error_Handler();
 80013aa:	f000 f93b 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200040a4 	.word	0x200040a4
 80013bc:	40012000 	.word	0x40012000
 80013c0:	0f000001 	.word	0x0f000001

080013c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <MX_USART6_UART_Init+0x50>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013fc:	f002 fd1e 	bl	8003e3c <HAL_UART_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001406:	f000 f90d 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20004164 	.word	0x20004164
 8001414:	40011400 	.word	0x40011400

08001418 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <MX_DMA_Init+0x4c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <MX_DMA_Init+0x4c>)
 8001428:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <MX_DMA_Init+0x4c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2105      	movs	r1, #5
 800143e:	2038      	movs	r0, #56	; 0x38
 8001440:	f001 fb47 	bl	8002ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001444:	2038      	movs	r0, #56	; 0x38
 8001446:	f001 fb60 	bl	8002b0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2105      	movs	r1, #5
 800144e:	2039      	movs	r0, #57	; 0x39
 8001450:	f001 fb3f 	bl	8002ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001454:	2039      	movs	r0, #57	; 0x39
 8001456:	f001 fb58 	bl	8002b0a <HAL_NVIC_EnableIRQ>

}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <MX_GPIO_Init+0xa8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a22      	ldr	r2, [pc, #136]	; (8001510 <MX_GPIO_Init+0xa8>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <MX_GPIO_Init+0xa8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <MX_GPIO_Init+0xa8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a1b      	ldr	r2, [pc, #108]	; (8001510 <MX_GPIO_Init+0xa8>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b19      	ldr	r3, [pc, #100]	; (8001510 <MX_GPIO_Init+0xa8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <MX_GPIO_Init+0xa8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a14      	ldr	r2, [pc, #80]	; (8001510 <MX_GPIO_Init+0xa8>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_GPIO_Init+0xa8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_GPIO_Init+0xa8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <MX_GPIO_Init+0xa8>)
 80014dc:	f043 0310 	orr.w	r3, r3, #16
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_GPIO_Init+0xa8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Switch1_Pin Switch2_Pin Switch3_Pin Switch4_Pin 
                           Switch5_Pin Switch6_Pin Switch7_Pin Switch8_Pin */
  GPIO_InitStruct.Pin = Switch1_Pin|Switch2_Pin|Switch3_Pin|Switch4_Pin 
 80014ee:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80014f2:	617b      	str	r3, [r7, #20]
                          |Switch5_Pin|Switch6_Pin|Switch7_Pin|Switch8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4804      	ldr	r0, [pc, #16]	; (8001514 <MX_GPIO_Init+0xac>)
 8001504:	f001 feac 	bl	8003260 <HAL_GPIO_Init>

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	40021000 	.word	0x40021000

08001518 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 /* Prevent unused argument(s) compilation warning */
 UNUSED(huart);
 /* NOTE: This function should not be modified, when the callback is needed,
          the HAL_UART_RxCpltCallback could be implemented in the user file
  */
 HAL_UART_Receive_DMA(&huart6, rxbuffer, 8);
 8001520:	2208      	movs	r2, #8
 8001522:	490d      	ldr	r1, [pc, #52]	; (8001558 <HAL_UART_RxCpltCallback+0x40>)
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <HAL_UART_RxCpltCallback+0x44>)
 8001526:	f002 fd6f 	bl	8004008 <HAL_UART_Receive_DMA>
	for(int i=0;i<8;i++)
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	e00c      	b.n	800154a <HAL_UART_RxCpltCallback+0x32>
	{
		 osMessagePut(ModBusInHandle,rxbuffer[i],0);
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_UART_RxCpltCallback+0x48>)
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_UART_RxCpltCallback+0x40>)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	4619      	mov	r1, r3
 8001540:	f003 fd30 	bl	8004fa4 <osMessagePut>
	for(int i=0;i<8;i++)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	3301      	adds	r3, #1
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2b07      	cmp	r3, #7
 800154e:	ddef      	ble.n	8001530 <HAL_UART_RxCpltCallback+0x18>
	}
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200041ac 	.word	0x200041ac
 800155c:	20004164 	.word	0x20004164
 8001560:	20004388 	.word	0x20004388

08001564 <ModbusTransThread>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ModbusTransThread */
void ModbusTransThread(void const * argument)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b0c6      	sub	sp, #280	; 0x118
 8001568:	af00      	add	r7, sp, #0
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	  uint8_t buf[256]; // buffer, where we collect output data
	  uint8_t c = 0; // counter for buffer fill
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	  uint8_t count = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  /* Infinite loop */
  for(;;)
  {
	 // ModBus_SetRegister(0,5+1);

    osEvent evt = osMessageGet(ModBusOutHandle,200); // wait here 200 tick
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <ModbusTransThread+0x84>)
 800157c:	6819      	ldr	r1, [r3, #0]
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	22c8      	movs	r2, #200	; 0xc8
 8001584:	4618      	mov	r0, r3
 8001586:	f003 fd4d 	bl	8005024 <osMessageGet>
    if (evt.status == osEventMessage)
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b10      	cmp	r3, #16
 8001592:	d10c      	bne.n	80015ae <ModbusTransThread+0x4a>
      {

        buf[c++]=(uint8_t) evt.value.v;
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	6859      	ldr	r1, [r3, #4]
 800159a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 80015a4:	461a      	mov	r2, r3
 80015a6:	b2c9      	uxtb	r1, r1
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	5499      	strb	r1, [r3, r2]
      }
    if (evt.status == osEventTimeout)
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b40      	cmp	r3, #64	; 0x40
 80015b6:	d1e0      	bne.n	800157a <ModbusTransThread+0x16>
      {
        if( (c > 0) && (c < 254) ) // ok, something in buffer exist, lets send it
 80015b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00f      	beq.n	80015e0 <ModbusTransThread+0x7c>
 80015c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80015c4:	2bfd      	cmp	r3, #253	; 0xfd
 80015c6:	d80b      	bhi.n	80015e0 <ModbusTransThread+0x7c>
        {
        	HAL_StatusTypeDef AA = HAL_UART_Transmit(&huart6, buf, c, 50); // by USB-CDC
 80015c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	f107 0114 	add.w	r1, r7, #20
 80015d2:	2332      	movs	r3, #50	; 0x32
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <ModbusTransThread+0x88>)
 80015d6:	f002 fc7e 	bl	8003ed6 <HAL_UART_Transmit>
 80015da:	4603      	mov	r3, r0
 80015dc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
        }
      c=0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  {
 80015e6:	e7c8      	b.n	800157a <ModbusTransThread+0x16>
 80015e8:	20004380 	.word	0x20004380
 80015ec:	20004164 	.word	0x20004164

080015f0 <ModbusSetThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ModbusSetThread */
void ModbusSetThread(void const * argument)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ModbusSetThread */
  /* Infinite loop */
  for(;;)
  {

	for(int i=0;i<16;i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e00c      	b.n	8001618 <ModbusSetThread+0x28>
	{
		   ModBus_SetRegister(i,ADCVALUE[i]);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	b2d8      	uxtb	r0, r3
 8001602:	4a07      	ldr	r2, [pc, #28]	; (8001620 <ModbusSetThread+0x30>)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	4619      	mov	r1, r3
 800160e:	f000 fa63 	bl	8001ad8 <ModBus_SetRegister>
	for(int i=0;i<16;i++)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3301      	adds	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b0f      	cmp	r3, #15
 800161c:	ddef      	ble.n	80015fe <ModbusSetThread+0xe>
 800161e:	e7eb      	b.n	80015f8 <ModbusSetThread+0x8>
 8001620:	200040ec 	.word	0x200040ec

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <ModBusTask>:
uint8_t mb_buf_out_count;

void ModBusParse(void);

void ModBusTask(void const * argument)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osEvent evt = osMessageGet(ModBusInHandle,ModBus35);
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <ModBusTask+0x64>)
 800163e:	6819      	ldr	r1, [r3, #0]
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	2223      	movs	r2, #35	; 0x23
 8001646:	4618      	mov	r0, r3
 8001648:	f003 fcec 	bl	8005024 <osMessageGet>
    // Frame end?
    if (evt.status == osEventTimeout)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	2b40      	cmp	r3, #64	; 0x40
 8001650:	d108      	bne.n	8001664 <ModBusTask+0x30>
      {
        if(mb_buf_in_count > 0) // ok, something in buffer exist, lets parse it
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <ModBusTask+0x68>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <ModBusTask+0x2a>
        {
          ModBusParse();
 800165a:	f000 f893 	bl	8001784 <ModBusParse>
        }  
      mb_buf_in_count=0;
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <ModBusTask+0x68>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
      }
    // Wow, something come!
    if (evt.status == osEventMessage)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2b10      	cmp	r3, #16
 8001668:	d1e8      	bne.n	800163c <ModBusTask+0x8>
      {
        uint8_t byte = (uint8_t) evt.value.v;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	75fb      	strb	r3, [r7, #23]
        // buffer has space for incoming?
        if(mb_buf_in_count<254)
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <ModBusTask+0x68>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2bfd      	cmp	r3, #253	; 0xfd
 8001674:	d80c      	bhi.n	8001690 <ModBusTask+0x5c>
        {
          mb_buf_in[mb_buf_in_count]=byte;
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <ModBusTask+0x68>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	4619      	mov	r1, r3
 800167c:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <ModBusTask+0x6c>)
 800167e:	7dfb      	ldrb	r3, [r7, #23]
 8001680:	5453      	strb	r3, [r2, r1]
          mb_buf_in_count=mb_buf_in_count+1; // prevent opt/war on come compilers
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <ModBusTask+0x68>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <ModBusTask+0x68>)
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	e7d5      	b.n	800163c <ModBusTask+0x8>
        }
        else // oops, bad frame, by standard we should drop it and no answer
        {
          mb_buf_in_count=0;
 8001690:	4b02      	ldr	r3, [pc, #8]	; (800169c <ModBusTask+0x68>)
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
  {
 8001696:	e7d1      	b.n	800163c <ModBusTask+0x8>
 8001698:	20004388 	.word	0x20004388
 800169c:	2000438c 	.word	0x2000438c
 80016a0:	20004390 	.word	0x20004390

080016a4 <ModBus_Init>:
      }
  }
}

void ModBus_Init(void)
{
 80016a4:	b5b0      	push	{r4, r5, r7, lr}
 80016a6:	b090      	sub	sp, #64	; 0x40
 80016a8:	af00      	add	r7, sp, #0
  osMessageQDef(ModBusIn, 256, uint8_t);
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <ModBus_Init+0x9c>)
 80016ac:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80016b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ModBusInHandle = osMessageCreate(osMessageQ(ModBusIn), NULL);
 80016b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f003 fc48 	bl	8004f52 <osMessageCreate>
 80016c2:	4602      	mov	r2, r0
 80016c4:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <ModBus_Init+0xa0>)
 80016c6:	601a      	str	r2, [r3, #0]
  osMessageQDef(ModBusOut, 256, uint8_t);
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <ModBus_Init+0x9c>)
 80016ca:	f107 041c 	add.w	r4, r7, #28
 80016ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ModBusOutHandle = osMessageCreate(osMessageQ(ModBusOut), NULL);
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f003 fc39 	bl	8004f52 <osMessageCreate>
 80016e0:	4602      	mov	r2, r0
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <ModBus_Init+0xa4>)
 80016e4:	601a      	str	r2, [r3, #0]
  osThreadDef(ModBusTask, ModBusTask, osPriorityNormal, 0, 128);
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <ModBus_Init+0xa8>)
 80016e8:	463c      	mov	r4, r7
 80016ea:	461d      	mov	r5, r3
 80016ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModBusTaskHandle = osThreadCreate(osThread(ModBusTask), NULL);
 80016f8:	463b      	mov	r3, r7
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 fbdc 	bl	8004eba <osThreadCreate>
 8001702:	4602      	mov	r2, r0
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <ModBus_Init+0xac>)
 8001706:	601a      	str	r2, [r3, #0]
  mb_buf_in_count=0;
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <ModBus_Init+0xb0>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
  mb_addr=247; // by default maximum possible adrress
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <ModBus_Init+0xb4>)
 8001710:	22f7      	movs	r2, #247	; 0xf7
 8001712:	701a      	strb	r2, [r3, #0]
  mb_buf_out_count=0;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <ModBus_Init+0xb8>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<ModBusRegisters;i++) 
 800171a:	2300      	movs	r3, #0
 800171c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800171e:	e007      	b.n	8001730 <ModBus_Init+0x8c>
  {
    mb_reg[i]=0;
 8001720:	4a0f      	ldr	r2, [pc, #60]	; (8001760 <ModBus_Init+0xbc>)
 8001722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001724:	2100      	movs	r1, #0
 8001726:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0;i<ModBusRegisters;i++) 
 800172a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800172c:	3301      	adds	r3, #1
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001732:	2b63      	cmp	r3, #99	; 0x63
 8001734:	ddf4      	ble.n	8001720 <ModBus_Init+0x7c>
  }
}
 8001736:	bf00      	nop
 8001738:	3740      	adds	r7, #64	; 0x40
 800173a:	46bd      	mov	sp, r7
 800173c:	bdb0      	pop	{r4, r5, r7, pc}
 800173e:	bf00      	nop
 8001740:	080083b8 	.word	0x080083b8
 8001744:	20004388 	.word	0x20004388
 8001748:	20004380 	.word	0x20004380
 800174c:	080083d4 	.word	0x080083d4
 8001750:	200041b4 	.word	0x200041b4
 8001754:	2000438c 	.word	0x2000438c
 8001758:	20004384 	.word	0x20004384
 800175c:	2000438d 	.word	0x2000438d
 8001760:	200041b8 	.word	0x200041b8

08001764 <ModBus_SetAddress>:

void ModBus_SetAddress(uint8_t addr)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  mb_addr = addr;
 800176e:	4a04      	ldr	r2, [pc, #16]	; (8001780 <ModBus_SetAddress+0x1c>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	7013      	strb	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	20004384 	.word	0x20004384

08001784 <ModBusParse>:
void CRC16_OUT(void);
uint8_t CRC16_IN(void);

// parse something in incoming buffer 
void ModBusParse(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
    if(mb_buf_in_count==0) // call as by mistake on empty buffer?
 800178a:	4b72      	ldr	r3, [pc, #456]	; (8001954 <ModBusParse+0x1d0>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 818d 	beq.w	8001aae <ModBusParse+0x32a>
    {
      return;
    }
    
    if(mb_buf_in[0] != mb_addr) // its not our address!
 8001794:	4b70      	ldr	r3, [pc, #448]	; (8001958 <ModBusParse+0x1d4>)
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	4b70      	ldr	r3, [pc, #448]	; (800195c <ModBusParse+0x1d8>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	f040 8188 	bne.w	8001ab2 <ModBusParse+0x32e>
    {
      return;
    }
    // check CRC
    if(CRC16_IN()==0)
 80017a2:	f000 fa13 	bl	8001bcc <CRC16_IN>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f040 8179 	bne.w	8001aa0 <ModBusParse+0x31c>
    {
      mb_buf_out_count = 0;
 80017ae:	4b6c      	ldr	r3, [pc, #432]	; (8001960 <ModBusParse+0x1dc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
      uint16_t st,nu;
      uint8_t func = mb_buf_in[1];
 80017b4:	4b68      	ldr	r3, [pc, #416]	; (8001958 <ModBusParse+0x1d4>)
 80017b6:	785b      	ldrb	r3, [r3, #1]
 80017b8:	71fb      	strb	r3, [r7, #7]
      uint8_t i;
      switch(func)
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d003      	beq.n	80017c8 <ModBusParse+0x44>
 80017c0:	2b10      	cmp	r3, #16
 80017c2:	f000 8089 	beq.w	80018d8 <ModBusParse+0x154>
 80017c6:	e131      	b.n	8001a2c <ModBusParse+0x2a8>
      {
        case 3:
          // read holding registers. by bytes addr func starth startl totalh totall
          st=mb_buf_in[2]*256+mb_buf_in[3];
 80017c8:	4b63      	ldr	r3, [pc, #396]	; (8001958 <ModBusParse+0x1d4>)
 80017ca:	789b      	ldrb	r3, [r3, #2]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b61      	ldr	r3, [pc, #388]	; (8001958 <ModBusParse+0x1d4>)
 80017d4:	78db      	ldrb	r3, [r3, #3]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	4413      	add	r3, r2
 80017da:	80bb      	strh	r3, [r7, #4]
          nu=mb_buf_in[4]*256+mb_buf_in[5];
 80017dc:	4b5e      	ldr	r3, [pc, #376]	; (8001958 <ModBusParse+0x1d4>)
 80017de:	791b      	ldrb	r3, [r3, #4]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	4b5c      	ldr	r3, [pc, #368]	; (8001958 <ModBusParse+0x1d4>)
 80017e8:	795b      	ldrb	r3, [r3, #5]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	807b      	strh	r3, [r7, #2]
          if( (st+nu) > ModBusRegisters) // dont ask more, that we has!
 80017f0:	88ba      	ldrh	r2, [r7, #4]
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	4413      	add	r3, r2
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	dd21      	ble.n	800183e <ModBusParse+0xba>
            {
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 80017fa:	4b59      	ldr	r3, [pc, #356]	; (8001960 <ModBusParse+0x1dc>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	b2d1      	uxtb	r1, r2
 8001802:	4a57      	ldr	r2, [pc, #348]	; (8001960 <ModBusParse+0x1dc>)
 8001804:	7011      	strb	r1, [r2, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	4b54      	ldr	r3, [pc, #336]	; (800195c <ModBusParse+0x1d8>)
 800180a:	7819      	ldrb	r1, [r3, #0]
 800180c:	4b55      	ldr	r3, [pc, #340]	; (8001964 <ModBusParse+0x1e0>)
 800180e:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func+0x80;
 8001810:	4b53      	ldr	r3, [pc, #332]	; (8001960 <ModBusParse+0x1dc>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	b2d1      	uxtb	r1, r2
 8001818:	4a51      	ldr	r2, [pc, #324]	; (8001960 <ModBusParse+0x1dc>)
 800181a:	7011      	strb	r1, [r2, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	3b80      	subs	r3, #128	; 0x80
 8001822:	b2d9      	uxtb	r1, r3
 8001824:	4b4f      	ldr	r3, [pc, #316]	; (8001964 <ModBusParse+0x1e0>)
 8001826:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=2;
 8001828:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <ModBusParse+0x1dc>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	b2d1      	uxtb	r1, r2
 8001830:	4a4b      	ldr	r2, [pc, #300]	; (8001960 <ModBusParse+0x1dc>)
 8001832:	7011      	strb	r1, [r2, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b4b      	ldr	r3, [pc, #300]	; (8001964 <ModBusParse+0x1e0>)
 8001838:	2102      	movs	r1, #2
 800183a:	5499      	strb	r1, [r3, r2]
                {
                  mb_buf_out[mb_buf_out_count++]=( mb_reg[i] >> 8 ) & 0xFF; // hi part
                  mb_buf_out[mb_buf_out_count++]=mb_reg[i] & 0xFF; // lo part
                }
            }
          break;
 800183c:	e118      	b.n	8001a70 <ModBusParse+0x2ec>
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 800183e:	4b48      	ldr	r3, [pc, #288]	; (8001960 <ModBusParse+0x1dc>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	b2d1      	uxtb	r1, r2
 8001846:	4a46      	ldr	r2, [pc, #280]	; (8001960 <ModBusParse+0x1dc>)
 8001848:	7011      	strb	r1, [r2, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	4b43      	ldr	r3, [pc, #268]	; (800195c <ModBusParse+0x1d8>)
 800184e:	7819      	ldrb	r1, [r3, #0]
 8001850:	4b44      	ldr	r3, [pc, #272]	; (8001964 <ModBusParse+0x1e0>)
 8001852:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func;
 8001854:	4b42      	ldr	r3, [pc, #264]	; (8001960 <ModBusParse+0x1dc>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	b2d1      	uxtb	r1, r2
 800185c:	4a40      	ldr	r2, [pc, #256]	; (8001960 <ModBusParse+0x1dc>)
 800185e:	7011      	strb	r1, [r2, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	4a40      	ldr	r2, [pc, #256]	; (8001964 <ModBusParse+0x1e0>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	5453      	strb	r3, [r2, r1]
              mb_buf_out[mb_buf_out_count++]=nu*2; // how many bytes we will send?
 8001868:	887b      	ldrh	r3, [r7, #2]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b3c      	ldr	r3, [pc, #240]	; (8001960 <ModBusParse+0x1dc>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	1c59      	adds	r1, r3, #1
 8001872:	b2c8      	uxtb	r0, r1
 8001874:	493a      	ldr	r1, [pc, #232]	; (8001960 <ModBusParse+0x1dc>)
 8001876:	7008      	strb	r0, [r1, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	0053      	lsls	r3, r2, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b39      	ldr	r3, [pc, #228]	; (8001964 <ModBusParse+0x1e0>)
 8001880:	545a      	strb	r2, [r3, r1]
              for(i=st;i<(st+nu);i++)
 8001882:	88bb      	ldrh	r3, [r7, #4]
 8001884:	73fb      	strb	r3, [r7, #15]
 8001886:	e020      	b.n	80018ca <ModBusParse+0x146>
                  mb_buf_out[mb_buf_out_count++]=( mb_reg[i] >> 8 ) & 0xFF; // hi part
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	4a37      	ldr	r2, [pc, #220]	; (8001968 <ModBusParse+0x1e4>)
 800188c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	b299      	uxth	r1, r3
 8001894:	4b32      	ldr	r3, [pc, #200]	; (8001960 <ModBusParse+0x1dc>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	b2d0      	uxtb	r0, r2
 800189c:	4a30      	ldr	r2, [pc, #192]	; (8001960 <ModBusParse+0x1dc>)
 800189e:	7010      	strb	r0, [r2, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	b2c9      	uxtb	r1, r1
 80018a4:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <ModBusParse+0x1e0>)
 80018a6:	5499      	strb	r1, [r3, r2]
                  mb_buf_out[mb_buf_out_count++]=mb_reg[i] & 0xFF; // lo part
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	4a2f      	ldr	r2, [pc, #188]	; (8001968 <ModBusParse+0x1e4>)
 80018ac:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <ModBusParse+0x1dc>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	b2d0      	uxtb	r0, r2
 80018b8:	4a29      	ldr	r2, [pc, #164]	; (8001960 <ModBusParse+0x1dc>)
 80018ba:	7010      	strb	r0, [r2, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	b2c9      	uxtb	r1, r1
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <ModBusParse+0x1e0>)
 80018c2:	5499      	strb	r1, [r3, r2]
              for(i=st;i<(st+nu);i++)
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	3301      	adds	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	88b9      	ldrh	r1, [r7, #4]
 80018ce:	887b      	ldrh	r3, [r7, #2]
 80018d0:	440b      	add	r3, r1
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dbd8      	blt.n	8001888 <ModBusParse+0x104>
          break;
 80018d6:	e0cb      	b.n	8001a70 <ModBusParse+0x2ec>
        case 16: 
          // write holding registers. by bytes addr func starth startl totalh totall num_bytes regh regl ...
          st=mb_buf_in[2]*256+mb_buf_in[3];
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <ModBusParse+0x1d4>)
 80018da:	789b      	ldrb	r3, [r3, #2]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <ModBusParse+0x1d4>)
 80018e4:	78db      	ldrb	r3, [r3, #3]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	80bb      	strh	r3, [r7, #4]
          nu=mb_buf_in[4]*256+mb_buf_in[5];
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <ModBusParse+0x1d4>)
 80018ee:	791b      	ldrb	r3, [r3, #4]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <ModBusParse+0x1d4>)
 80018f8:	795b      	ldrb	r3, [r3, #5]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	807b      	strh	r3, [r7, #2]
          if( (st+nu) > ModBusRegisters) // dont ask more, that we has!
 8001900:	88ba      	ldrh	r2, [r7, #4]
 8001902:	887b      	ldrh	r3, [r7, #2]
 8001904:	4413      	add	r3, r2
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	dd21      	ble.n	800194e <ModBusParse+0x1ca>
            {
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <ModBusParse+0x1dc>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	b2d1      	uxtb	r1, r2
 8001912:	4a13      	ldr	r2, [pc, #76]	; (8001960 <ModBusParse+0x1dc>)
 8001914:	7011      	strb	r1, [r2, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	4b10      	ldr	r3, [pc, #64]	; (800195c <ModBusParse+0x1d8>)
 800191a:	7819      	ldrb	r1, [r3, #0]
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <ModBusParse+0x1e0>)
 800191e:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func+0x80;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <ModBusParse+0x1dc>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	b2d1      	uxtb	r1, r2
 8001928:	4a0d      	ldr	r2, [pc, #52]	; (8001960 <ModBusParse+0x1dc>)
 800192a:	7011      	strb	r1, [r2, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	3b80      	subs	r3, #128	; 0x80
 8001932:	b2d9      	uxtb	r1, r3
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <ModBusParse+0x1e0>)
 8001936:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=2;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <ModBusParse+0x1dc>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	b2d1      	uxtb	r1, r2
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <ModBusParse+0x1dc>)
 8001942:	7011      	strb	r1, [r2, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <ModBusParse+0x1e0>)
 8001948:	2102      	movs	r1, #2
 800194a:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[2]; // how many registers ask, so many wrote
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[3];
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[4];
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[5];
            }
          break;
 800194c:	e090      	b.n	8001a70 <ModBusParse+0x2ec>
              for(i=0;i<nu;i++)
 800194e:	2300      	movs	r3, #0
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	e024      	b.n	800199e <ModBusParse+0x21a>
 8001954:	2000438c 	.word	0x2000438c
 8001958:	20004390 	.word	0x20004390
 800195c:	20004384 	.word	0x20004384
 8001960:	2000438d 	.word	0x2000438d
 8001964:	20004280 	.word	0x20004280
 8001968:	200041b8 	.word	0x200041b8
                  mb_reg[st+i]=mb_buf_in[7+i*2]*256+mb_buf_in[8+i*2];
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	3307      	adds	r3, #7
 8001972:	4a52      	ldr	r2, [pc, #328]	; (8001abc <ModBusParse+0x338>)
 8001974:	5cd3      	ldrb	r3, [r2, r3]
 8001976:	b29b      	uxth	r3, r3
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	b299      	uxth	r1, r3
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	3304      	adds	r3, #4
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4a4e      	ldr	r2, [pc, #312]	; (8001abc <ModBusParse+0x338>)
 8001984:	5cd3      	ldrb	r3, [r2, r3]
 8001986:	b29a      	uxth	r2, r3
 8001988:	88b8      	ldrh	r0, [r7, #4]
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	4403      	add	r3, r0
 800198e:	440a      	add	r2, r1
 8001990:	b291      	uxth	r1, r2
 8001992:	4a4b      	ldr	r2, [pc, #300]	; (8001ac0 <ModBusParse+0x33c>)
 8001994:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
              for(i=0;i<nu;i++)
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	3301      	adds	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d8e1      	bhi.n	800196c <ModBusParse+0x1e8>
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 80019a8:	4b46      	ldr	r3, [pc, #280]	; (8001ac4 <ModBusParse+0x340>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	b2d1      	uxtb	r1, r2
 80019b0:	4a44      	ldr	r2, [pc, #272]	; (8001ac4 <ModBusParse+0x340>)
 80019b2:	7011      	strb	r1, [r2, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b44      	ldr	r3, [pc, #272]	; (8001ac8 <ModBusParse+0x344>)
 80019b8:	7819      	ldrb	r1, [r3, #0]
 80019ba:	4b44      	ldr	r3, [pc, #272]	; (8001acc <ModBusParse+0x348>)
 80019bc:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func;
 80019be:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <ModBusParse+0x340>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	b2d1      	uxtb	r1, r2
 80019c6:	4a3f      	ldr	r2, [pc, #252]	; (8001ac4 <ModBusParse+0x340>)
 80019c8:	7011      	strb	r1, [r2, #0]
 80019ca:	4619      	mov	r1, r3
 80019cc:	4a3f      	ldr	r2, [pc, #252]	; (8001acc <ModBusParse+0x348>)
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	5453      	strb	r3, [r2, r1]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[2]; // how many registers ask, so many wrote
 80019d2:	4b3c      	ldr	r3, [pc, #240]	; (8001ac4 <ModBusParse+0x340>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	b2d1      	uxtb	r1, r2
 80019da:	4a3a      	ldr	r2, [pc, #232]	; (8001ac4 <ModBusParse+0x340>)
 80019dc:	7011      	strb	r1, [r2, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	4b36      	ldr	r3, [pc, #216]	; (8001abc <ModBusParse+0x338>)
 80019e2:	7899      	ldrb	r1, [r3, #2]
 80019e4:	4b39      	ldr	r3, [pc, #228]	; (8001acc <ModBusParse+0x348>)
 80019e6:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[3];
 80019e8:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <ModBusParse+0x340>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	b2d1      	uxtb	r1, r2
 80019f0:	4a34      	ldr	r2, [pc, #208]	; (8001ac4 <ModBusParse+0x340>)
 80019f2:	7011      	strb	r1, [r2, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b31      	ldr	r3, [pc, #196]	; (8001abc <ModBusParse+0x338>)
 80019f8:	78d9      	ldrb	r1, [r3, #3]
 80019fa:	4b34      	ldr	r3, [pc, #208]	; (8001acc <ModBusParse+0x348>)
 80019fc:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[4];
 80019fe:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <ModBusParse+0x340>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	b2d1      	uxtb	r1, r2
 8001a06:	4a2f      	ldr	r2, [pc, #188]	; (8001ac4 <ModBusParse+0x340>)
 8001a08:	7011      	strb	r1, [r2, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <ModBusParse+0x338>)
 8001a0e:	7919      	ldrb	r1, [r3, #4]
 8001a10:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <ModBusParse+0x348>)
 8001a12:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[5];
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <ModBusParse+0x340>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	b2d1      	uxtb	r1, r2
 8001a1c:	4a29      	ldr	r2, [pc, #164]	; (8001ac4 <ModBusParse+0x340>)
 8001a1e:	7011      	strb	r1, [r2, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <ModBusParse+0x338>)
 8001a24:	7959      	ldrb	r1, [r3, #5]
 8001a26:	4b29      	ldr	r3, [pc, #164]	; (8001acc <ModBusParse+0x348>)
 8001a28:	5499      	strb	r1, [r3, r2]
          break;
 8001a2a:	e021      	b.n	8001a70 <ModBusParse+0x2ec>
        default:  
          // Exception as we does not provide this function
          mb_buf_out[mb_buf_out_count++]=mb_addr;
 8001a2c:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <ModBusParse+0x340>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	b2d1      	uxtb	r1, r2
 8001a34:	4a23      	ldr	r2, [pc, #140]	; (8001ac4 <ModBusParse+0x340>)
 8001a36:	7011      	strb	r1, [r2, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <ModBusParse+0x344>)
 8001a3c:	7819      	ldrb	r1, [r3, #0]
 8001a3e:	4b23      	ldr	r3, [pc, #140]	; (8001acc <ModBusParse+0x348>)
 8001a40:	5499      	strb	r1, [r3, r2]
          mb_buf_out[mb_buf_out_count++]=func+0x80;
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <ModBusParse+0x340>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	b2d1      	uxtb	r1, r2
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <ModBusParse+0x340>)
 8001a4c:	7011      	strb	r1, [r2, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	3b80      	subs	r3, #128	; 0x80
 8001a54:	b2d9      	uxtb	r1, r3
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <ModBusParse+0x348>)
 8001a58:	5499      	strb	r1, [r3, r2]
          mb_buf_out[mb_buf_out_count++]=1;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <ModBusParse+0x340>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	b2d1      	uxtb	r1, r2
 8001a62:	4a18      	ldr	r2, [pc, #96]	; (8001ac4 <ModBusParse+0x340>)
 8001a64:	7011      	strb	r1, [r2, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <ModBusParse+0x348>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	5499      	strb	r1, [r3, r2]
          break;
 8001a6e:	bf00      	nop
      }
      
      CRC16_OUT();
 8001a70:	f000 f84a 	bl	8001b08 <CRC16_OUT>
      
     // If you want directly to USB-CDC 
     //CDC_Transmit_FS(&mb_buf_out[0], mb_buf_out_count);
     for(int i=0;i<mb_buf_out_count;i++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	e00c      	b.n	8001a94 <ModBusParse+0x310>
        {
          osMessagePut(ModBusOutHandle,mb_buf_out[i],0);
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <ModBusParse+0x34c>)
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	4a13      	ldr	r2, [pc, #76]	; (8001acc <ModBusParse+0x348>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2200      	movs	r2, #0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f003 fa8b 	bl	8004fa4 <osMessagePut>
     for(int i=0;i<mb_buf_out_count;i++)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3301      	adds	r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <ModBusParse+0x340>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	dbec      	blt.n	8001a7a <ModBusParse+0x2f6>
        }
    }
    // Ok, we parsed buffer, clean up
    mb_buf_in_count=0;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <ModBusParse+0x350>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
    mb_buf_out_count=0;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <ModBusParse+0x340>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	e002      	b.n	8001ab4 <ModBusParse+0x330>
      return;
 8001aae:	bf00      	nop
 8001ab0:	e000      	b.n	8001ab4 <ModBusParse+0x330>
      return;
 8001ab2:	bf00      	nop
}
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20004390 	.word	0x20004390
 8001ac0:	200041b8 	.word	0x200041b8
 8001ac4:	2000438d 	.word	0x2000438d
 8001ac8:	20004384 	.word	0x20004384
 8001acc:	20004280 	.word	0x20004280
 8001ad0:	20004380 	.word	0x20004380
 8001ad4:	2000438c 	.word	0x2000438c

08001ad8 <ModBus_SetRegister>:

// set value of register
void ModBus_SetRegister(uint8_t reg,uint16_t value)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	71fb      	strb	r3, [r7, #7]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	80bb      	strh	r3, [r7, #4]
  if(reg<ModBusRegisters)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	2b63      	cmp	r3, #99	; 0x63
 8001aec:	d804      	bhi.n	8001af8 <ModBus_SetRegister+0x20>
  {
    mb_reg[reg]=value;
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	4904      	ldr	r1, [pc, #16]	; (8001b04 <ModBus_SetRegister+0x2c>)
 8001af2:	88ba      	ldrh	r2, [r7, #4]
 8001af4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  }
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	200041b8 	.word	0x200041b8

08001b08 <CRC16_OUT>:


// Calculate CRC for outcoming buffer
// and place it to end.
void CRC16_OUT(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
  uint16_t crc = 0xFFFF;
 8001b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b12:	80fb      	strh	r3, [r7, #6]
  uint16_t pos = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	80bb      	strh	r3, [r7, #4]
  uint8_t i =0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	70fb      	strb	r3, [r7, #3]
  uint8_t lo =0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	70bb      	strb	r3, [r7, #2]
  uint8_t hi =0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	707b      	strb	r3, [r7, #1]
  
  for (pos = 0; pos < mb_buf_out_count; pos++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	80bb      	strh	r3, [r7, #4]
 8001b28:	e025      	b.n	8001b76 <CRC16_OUT+0x6e>
  {
    crc ^= mb_buf_out[pos];
 8001b2a:	88bb      	ldrh	r3, [r7, #4]
 8001b2c:	4a25      	ldr	r2, [pc, #148]	; (8001bc4 <CRC16_OUT+0xbc>)
 8001b2e:	5cd3      	ldrb	r3, [r2, r3]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	4053      	eors	r3, r2
 8001b36:	80fb      	strh	r3, [r7, #6]

  for (i = 8; i != 0; i--)
 8001b38:	2308      	movs	r3, #8
 8001b3a:	70fb      	strb	r3, [r7, #3]
 8001b3c:	e015      	b.n	8001b6a <CRC16_OUT+0x62>
    {
    if ((crc & 0x0001) != 0)
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00a      	beq.n	8001b5e <CRC16_OUT+0x56>
      {
      crc >>= 1;
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	085b      	lsrs	r3, r3, #1
 8001b4c:	80fb      	strh	r3, [r7, #6]
      crc ^= 0xA001;
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001b54:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	80fb      	strh	r3, [r7, #6]
 8001b5c:	e002      	b.n	8001b64 <CRC16_OUT+0x5c>
      }
    else
      crc >>= 1;
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	80fb      	strh	r3, [r7, #6]
  for (i = 8; i != 0; i--)
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	70fb      	strb	r3, [r7, #3]
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1e6      	bne.n	8001b3e <CRC16_OUT+0x36>
  for (pos = 0; pos < mb_buf_out_count; pos++)
 8001b70:	88bb      	ldrh	r3, [r7, #4]
 8001b72:	3301      	adds	r3, #1
 8001b74:	80bb      	strh	r3, [r7, #4]
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <CRC16_OUT+0xc0>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	88ba      	ldrh	r2, [r7, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d3d3      	bcc.n	8001b2a <CRC16_OUT+0x22>
    }
  }
  lo = crc & 0xFF;
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	70bb      	strb	r3, [r7, #2]
  hi = ( crc >> 8 ) & 0xFF;
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	707b      	strb	r3, [r7, #1]
  
  mb_buf_out[mb_buf_out_count++] = lo;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <CRC16_OUT+0xc0>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	b2d1      	uxtb	r1, r2
 8001b96:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <CRC16_OUT+0xc0>)
 8001b98:	7011      	strb	r1, [r2, #0]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <CRC16_OUT+0xbc>)
 8001b9e:	78bb      	ldrb	r3, [r7, #2]
 8001ba0:	5453      	strb	r3, [r2, r1]
  mb_buf_out[mb_buf_out_count++] = hi;
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <CRC16_OUT+0xc0>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	b2d1      	uxtb	r1, r2
 8001baa:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <CRC16_OUT+0xc0>)
 8001bac:	7011      	strb	r1, [r2, #0]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <CRC16_OUT+0xbc>)
 8001bb2:	787b      	ldrb	r3, [r7, #1]
 8001bb4:	5453      	strb	r3, [r2, r1]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20004280 	.word	0x20004280
 8001bc8:	2000438d 	.word	0x2000438d

08001bcc <CRC16_IN>:

// Calculate CRC fro incoming buffer
// Return 0 - if CRC is correct, overwise return 0 
uint8_t CRC16_IN(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
  uint16_t crc = 0xFFFF;
 8001bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd6:	80fb      	strh	r3, [r7, #6]
  uint16_t pos = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	80bb      	strh	r3, [r7, #4]
  uint8_t i =0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	70fb      	strb	r3, [r7, #3]
  uint8_t lo =0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	70bb      	strb	r3, [r7, #2]
  uint8_t hi =0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	707b      	strb	r3, [r7, #1]
  
  for (pos = 0; pos < mb_buf_in_count-2; pos++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	80bb      	strh	r3, [r7, #4]
 8001bec:	e025      	b.n	8001c3a <CRC16_IN+0x6e>
  {
    crc ^= mb_buf_in[pos];
 8001bee:	88bb      	ldrh	r3, [r7, #4]
 8001bf0:	4a24      	ldr	r2, [pc, #144]	; (8001c84 <CRC16_IN+0xb8>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	4053      	eors	r3, r2
 8001bfa:	80fb      	strh	r3, [r7, #6]

  for (i = 8; i != 0; i--)
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	70fb      	strb	r3, [r7, #3]
 8001c00:	e015      	b.n	8001c2e <CRC16_IN+0x62>
    {
    if ((crc & 0x0001) != 0)
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00a      	beq.n	8001c22 <CRC16_IN+0x56>
      {
      crc >>= 1;
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	085b      	lsrs	r3, r3, #1
 8001c10:	80fb      	strh	r3, [r7, #6]
      crc ^= 0xA001;
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001c18:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	80fb      	strh	r3, [r7, #6]
 8001c20:	e002      	b.n	8001c28 <CRC16_IN+0x5c>
      }
    else
      crc >>= 1;
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	085b      	lsrs	r3, r3, #1
 8001c26:	80fb      	strh	r3, [r7, #6]
  for (i = 8; i != 0; i--)
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	70fb      	strb	r3, [r7, #3]
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e6      	bne.n	8001c02 <CRC16_IN+0x36>
  for (pos = 0; pos < mb_buf_in_count-2; pos++)
 8001c34:	88bb      	ldrh	r3, [r7, #4]
 8001c36:	3301      	adds	r3, #1
 8001c38:	80bb      	strh	r3, [r7, #4]
 8001c3a:	88ba      	ldrh	r2, [r7, #4]
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <CRC16_IN+0xbc>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	3b02      	subs	r3, #2
 8001c42:	429a      	cmp	r2, r3
 8001c44:	dbd3      	blt.n	8001bee <CRC16_IN+0x22>
    }
  }
  lo = crc & 0xFF;
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	70bb      	strb	r3, [r7, #2]
  hi = ( crc >> 8 ) & 0xFF;
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	707b      	strb	r3, [r7, #1]
  if( (mb_buf_in[mb_buf_in_count-2] == lo) && 
 8001c52:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <CRC16_IN+0xbc>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	3b02      	subs	r3, #2
 8001c58:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <CRC16_IN+0xb8>)
 8001c5a:	5cd3      	ldrb	r3, [r2, r3]
 8001c5c:	78ba      	ldrb	r2, [r7, #2]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d109      	bne.n	8001c76 <CRC16_IN+0xaa>
       (mb_buf_in[mb_buf_in_count-1] == hi) )
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <CRC16_IN+0xbc>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <CRC16_IN+0xb8>)
 8001c6a:	5cd3      	ldrb	r3, [r2, r3]
  if( (mb_buf_in[mb_buf_in_count-2] == lo) && 
 8001c6c:	787a      	ldrb	r2, [r7, #1]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d101      	bne.n	8001c76 <CRC16_IN+0xaa>
    {
      return 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <CRC16_IN+0xac>
    }
  return 1;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	20004390 	.word	0x20004390
 8001c88:	2000438c 	.word	0x2000438c

08001c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_MspInit+0x54>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a11      	ldr	r2, [pc, #68]	; (8001ce0 <HAL_MspInit+0x54>)
 8001c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_MspInit+0x54>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_MspInit+0x54>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_MspInit+0x54>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_MspInit+0x54>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	210f      	movs	r1, #15
 8001cce:	f06f 0001 	mvn.w	r0, #1
 8001cd2:	f000 fefe 	bl	8002ad2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800

08001ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	; 0x30
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a48      	ldr	r2, [pc, #288]	; (8001e24 <HAL_ADC_MspInit+0x140>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	f040 808a 	bne.w	8001e1c <HAL_ADC_MspInit+0x138>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	4b46      	ldr	r3, [pc, #280]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d10:	4a45      	ldr	r2, [pc, #276]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d16:	6453      	str	r3, [r2, #68]	; 0x44
 8001d18:	4b43      	ldr	r3, [pc, #268]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	4b3f      	ldr	r3, [pc, #252]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	4a3e      	ldr	r2, [pc, #248]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	6313      	str	r3, [r2, #48]	; 0x30
 8001d34:	4b3c      	ldr	r3, [pc, #240]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4a37      	ldr	r2, [pc, #220]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d50:	4b35      	ldr	r3, [pc, #212]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	4a30      	ldr	r2, [pc, #192]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001d66:	f043 0302 	orr.w	r3, r3, #2
 8001d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = Channel11_Pin|Channel12_Pin|Channel13_Pin|Channel14_Pin 
 8001d78:	233f      	movs	r3, #63	; 0x3f
 8001d7a:	61fb      	str	r3, [r7, #28]
                          |Channel15_Pin|Channel16_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d84:	f107 031c 	add.w	r3, r7, #28
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4828      	ldr	r0, [pc, #160]	; (8001e2c <HAL_ADC_MspInit+0x148>)
 8001d8c:	f001 fa68 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel1_Pin|Channel2_Pin|Channel3_Pin|Channel4_Pin 
 8001d90:	23ff      	movs	r3, #255	; 0xff
 8001d92:	61fb      	str	r3, [r7, #28]
                          |Channel5_Pin|Channel6_Pin|Channel7_Pin|Channel8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d94:	2303      	movs	r3, #3
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4619      	mov	r1, r3
 8001da2:	4823      	ldr	r0, [pc, #140]	; (8001e30 <HAL_ADC_MspInit+0x14c>)
 8001da4:	f001 fa5c 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel9_Pin|Channel10_Pin;
 8001da8:	2303      	movs	r3, #3
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dac:	2303      	movs	r3, #3
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db4:	f107 031c 	add.w	r3, r7, #28
 8001db8:	4619      	mov	r1, r3
 8001dba:	481e      	ldr	r0, [pc, #120]	; (8001e34 <HAL_ADC_MspInit+0x150>)
 8001dbc:	f001 fa50 	bl	8003260 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_ADC_MspInit+0x154>)
 8001dc2:	4a1e      	ldr	r2, [pc, #120]	; (8001e3c <HAL_ADC_MspInit+0x158>)
 8001dc4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <HAL_ADC_MspInit+0x154>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <HAL_ADC_MspInit+0x154>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd2:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <HAL_ADC_MspInit+0x154>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dd8:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <HAL_ADC_MspInit+0x154>)
 8001dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dde:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_ADC_MspInit+0x154>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <HAL_ADC_MspInit+0x154>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_ADC_MspInit+0x154>)
 8001dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001df2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_ADC_MspInit+0x154>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <HAL_ADC_MspInit+0x154>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <HAL_ADC_MspInit+0x154>)
 8001e02:	f000 fe9d 	bl	8002b40 <HAL_DMA_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8001e0c:	f7ff fc0a 	bl	8001624 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <HAL_ADC_MspInit+0x154>)
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38
 8001e16:	4a08      	ldr	r2, [pc, #32]	; (8001e38 <HAL_ADC_MspInit+0x154>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3730      	adds	r7, #48	; 0x30
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40012000 	.word	0x40012000
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020800 	.word	0x40020800
 8001e30:	40020000 	.word	0x40020000
 8001e34:	40020400 	.word	0x40020400
 8001e38:	200040fc 	.word	0x200040fc
 8001e3c:	40026410 	.word	0x40026410

08001e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a34      	ldr	r2, [pc, #208]	; (8001f30 <HAL_UART_MspInit+0xf0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d162      	bne.n	8001f28 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <HAL_UART_MspInit+0xf4>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	4a32      	ldr	r2, [pc, #200]	; (8001f34 <HAL_UART_MspInit+0xf4>)
 8001e6c:	f043 0320 	orr.w	r3, r3, #32
 8001e70:	6453      	str	r3, [r2, #68]	; 0x44
 8001e72:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <HAL_UART_MspInit+0xf4>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <HAL_UART_MspInit+0xf4>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a2b      	ldr	r2, [pc, #172]	; (8001f34 <HAL_UART_MspInit+0xf4>)
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <HAL_UART_MspInit+0xf4>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e9a:	23c0      	movs	r3, #192	; 0xc0
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001eaa:	2308      	movs	r3, #8
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4820      	ldr	r0, [pc, #128]	; (8001f38 <HAL_UART_MspInit+0xf8>)
 8001eb6:	f001 f9d3 	bl	8003260 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001ebc:	4a20      	ldr	r2, [pc, #128]	; (8001f40 <HAL_UART_MspInit+0x100>)
 8001ebe:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001ec2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001ec6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ece:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001ed6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eda:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eee:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001efc:	480f      	ldr	r0, [pc, #60]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001efe:	f000 fe1f 	bl	8002b40 <HAL_DMA_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001f08:	f7ff fb8c 	bl	8001624 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001f10:	635a      	str	r2, [r3, #52]	; 0x34
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2105      	movs	r1, #5
 8001f1c:	2047      	movs	r0, #71	; 0x47
 8001f1e:	f000 fdd8 	bl	8002ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f22:	2047      	movs	r0, #71	; 0x47
 8001f24:	f000 fdf1 	bl	8002b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001f28:	bf00      	nop
 8001f2a:	3728      	adds	r7, #40	; 0x28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40011400 	.word	0x40011400
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020800 	.word	0x40020800
 8001f3c:	2000403c 	.word	0x2000403c
 8001f40:	40026428 	.word	0x40026428

08001f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f56:	e7fe      	b.n	8001f56 <HardFault_Handler+0x4>

08001f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <MemManage_Handler+0x4>

08001f5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <BusFault_Handler+0x4>

08001f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <UsageFault_Handler+0x4>

08001f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f7c:	f000 f8ba 	bl	80020f4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f80:	f004 fc2c 	bl	80067dc <xTaskGetSchedulerState>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d001      	beq.n	8001f8e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f8a:	f004 fee5 	bl	8006d58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <DMA2_Stream0_IRQHandler+0x10>)
 8001f9a:	f000 fef9 	bl	8002d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200040fc 	.word	0x200040fc

08001fa8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <DMA2_Stream1_IRQHandler+0x10>)
 8001fae:	f000 feef 	bl	8002d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	2000403c 	.word	0x2000403c

08001fbc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <USART6_IRQHandler+0x10>)
 8001fc2:	f002 f8a1 	bl	8004108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20004164 	.word	0x20004164

08001fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <SystemInit+0x28>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <SystemInit+0x28>)
 8001fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <SystemInit+0x28>)
 8001fe6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fea:	609a      	str	r2, [r3, #8]
#endif
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002034 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002000:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002002:	e003      	b.n	800200c <LoopCopyDataInit>

08002004 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002006:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002008:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800200a:	3104      	adds	r1, #4

0800200c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800200c:	480b      	ldr	r0, [pc, #44]	; (800203c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002010:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002012:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002014:	d3f6      	bcc.n	8002004 <CopyDataInit>
  ldr  r2, =_sbss
 8002016:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002018:	e002      	b.n	8002020 <LoopFillZerobss>

0800201a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800201a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800201c:	f842 3b04 	str.w	r3, [r2], #4

08002020 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002022:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002024:	d3f9      	bcc.n	800201a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002026:	f7ff ffd3 	bl	8001fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800202a:	f005 f8fd 	bl	8007228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800202e:	f7fe ff53 	bl	8000ed8 <main>
  bx  lr    
 8002032:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002034:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002038:	08008470 	.word	0x08008470
  ldr  r0, =_sdata
 800203c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002040:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002044:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002048:	20004494 	.word	0x20004494

0800204c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800204c:	e7fe      	b.n	800204c <ADC_IRQHandler>
	...

08002050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_Init+0x40>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0d      	ldr	r2, [pc, #52]	; (8002090 <HAL_Init+0x40>)
 800205a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800205e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_Init+0x40>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <HAL_Init+0x40>)
 8002066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800206a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a07      	ldr	r2, [pc, #28]	; (8002090 <HAL_Init+0x40>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002078:	2003      	movs	r0, #3
 800207a:	f000 fd1f 	bl	8002abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800207e:	200f      	movs	r0, #15
 8002080:	f000 f808 	bl	8002094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002084:	f7ff fe02 	bl	8001c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40023c00 	.word	0x40023c00

08002094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_InitTick+0x54>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_InitTick+0x58>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fd37 	bl	8002b26 <HAL_SYSTICK_Config>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e00e      	b.n	80020e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b0f      	cmp	r3, #15
 80020c6:	d80a      	bhi.n	80020de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c8:	2200      	movs	r2, #0
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f000 fcff 	bl	8002ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d4:	4a06      	ldr	r2, [pc, #24]	; (80020f0 <HAL_InitTick+0x5c>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e000      	b.n	80020e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000000 	.word	0x20000000
 80020ec:	20000008 	.word	0x20000008
 80020f0:	20000004 	.word	0x20000004

080020f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_IncTick+0x20>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_IncTick+0x24>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4413      	add	r3, r2
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <HAL_IncTick+0x24>)
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000008 	.word	0x20000008
 8002118:	20004490 	.word	0x20004490

0800211c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_GetTick+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20004490 	.word	0x20004490

08002134 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e033      	b.n	80021b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff fdc6 	bl	8001ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2b00      	cmp	r3, #0
 8002170:	d118      	bne.n	80021a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800217a:	f023 0302 	bic.w	r3, r3, #2
 800217e:	f043 0202 	orr.w	r2, r3, #2
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fa4a 	bl	8002620 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f023 0303 	bic.w	r3, r3, #3
 800219a:	f043 0201 	orr.w	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40
 80021a2:	e001      	b.n	80021a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_ADC_Start_DMA+0x1e>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e0cc      	b.n	8002374 <HAL_ADC_Start_DMA+0x1b8>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d018      	beq.n	8002222 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002200:	4b5e      	ldr	r3, [pc, #376]	; (800237c <HAL_ADC_Start_DMA+0x1c0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a5e      	ldr	r2, [pc, #376]	; (8002380 <HAL_ADC_Start_DMA+0x1c4>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	0c9a      	lsrs	r2, r3, #18
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002214:	e002      	b.n	800221c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	3b01      	subs	r3, #1
 800221a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f9      	bne.n	8002216 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b01      	cmp	r3, #1
 800222e:	f040 80a0 	bne.w	8002372 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800223a:	f023 0301 	bic.w	r3, r3, #1
 800223e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800225c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002270:	d106      	bne.n	8002280 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f023 0206 	bic.w	r2, r3, #6
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	645a      	str	r2, [r3, #68]	; 0x44
 800227e:	e002      	b.n	8002286 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800228e:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_ADC_Start_DMA+0x1c8>)
 8002290:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	4a3c      	ldr	r2, [pc, #240]	; (8002388 <HAL_ADC_Start_DMA+0x1cc>)
 8002298:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229e:	4a3b      	ldr	r2, [pc, #236]	; (800238c <HAL_ADC_Start_DMA+0x1d0>)
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <HAL_ADC_Start_DMA+0x1d4>)
 80022a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80022c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	334c      	adds	r3, #76	; 0x4c
 80022de:	4619      	mov	r1, r3
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f000 fcda 	bl	8002c9c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d12a      	bne.n	800234a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a26      	ldr	r2, [pc, #152]	; (8002394 <HAL_ADC_Start_DMA+0x1d8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d015      	beq.n	800232a <HAL_ADC_Start_DMA+0x16e>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a25      	ldr	r2, [pc, #148]	; (8002398 <HAL_ADC_Start_DMA+0x1dc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d105      	bne.n	8002314 <HAL_ADC_Start_DMA+0x158>
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_ADC_Start_DMA+0x1c8>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a20      	ldr	r2, [pc, #128]	; (800239c <HAL_ADC_Start_DMA+0x1e0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d129      	bne.n	8002372 <HAL_ADC_Start_DMA+0x1b6>
 800231e:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_ADC_Start_DMA+0x1c8>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	2b0f      	cmp	r3, #15
 8002328:	d823      	bhi.n	8002372 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d11c      	bne.n	8002372 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	e013      	b.n	8002372 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a11      	ldr	r2, [pc, #68]	; (8002394 <HAL_ADC_Start_DMA+0x1d8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d10e      	bne.n	8002372 <HAL_ADC_Start_DMA+0x1b6>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d107      	bne.n	8002372 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002370:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000000 	.word	0x20000000
 8002380:	431bde83 	.word	0x431bde83
 8002384:	40012300 	.word	0x40012300
 8002388:	08002819 	.word	0x08002819
 800238c:	080028d3 	.word	0x080028d3
 8002390:	080028ef 	.word	0x080028ef
 8002394:	40012000 	.word	0x40012000
 8002398:	40012100 	.word	0x40012100
 800239c:	40012200 	.word	0x40012200

080023a0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x1c>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e105      	b.n	8002604 <HAL_ADC_ConfigChannel+0x228>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b09      	cmp	r3, #9
 8002406:	d925      	bls.n	8002454 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68d9      	ldr	r1, [r3, #12]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	3b1e      	subs	r3, #30
 800241e:	2207      	movs	r2, #7
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43da      	mvns	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	400a      	ands	r2, r1
 800242c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68d9      	ldr	r1, [r3, #12]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	b29b      	uxth	r3, r3
 800243e:	4618      	mov	r0, r3
 8002440:	4603      	mov	r3, r0
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4403      	add	r3, r0
 8002446:	3b1e      	subs	r3, #30
 8002448:	409a      	lsls	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	e022      	b.n	800249a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6919      	ldr	r1, [r3, #16]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	2207      	movs	r2, #7
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	400a      	ands	r2, r1
 8002476:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6919      	ldr	r1, [r3, #16]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	4618      	mov	r0, r3
 800248a:	4603      	mov	r3, r0
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4403      	add	r3, r0
 8002490:	409a      	lsls	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d824      	bhi.n	80024ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	3b05      	subs	r3, #5
 80024b4:	221f      	movs	r2, #31
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	400a      	ands	r2, r1
 80024c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4618      	mov	r0, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	3b05      	subs	r3, #5
 80024de:	fa00 f203 	lsl.w	r2, r0, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	635a      	str	r2, [r3, #52]	; 0x34
 80024ea:	e04c      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b0c      	cmp	r3, #12
 80024f2:	d824      	bhi.n	800253e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	3b23      	subs	r3, #35	; 0x23
 8002506:	221f      	movs	r2, #31
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43da      	mvns	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	400a      	ands	r2, r1
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b29b      	uxth	r3, r3
 8002522:	4618      	mov	r0, r3
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3b23      	subs	r3, #35	; 0x23
 8002530:	fa00 f203 	lsl.w	r2, r0, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	631a      	str	r2, [r3, #48]	; 0x30
 800253c:	e023      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	3b41      	subs	r3, #65	; 0x41
 8002550:	221f      	movs	r2, #31
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43da      	mvns	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	400a      	ands	r2, r1
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	4618      	mov	r0, r3
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	3b41      	subs	r3, #65	; 0x41
 800257a:	fa00 f203 	lsl.w	r2, r0, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <HAL_ADC_ConfigChannel+0x234>)
 8002588:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a21      	ldr	r2, [pc, #132]	; (8002614 <HAL_ADC_ConfigChannel+0x238>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d109      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1cc>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b12      	cmp	r3, #18
 800259a:	d105      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a19      	ldr	r2, [pc, #100]	; (8002614 <HAL_ADC_ConfigChannel+0x238>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d123      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x21e>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b10      	cmp	r3, #16
 80025b8:	d003      	beq.n	80025c2 <HAL_ADC_ConfigChannel+0x1e6>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b11      	cmp	r3, #17
 80025c0:	d11b      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d111      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <HAL_ADC_ConfigChannel+0x23c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a10      	ldr	r2, [pc, #64]	; (800261c <HAL_ADC_ConfigChannel+0x240>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	0c9a      	lsrs	r2, r3, #18
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025ec:	e002      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f9      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40012300 	.word	0x40012300
 8002614:	40012000 	.word	0x40012000
 8002618:	20000000 	.word	0x20000000
 800261c:	431bde83 	.word	0x431bde83

08002620 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002628:	4b79      	ldr	r3, [pc, #484]	; (8002810 <ADC_Init+0x1f0>)
 800262a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	431a      	orrs	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002654:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	021a      	lsls	r2, r3, #8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002678:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6899      	ldr	r1, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	4a58      	ldr	r2, [pc, #352]	; (8002814 <ADC_Init+0x1f4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d022      	beq.n	80026fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6899      	ldr	r1, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6899      	ldr	r1, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	e00f      	b.n	800271e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800270c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800271c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0202 	bic.w	r2, r2, #2
 800272c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6899      	ldr	r1, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	7e1b      	ldrb	r3, [r3, #24]
 8002738:	005a      	lsls	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01b      	beq.n	8002784 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800275a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800276a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	3b01      	subs	r3, #1
 8002778:	035a      	lsls	r2, r3, #13
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	e007      	b.n	8002794 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002792:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	051a      	lsls	r2, r3, #20
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6899      	ldr	r1, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027d6:	025a      	lsls	r2, r3, #9
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6899      	ldr	r1, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	029a      	lsls	r2, r3, #10
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	609a      	str	r2, [r3, #8]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	40012300 	.word	0x40012300
 8002814:	0f000001 	.word	0x0f000001

08002818 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002824:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800282e:	2b00      	cmp	r3, #0
 8002830:	d13c      	bne.n	80028ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d12b      	bne.n	80028a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002850:	2b00      	cmp	r3, #0
 8002852:	d127      	bne.n	80028a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800285e:	2b00      	cmp	r3, #0
 8002860:	d006      	beq.n	8002870 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800286c:	2b00      	cmp	r3, #0
 800286e:	d119      	bne.n	80028a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0220 	bic.w	r2, r2, #32
 800287e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d105      	bne.n	80028a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f043 0201 	orr.w	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff fd7b 	bl	80023a0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028aa:	e00e      	b.n	80028ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f7ff fd85 	bl	80023c8 <HAL_ADC_ErrorCallback>
}
 80028be:	e004      	b.n	80028ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4798      	blx	r3
}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f7ff fd67 	bl	80023b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2240      	movs	r2, #64	; 0x40
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f043 0204 	orr.w	r2, r3, #4
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f7ff fd5a 	bl	80023c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db0b      	blt.n	80029aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4907      	ldr	r1, [pc, #28]	; (80029b8 <__NVIC_EnableIRQ+0x38>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2001      	movs	r0, #1
 80029a2:	fa00 f202 	lsl.w	r2, r0, r2
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	; (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	; (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a88:	d301      	bcc.n	8002a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00f      	b.n	8002aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <SysTick_Config+0x40>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a96:	210f      	movs	r1, #15
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	f7ff ff8e 	bl	80029bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <SysTick_Config+0x40>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa6:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <SysTick_Config+0x40>)
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	e000e010 	.word	0xe000e010

08002abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ff29 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae4:	f7ff ff3e 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	6978      	ldr	r0, [r7, #20]
 8002af0:	f7ff ff8e 	bl	8002a10 <NVIC_EncodePriority>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff5d 	bl	80029bc <__NVIC_SetPriority>
}
 8002b02:	bf00      	nop
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff31 	bl	8002980 <__NVIC_EnableIRQ>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff ffa2 	bl	8002a78 <SysTick_Config>
 8002b34:	4603      	mov	r3, r0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b4c:	f7ff fae6 	bl	800211c <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e099      	b.n	8002c90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0201 	bic.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b7c:	e00f      	b.n	8002b9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b7e:	f7ff facd 	bl	800211c <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b05      	cmp	r3, #5
 8002b8a:	d908      	bls.n	8002b9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2203      	movs	r2, #3
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e078      	b.n	8002c90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e8      	bne.n	8002b7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4b38      	ldr	r3, [pc, #224]	; (8002c98 <HAL_DMA_Init+0x158>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d107      	bne.n	8002c08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	4313      	orrs	r3, r2
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f023 0307 	bic.w	r3, r3, #7
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d117      	bne.n	8002c62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00e      	beq.n	8002c62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fa91 	bl	800316c <DMA_CheckFifoParam>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2240      	movs	r2, #64	; 0x40
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e016      	b.n	8002c90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fa48 	bl	8003100 <DMA_CalcBaseAndBitshift>
 8002c70:	4603      	mov	r3, r0
 8002c72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c78:	223f      	movs	r2, #63	; 0x3f
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	f010803f 	.word	0xf010803f

08002c9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DMA_Start_IT+0x26>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e040      	b.n	8002d44 <HAL_DMA_Start_IT+0xa8>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d12f      	bne.n	8002d36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f9da 	bl	80030a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf4:	223f      	movs	r2, #63	; 0x3f
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0216 	orr.w	r2, r2, #22
 8002d0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d007      	beq.n	8002d24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0208 	orr.w	r2, r2, #8
 8002d22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	e005      	b.n	8002d42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d004      	beq.n	8002d6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2280      	movs	r2, #128	; 0x80
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00c      	b.n	8002d84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2205      	movs	r2, #5
 8002d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0201 	bic.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d9c:	4b92      	ldr	r3, [pc, #584]	; (8002fe8 <HAL_DMA_IRQHandler+0x258>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a92      	ldr	r2, [pc, #584]	; (8002fec <HAL_DMA_IRQHandler+0x25c>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	0a9b      	lsrs	r3, r3, #10
 8002da8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dba:	2208      	movs	r2, #8
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d01a      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d013      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0204 	bic.w	r2, r2, #4
 8002de2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	2208      	movs	r2, #8
 8002dea:	409a      	lsls	r2, r3
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df4:	f043 0201 	orr.w	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	2201      	movs	r2, #1
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d012      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	2201      	movs	r2, #1
 8002e20:	409a      	lsls	r2, r3
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2a:	f043 0202 	orr.w	r2, r3, #2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	2204      	movs	r2, #4
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d012      	beq.n	8002e68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00b      	beq.n	8002e68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	2204      	movs	r2, #4
 8002e56:	409a      	lsls	r2, r3
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e60:	f043 0204 	orr.w	r2, r3, #4
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	2210      	movs	r2, #16
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d043      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d03c      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8a:	2210      	movs	r2, #16
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d018      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d108      	bne.n	8002ec0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d024      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	4798      	blx	r3
 8002ebe:	e01f      	b.n	8002f00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01b      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4798      	blx	r3
 8002ed0:	e016      	b.n	8002f00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d107      	bne.n	8002ef0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0208 	bic.w	r2, r2, #8
 8002eee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f04:	2220      	movs	r2, #32
 8002f06:	409a      	lsls	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 808e 	beq.w	800302e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 8086 	beq.w	800302e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f26:	2220      	movs	r2, #32
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b05      	cmp	r3, #5
 8002f38:	d136      	bne.n	8002fa8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0216 	bic.w	r2, r2, #22
 8002f48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d103      	bne.n	8002f6a <HAL_DMA_IRQHandler+0x1da>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0208 	bic.w	r2, r2, #8
 8002f78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7e:	223f      	movs	r2, #63	; 0x3f
 8002f80:	409a      	lsls	r2, r3
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d07d      	beq.n	800309a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
        }
        return;
 8002fa6:	e078      	b.n	800309a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01c      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d108      	bne.n	8002fd6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d030      	beq.n	800302e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4798      	blx	r3
 8002fd4:	e02b      	b.n	800302e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d027      	beq.n	800302e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
 8002fe6:	e022      	b.n	800302e <HAL_DMA_IRQHandler+0x29e>
 8002fe8:	20000000 	.word	0x20000000
 8002fec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10f      	bne.n	800301e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0210 	bic.w	r2, r2, #16
 800300c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	2b00      	cmp	r3, #0
 8003034:	d032      	beq.n	800309c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d022      	beq.n	8003088 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2205      	movs	r2, #5
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0201 	bic.w	r2, r2, #1
 8003058:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	3301      	adds	r3, #1
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	429a      	cmp	r2, r3
 8003064:	d307      	bcc.n	8003076 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f2      	bne.n	800305a <HAL_DMA_IRQHandler+0x2ca>
 8003074:	e000      	b.n	8003078 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003076:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4798      	blx	r3
 8003098:	e000      	b.n	800309c <HAL_DMA_IRQHandler+0x30c>
        return;
 800309a:	bf00      	nop
    }
  }
}
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop

080030a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b40      	cmp	r3, #64	; 0x40
 80030d0:	d108      	bne.n	80030e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030e2:	e007      	b.n	80030f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	60da      	str	r2, [r3, #12]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	3b10      	subs	r3, #16
 8003110:	4a14      	ldr	r2, [pc, #80]	; (8003164 <DMA_CalcBaseAndBitshift+0x64>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800311a:	4a13      	ldr	r2, [pc, #76]	; (8003168 <DMA_CalcBaseAndBitshift+0x68>)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4413      	add	r3, r2
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b03      	cmp	r3, #3
 800312c:	d909      	bls.n	8003142 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003136:	f023 0303 	bic.w	r3, r3, #3
 800313a:	1d1a      	adds	r2, r3, #4
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	659a      	str	r2, [r3, #88]	; 0x58
 8003140:	e007      	b.n	8003152 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800314a:	f023 0303 	bic.w	r3, r3, #3
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	aaaaaaab 	.word	0xaaaaaaab
 8003168:	08008410 	.word	0x08008410

0800316c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d11f      	bne.n	80031c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b03      	cmp	r3, #3
 800318a:	d855      	bhi.n	8003238 <DMA_CheckFifoParam+0xcc>
 800318c:	a201      	add	r2, pc, #4	; (adr r2, 8003194 <DMA_CheckFifoParam+0x28>)
 800318e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003192:	bf00      	nop
 8003194:	080031a5 	.word	0x080031a5
 8003198:	080031b7 	.word	0x080031b7
 800319c:	080031a5 	.word	0x080031a5
 80031a0:	08003239 	.word	0x08003239
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d045      	beq.n	800323c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b4:	e042      	b.n	800323c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031be:	d13f      	bne.n	8003240 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c4:	e03c      	b.n	8003240 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ce:	d121      	bne.n	8003214 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d836      	bhi.n	8003244 <DMA_CheckFifoParam+0xd8>
 80031d6:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <DMA_CheckFifoParam+0x70>)
 80031d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031dc:	080031ed 	.word	0x080031ed
 80031e0:	080031f3 	.word	0x080031f3
 80031e4:	080031ed 	.word	0x080031ed
 80031e8:	08003205 	.word	0x08003205
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
      break;
 80031f0:	e02f      	b.n	8003252 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d024      	beq.n	8003248 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003202:	e021      	b.n	8003248 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800320c:	d11e      	bne.n	800324c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003212:	e01b      	b.n	800324c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d902      	bls.n	8003220 <DMA_CheckFifoParam+0xb4>
 800321a:	2b03      	cmp	r3, #3
 800321c:	d003      	beq.n	8003226 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800321e:	e018      	b.n	8003252 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
      break;
 8003224:	e015      	b.n	8003252 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00e      	beq.n	8003250 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
      break;
 8003236:	e00b      	b.n	8003250 <DMA_CheckFifoParam+0xe4>
      break;
 8003238:	bf00      	nop
 800323a:	e00a      	b.n	8003252 <DMA_CheckFifoParam+0xe6>
      break;
 800323c:	bf00      	nop
 800323e:	e008      	b.n	8003252 <DMA_CheckFifoParam+0xe6>
      break;
 8003240:	bf00      	nop
 8003242:	e006      	b.n	8003252 <DMA_CheckFifoParam+0xe6>
      break;
 8003244:	bf00      	nop
 8003246:	e004      	b.n	8003252 <DMA_CheckFifoParam+0xe6>
      break;
 8003248:	bf00      	nop
 800324a:	e002      	b.n	8003252 <DMA_CheckFifoParam+0xe6>
      break;   
 800324c:	bf00      	nop
 800324e:	e000      	b.n	8003252 <DMA_CheckFifoParam+0xe6>
      break;
 8003250:	bf00      	nop
    }
  } 
  
  return status; 
 8003252:	7bfb      	ldrb	r3, [r7, #15]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	; 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	e16b      	b.n	8003554 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800327c:	2201      	movs	r2, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	429a      	cmp	r2, r3
 8003296:	f040 815a 	bne.w	800354e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d00b      	beq.n	80032ba <HAL_GPIO_Init+0x5a>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d007      	beq.n	80032ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032ae:	2b11      	cmp	r3, #17
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b12      	cmp	r3, #18
 80032b8:	d130      	bne.n	800331c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	2203      	movs	r2, #3
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032f0:	2201      	movs	r2, #1
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	091b      	lsrs	r3, r3, #4
 8003306:	f003 0201 	and.w	r2, r3, #1
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0xfc>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b12      	cmp	r3, #18
 800335a:	d123      	bne.n	80033a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	08da      	lsrs	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3208      	adds	r2, #8
 8003364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	220f      	movs	r2, #15
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	08da      	lsrs	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3208      	adds	r2, #8
 800339e:	69b9      	ldr	r1, [r7, #24]
 80033a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0203 	and.w	r2, r3, #3
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80b4 	beq.w	800354e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	4b5f      	ldr	r3, [pc, #380]	; (8003568 <HAL_GPIO_Init+0x308>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	4a5e      	ldr	r2, [pc, #376]	; (8003568 <HAL_GPIO_Init+0x308>)
 80033f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033f4:	6453      	str	r3, [r2, #68]	; 0x44
 80033f6:	4b5c      	ldr	r3, [pc, #368]	; (8003568 <HAL_GPIO_Init+0x308>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003402:	4a5a      	ldr	r2, [pc, #360]	; (800356c <HAL_GPIO_Init+0x30c>)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	3302      	adds	r3, #2
 800340a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	220f      	movs	r2, #15
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a51      	ldr	r2, [pc, #324]	; (8003570 <HAL_GPIO_Init+0x310>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d02b      	beq.n	8003486 <HAL_GPIO_Init+0x226>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a50      	ldr	r2, [pc, #320]	; (8003574 <HAL_GPIO_Init+0x314>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d025      	beq.n	8003482 <HAL_GPIO_Init+0x222>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a4f      	ldr	r2, [pc, #316]	; (8003578 <HAL_GPIO_Init+0x318>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d01f      	beq.n	800347e <HAL_GPIO_Init+0x21e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a4e      	ldr	r2, [pc, #312]	; (800357c <HAL_GPIO_Init+0x31c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d019      	beq.n	800347a <HAL_GPIO_Init+0x21a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4d      	ldr	r2, [pc, #308]	; (8003580 <HAL_GPIO_Init+0x320>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d013      	beq.n	8003476 <HAL_GPIO_Init+0x216>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a4c      	ldr	r2, [pc, #304]	; (8003584 <HAL_GPIO_Init+0x324>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00d      	beq.n	8003472 <HAL_GPIO_Init+0x212>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a4b      	ldr	r2, [pc, #300]	; (8003588 <HAL_GPIO_Init+0x328>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d007      	beq.n	800346e <HAL_GPIO_Init+0x20e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a4a      	ldr	r2, [pc, #296]	; (800358c <HAL_GPIO_Init+0x32c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d101      	bne.n	800346a <HAL_GPIO_Init+0x20a>
 8003466:	2307      	movs	r3, #7
 8003468:	e00e      	b.n	8003488 <HAL_GPIO_Init+0x228>
 800346a:	2308      	movs	r3, #8
 800346c:	e00c      	b.n	8003488 <HAL_GPIO_Init+0x228>
 800346e:	2306      	movs	r3, #6
 8003470:	e00a      	b.n	8003488 <HAL_GPIO_Init+0x228>
 8003472:	2305      	movs	r3, #5
 8003474:	e008      	b.n	8003488 <HAL_GPIO_Init+0x228>
 8003476:	2304      	movs	r3, #4
 8003478:	e006      	b.n	8003488 <HAL_GPIO_Init+0x228>
 800347a:	2303      	movs	r3, #3
 800347c:	e004      	b.n	8003488 <HAL_GPIO_Init+0x228>
 800347e:	2302      	movs	r3, #2
 8003480:	e002      	b.n	8003488 <HAL_GPIO_Init+0x228>
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <HAL_GPIO_Init+0x228>
 8003486:	2300      	movs	r3, #0
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	f002 0203 	and.w	r2, r2, #3
 800348e:	0092      	lsls	r2, r2, #2
 8003490:	4093      	lsls	r3, r2
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003498:	4934      	ldr	r1, [pc, #208]	; (800356c <HAL_GPIO_Init+0x30c>)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	089b      	lsrs	r3, r3, #2
 800349e:	3302      	adds	r3, #2
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034a6:	4b3a      	ldr	r3, [pc, #232]	; (8003590 <HAL_GPIO_Init+0x330>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	43db      	mvns	r3, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4013      	ands	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034ca:	4a31      	ldr	r2, [pc, #196]	; (8003590 <HAL_GPIO_Init+0x330>)
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034d0:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <HAL_GPIO_Init+0x330>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034f4:	4a26      	ldr	r2, [pc, #152]	; (8003590 <HAL_GPIO_Init+0x330>)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034fa:	4b25      	ldr	r3, [pc, #148]	; (8003590 <HAL_GPIO_Init+0x330>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800351e:	4a1c      	ldr	r2, [pc, #112]	; (8003590 <HAL_GPIO_Init+0x330>)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003524:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <HAL_GPIO_Init+0x330>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003548:	4a11      	ldr	r2, [pc, #68]	; (8003590 <HAL_GPIO_Init+0x330>)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	3301      	adds	r3, #1
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2b0f      	cmp	r3, #15
 8003558:	f67f ae90 	bls.w	800327c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800355c:	bf00      	nop
 800355e:	3724      	adds	r7, #36	; 0x24
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	40023800 	.word	0x40023800
 800356c:	40013800 	.word	0x40013800
 8003570:	40020000 	.word	0x40020000
 8003574:	40020400 	.word	0x40020400
 8003578:	40020800 	.word	0x40020800
 800357c:	40020c00 	.word	0x40020c00
 8003580:	40021000 	.word	0x40021000
 8003584:	40021400 	.word	0x40021400
 8003588:	40021800 	.word	0x40021800
 800358c:	40021c00 	.word	0x40021c00
 8003590:	40013c00 	.word	0x40013c00

08003594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	e001      	b.n	80035b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e25b      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d075      	beq.n	80036ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035e2:	4ba3      	ldr	r3, [pc, #652]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d00c      	beq.n	8003608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ee:	4ba0      	ldr	r3, [pc, #640]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d112      	bne.n	8003620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035fa:	4b9d      	ldr	r3, [pc, #628]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003606:	d10b      	bne.n	8003620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003608:	4b99      	ldr	r3, [pc, #612]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d05b      	beq.n	80036cc <HAL_RCC_OscConfig+0x108>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d157      	bne.n	80036cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e236      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003628:	d106      	bne.n	8003638 <HAL_RCC_OscConfig+0x74>
 800362a:	4b91      	ldr	r3, [pc, #580]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a90      	ldr	r2, [pc, #576]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e01d      	b.n	8003674 <HAL_RCC_OscConfig+0xb0>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x98>
 8003642:	4b8b      	ldr	r3, [pc, #556]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a8a      	ldr	r2, [pc, #552]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b88      	ldr	r3, [pc, #544]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a87      	ldr	r2, [pc, #540]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e00b      	b.n	8003674 <HAL_RCC_OscConfig+0xb0>
 800365c:	4b84      	ldr	r3, [pc, #528]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a83      	ldr	r2, [pc, #524]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	4b81      	ldr	r3, [pc, #516]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a80      	ldr	r2, [pc, #512]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 800366e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d013      	beq.n	80036a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7fe fd4e 	bl	800211c <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003684:	f7fe fd4a 	bl	800211c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	; 0x64
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e1fb      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	4b76      	ldr	r3, [pc, #472]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0xc0>
 80036a2:	e014      	b.n	80036ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a4:	f7fe fd3a 	bl	800211c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ac:	f7fe fd36 	bl	800211c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	; 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e1e7      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036be:	4b6c      	ldr	r3, [pc, #432]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0xe8>
 80036ca:	e000      	b.n	80036ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d063      	beq.n	80037a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036da:	4b65      	ldr	r3, [pc, #404]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e6:	4b62      	ldr	r3, [pc, #392]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d11c      	bne.n	800372c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036f2:	4b5f      	ldr	r3, [pc, #380]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d116      	bne.n	800372c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fe:	4b5c      	ldr	r3, [pc, #368]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <HAL_RCC_OscConfig+0x152>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d001      	beq.n	8003716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e1bb      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003716:	4b56      	ldr	r3, [pc, #344]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4952      	ldr	r1, [pc, #328]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372a:	e03a      	b.n	80037a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d020      	beq.n	8003776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003734:	4b4f      	ldr	r3, [pc, #316]	; (8003874 <HAL_RCC_OscConfig+0x2b0>)
 8003736:	2201      	movs	r2, #1
 8003738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fe fcef 	bl	800211c <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003742:	f7fe fceb 	bl	800211c <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e19c      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003754:	4b46      	ldr	r3, [pc, #280]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003760:	4b43      	ldr	r3, [pc, #268]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4940      	ldr	r1, [pc, #256]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003770:	4313      	orrs	r3, r2
 8003772:	600b      	str	r3, [r1, #0]
 8003774:	e015      	b.n	80037a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003776:	4b3f      	ldr	r3, [pc, #252]	; (8003874 <HAL_RCC_OscConfig+0x2b0>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fe fcce 	bl	800211c <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003784:	f7fe fcca 	bl	800211c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e17b      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003796:	4b36      	ldr	r3, [pc, #216]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d030      	beq.n	8003810 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d016      	beq.n	80037e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037b6:	4b30      	ldr	r3, [pc, #192]	; (8003878 <HAL_RCC_OscConfig+0x2b4>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7fe fcae 	bl	800211c <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c4:	f7fe fcaa 	bl	800211c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e15b      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d6:	4b26      	ldr	r3, [pc, #152]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 80037d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0x200>
 80037e2:	e015      	b.n	8003810 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e4:	4b24      	ldr	r3, [pc, #144]	; (8003878 <HAL_RCC_OscConfig+0x2b4>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ea:	f7fe fc97 	bl	800211c <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f2:	f7fe fc93 	bl	800211c <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e144      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003804:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f0      	bne.n	80037f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80a0 	beq.w	800395e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381e:	2300      	movs	r3, #0
 8003820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003822:	4b13      	ldr	r3, [pc, #76]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10f      	bne.n	800384e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	4a0e      	ldr	r2, [pc, #56]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383c:	6413      	str	r3, [r2, #64]	; 0x40
 800383e:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <HAL_RCC_OscConfig+0x2ac>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384a:	2301      	movs	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384e:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_RCC_OscConfig+0x2b8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d121      	bne.n	800389e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <HAL_RCC_OscConfig+0x2b8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a07      	ldr	r2, [pc, #28]	; (800387c <HAL_RCC_OscConfig+0x2b8>)
 8003860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003866:	f7fe fc59 	bl	800211c <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386c:	e011      	b.n	8003892 <HAL_RCC_OscConfig+0x2ce>
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800
 8003874:	42470000 	.word	0x42470000
 8003878:	42470e80 	.word	0x42470e80
 800387c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003880:	f7fe fc4c 	bl	800211c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0fd      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003892:	4b81      	ldr	r3, [pc, #516]	; (8003a98 <HAL_RCC_OscConfig+0x4d4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d106      	bne.n	80038b4 <HAL_RCC_OscConfig+0x2f0>
 80038a6:	4b7d      	ldr	r3, [pc, #500]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	4a7c      	ldr	r2, [pc, #496]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	6713      	str	r3, [r2, #112]	; 0x70
 80038b2:	e01c      	b.n	80038ee <HAL_RCC_OscConfig+0x32a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b05      	cmp	r3, #5
 80038ba:	d10c      	bne.n	80038d6 <HAL_RCC_OscConfig+0x312>
 80038bc:	4b77      	ldr	r3, [pc, #476]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 80038be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c0:	4a76      	ldr	r2, [pc, #472]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 80038c2:	f043 0304 	orr.w	r3, r3, #4
 80038c6:	6713      	str	r3, [r2, #112]	; 0x70
 80038c8:	4b74      	ldr	r3, [pc, #464]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038cc:	4a73      	ldr	r2, [pc, #460]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6713      	str	r3, [r2, #112]	; 0x70
 80038d4:	e00b      	b.n	80038ee <HAL_RCC_OscConfig+0x32a>
 80038d6:	4b71      	ldr	r3, [pc, #452]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	4a70      	ldr	r2, [pc, #448]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	6713      	str	r3, [r2, #112]	; 0x70
 80038e2:	4b6e      	ldr	r3, [pc, #440]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	4a6d      	ldr	r2, [pc, #436]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 80038e8:	f023 0304 	bic.w	r3, r3, #4
 80038ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d015      	beq.n	8003922 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f6:	f7fe fc11 	bl	800211c <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7fe fc0d 	bl	800211c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	; 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e0bc      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003914:	4b61      	ldr	r3, [pc, #388]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0ee      	beq.n	80038fe <HAL_RCC_OscConfig+0x33a>
 8003920:	e014      	b.n	800394c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003922:	f7fe fbfb 	bl	800211c <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003928:	e00a      	b.n	8003940 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800392a:	f7fe fbf7 	bl	800211c <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	; 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e0a6      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003940:	4b56      	ldr	r3, [pc, #344]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1ee      	bne.n	800392a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d105      	bne.n	800395e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003952:	4b52      	ldr	r3, [pc, #328]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	4a51      	ldr	r2, [pc, #324]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 8003958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800395c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8092 	beq.w	8003a8c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003968:	4b4c      	ldr	r3, [pc, #304]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 030c 	and.w	r3, r3, #12
 8003970:	2b08      	cmp	r3, #8
 8003972:	d05c      	beq.n	8003a2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d141      	bne.n	8003a00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397c:	4b48      	ldr	r3, [pc, #288]	; (8003aa0 <HAL_RCC_OscConfig+0x4dc>)
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003982:	f7fe fbcb 	bl	800211c <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800398a:	f7fe fbc7 	bl	800211c <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e078      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399c:	4b3f      	ldr	r3, [pc, #252]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f0      	bne.n	800398a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	019b      	lsls	r3, r3, #6
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	085b      	lsrs	r3, r3, #1
 80039c0:	3b01      	subs	r3, #1
 80039c2:	041b      	lsls	r3, r3, #16
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	061b      	lsls	r3, r3, #24
 80039cc:	4933      	ldr	r1, [pc, #204]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d2:	4b33      	ldr	r3, [pc, #204]	; (8003aa0 <HAL_RCC_OscConfig+0x4dc>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7fe fba0 	bl	800211c <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e0:	f7fe fb9c 	bl	800211c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e04d      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f2:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x41c>
 80039fe:	e045      	b.n	8003a8c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a00:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <HAL_RCC_OscConfig+0x4dc>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a06:	f7fe fb89 	bl	800211c <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0e:	f7fe fb85 	bl	800211c <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e036      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a20:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f0      	bne.n	8003a0e <HAL_RCC_OscConfig+0x44a>
 8003a2c:	e02e      	b.n	8003a8c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e029      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a3a:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <HAL_RCC_OscConfig+0x4d8>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d11c      	bne.n	8003a88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d115      	bne.n	8003a88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a62:	4013      	ands	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d10d      	bne.n	8003a88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d106      	bne.n	8003a88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d001      	beq.n	8003a8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40007000 	.word	0x40007000
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	42470060 	.word	0x42470060

08003aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0cc      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab8:	4b68      	ldr	r3, [pc, #416]	; (8003c5c <HAL_RCC_ClockConfig+0x1b8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d90c      	bls.n	8003ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac6:	4b65      	ldr	r3, [pc, #404]	; (8003c5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	4b63      	ldr	r3, [pc, #396]	; (8003c5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0b8      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d020      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af8:	4b59      	ldr	r3, [pc, #356]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	4a58      	ldr	r2, [pc, #352]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b10:	4b53      	ldr	r3, [pc, #332]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	4a52      	ldr	r2, [pc, #328]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b1c:	4b50      	ldr	r3, [pc, #320]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	494d      	ldr	r1, [pc, #308]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d044      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d107      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	4b47      	ldr	r3, [pc, #284]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d119      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e07f      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d003      	beq.n	8003b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d107      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b62:	4b3f      	ldr	r3, [pc, #252]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e06f      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b72:	4b3b      	ldr	r3, [pc, #236]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e067      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b82:	4b37      	ldr	r3, [pc, #220]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f023 0203 	bic.w	r2, r3, #3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	4934      	ldr	r1, [pc, #208]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b94:	f7fe fac2 	bl	800211c <HAL_GetTick>
 8003b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	e00a      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b9c:	f7fe fabe 	bl	800211c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e04f      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb2:	4b2b      	ldr	r3, [pc, #172]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 020c 	and.w	r2, r3, #12
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d1eb      	bne.n	8003b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc4:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <HAL_RCC_ClockConfig+0x1b8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d20c      	bcs.n	8003bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd2:	4b22      	ldr	r3, [pc, #136]	; (8003c5c <HAL_RCC_ClockConfig+0x1b8>)
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b20      	ldr	r3, [pc, #128]	; (8003c5c <HAL_RCC_ClockConfig+0x1b8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e032      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf8:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4916      	ldr	r1, [pc, #88]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c16:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	490e      	ldr	r1, [pc, #56]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c2a:	f000 f821 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8003c2e:	4601      	mov	r1, r0
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <HAL_RCC_ClockConfig+0x1c0>)
 8003c3c:	5cd3      	ldrb	r3, [r2, r3]
 8003c3e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c42:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c46:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe fa22 	bl	8002094 <HAL_InitTick>

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40023c00 	.word	0x40023c00
 8003c60:	40023800 	.word	0x40023800
 8003c64:	080083f8 	.word	0x080083f8
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	20000004 	.word	0x20000004

08003c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	607b      	str	r3, [r7, #4]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c86:	4b50      	ldr	r3, [pc, #320]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d007      	beq.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x32>
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d008      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x38>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f040 808d 	bne.w	8003db6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c9c:	4b4b      	ldr	r3, [pc, #300]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x15c>)
 8003c9e:	60bb      	str	r3, [r7, #8]
       break;
 8003ca0:	e08c      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ca2:	4b4b      	ldr	r3, [pc, #300]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ca4:	60bb      	str	r3, [r7, #8]
      break;
 8003ca6:	e089      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ca8:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cb2:	4b45      	ldr	r3, [pc, #276]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d023      	beq.n	8003d06 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cbe:	4b42      	ldr	r3, [pc, #264]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	099b      	lsrs	r3, r3, #6
 8003cc4:	f04f 0400 	mov.w	r4, #0
 8003cc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	ea03 0501 	and.w	r5, r3, r1
 8003cd4:	ea04 0602 	and.w	r6, r4, r2
 8003cd8:	4a3d      	ldr	r2, [pc, #244]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003cda:	fb02 f106 	mul.w	r1, r2, r6
 8003cde:	2200      	movs	r2, #0
 8003ce0:	fb02 f205 	mul.w	r2, r2, r5
 8003ce4:	440a      	add	r2, r1
 8003ce6:	493a      	ldr	r1, [pc, #232]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ce8:	fba5 0101 	umull	r0, r1, r5, r1
 8003cec:	1853      	adds	r3, r2, r1
 8003cee:	4619      	mov	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f04f 0400 	mov.w	r4, #0
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4623      	mov	r3, r4
 8003cfa:	f7fc fef5 	bl	8000ae8 <__aeabi_uldivmod>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	460c      	mov	r4, r1
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	e049      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d06:	4b30      	ldr	r3, [pc, #192]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	099b      	lsrs	r3, r3, #6
 8003d0c:	f04f 0400 	mov.w	r4, #0
 8003d10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	ea03 0501 	and.w	r5, r3, r1
 8003d1c:	ea04 0602 	and.w	r6, r4, r2
 8003d20:	4629      	mov	r1, r5
 8003d22:	4632      	mov	r2, r6
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	f04f 0400 	mov.w	r4, #0
 8003d2c:	0154      	lsls	r4, r2, #5
 8003d2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d32:	014b      	lsls	r3, r1, #5
 8003d34:	4619      	mov	r1, r3
 8003d36:	4622      	mov	r2, r4
 8003d38:	1b49      	subs	r1, r1, r5
 8003d3a:	eb62 0206 	sbc.w	r2, r2, r6
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	f04f 0400 	mov.w	r4, #0
 8003d46:	0194      	lsls	r4, r2, #6
 8003d48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d4c:	018b      	lsls	r3, r1, #6
 8003d4e:	1a5b      	subs	r3, r3, r1
 8003d50:	eb64 0402 	sbc.w	r4, r4, r2
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	00e2      	lsls	r2, r4, #3
 8003d5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d62:	00d9      	lsls	r1, r3, #3
 8003d64:	460b      	mov	r3, r1
 8003d66:	4614      	mov	r4, r2
 8003d68:	195b      	adds	r3, r3, r5
 8003d6a:	eb44 0406 	adc.w	r4, r4, r6
 8003d6e:	f04f 0100 	mov.w	r1, #0
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	02a2      	lsls	r2, r4, #10
 8003d78:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d7c:	0299      	lsls	r1, r3, #10
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4614      	mov	r4, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	4621      	mov	r1, r4
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f04f 0400 	mov.w	r4, #0
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4623      	mov	r3, r4
 8003d90:	f7fc feaa 	bl	8000ae8 <__aeabi_uldivmod>
 8003d94:	4603      	mov	r3, r0
 8003d96:	460c      	mov	r4, r1
 8003d98:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	0c1b      	lsrs	r3, r3, #16
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	3301      	adds	r3, #1
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db2:	60bb      	str	r3, [r7, #8]
      break;
 8003db4:	e002      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x15c>)
 8003db8:	60bb      	str	r3, [r7, #8]
      break;
 8003dba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	00f42400 	.word	0x00f42400
 8003dd0:	017d7840 	.word	0x017d7840

08003dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000000 	.word	0x20000000

08003dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003df0:	f7ff fff0 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003df4:	4601      	mov	r1, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0a9b      	lsrs	r3, r3, #10
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4a03      	ldr	r2, [pc, #12]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e02:	5cd3      	ldrb	r3, [r2, r3]
 8003e04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	08008408 	.word	0x08008408

08003e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e18:	f7ff ffdc 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003e1c:	4601      	mov	r1, r0
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	0b5b      	lsrs	r3, r3, #13
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4a03      	ldr	r2, [pc, #12]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e2a:	5cd3      	ldrb	r3, [r2, r3]
 8003e2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40023800 	.word	0x40023800
 8003e38:	08008408 	.word	0x08008408

08003e3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e03f      	b.n	8003ece <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd ffec 	bl	8001e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2224      	movs	r2, #36	; 0x24
 8003e6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fc6d 	bl	8004760 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ea4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b088      	sub	sp, #32
 8003eda:	af02      	add	r7, sp, #8
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	f040 8083 	bne.w	8003ffe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_UART_Transmit+0x2e>
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e07b      	b.n	8004000 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_UART_Transmit+0x40>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e074      	b.n	8004000 <HAL_UART_Transmit+0x12a>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2221      	movs	r2, #33	; 0x21
 8003f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003f2c:	f7fe f8f6 	bl	800211c <HAL_GetTick>
 8003f30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	88fa      	ldrh	r2, [r7, #6]
 8003f36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	88fa      	ldrh	r2, [r7, #6]
 8003f3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003f46:	e042      	b.n	8003fce <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5e:	d122      	bne.n	8003fa6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2200      	movs	r2, #0
 8003f68:	2180      	movs	r1, #128	; 0x80
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 fa76 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e042      	b.n	8004000 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f8c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d103      	bne.n	8003f9e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	3302      	adds	r3, #2
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	e017      	b.n	8003fce <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	e013      	b.n	8003fce <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2200      	movs	r2, #0
 8003fae:	2180      	movs	r1, #128	; 0x80
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 fa53 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e01f      	b.n	8004000 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	60ba      	str	r2, [r7, #8]
 8003fc6:	781a      	ldrb	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1b7      	bne.n	8003f48 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2140      	movs	r1, #64	; 0x40
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fa3a 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e006      	b.n	8004000 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e000      	b.n	8004000 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003ffe:	2302      	movs	r3, #2
  }
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b20      	cmp	r3, #32
 8004020:	d166      	bne.n	80040f0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <HAL_UART_Receive_DMA+0x26>
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e05f      	b.n	80040f2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_UART_Receive_DMA+0x38>
 800403c:	2302      	movs	r3, #2
 800403e:	e058      	b.n	80040f2 <HAL_UART_Receive_DMA+0xea>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	88fa      	ldrh	r2, [r7, #6]
 8004052:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2222      	movs	r2, #34	; 0x22
 800405e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004066:	4a25      	ldr	r2, [pc, #148]	; (80040fc <HAL_UART_Receive_DMA+0xf4>)
 8004068:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406e:	4a24      	ldr	r2, [pc, #144]	; (8004100 <HAL_UART_Receive_DMA+0xf8>)
 8004070:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004076:	4a23      	ldr	r2, [pc, #140]	; (8004104 <HAL_UART_Receive_DMA+0xfc>)
 8004078:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407e:	2200      	movs	r2, #0
 8004080:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004082:	f107 0308 	add.w	r3, r7, #8
 8004086:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3304      	adds	r3, #4
 8004092:	4619      	mov	r1, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	f7fe fdff 	bl	8002c9c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ca:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ea:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	e000      	b.n	80040f2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80040f0:	2302      	movs	r3, #2
  }
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	08004345 	.word	0x08004345
 8004100:	080043ad 	.word	0x080043ad
 8004104:	080043c9 	.word	0x080043c9

08004108 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004128:	2300      	movs	r3, #0
 800412a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10d      	bne.n	800415a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_UART_IRQHandler+0x52>
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fa82 	bl	800465c <UART_Receive_IT>
      return;
 8004158:	e0d1      	b.n	80042fe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80b0 	beq.w	80042c2 <HAL_UART_IRQHandler+0x1ba>
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <HAL_UART_IRQHandler+0x70>
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 80a5 	beq.w	80042c2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_UART_IRQHandler+0x90>
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004190:	f043 0201 	orr.w	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_UART_IRQHandler+0xb0>
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b0:	f043 0202 	orr.w	r2, r3, #2
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_UART_IRQHandler+0xd0>
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d0:	f043 0204 	orr.w	r2, r3, #4
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00f      	beq.n	8004202 <HAL_UART_IRQHandler+0xfa>
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d104      	bne.n	80041f6 <HAL_UART_IRQHandler+0xee>
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fa:	f043 0208 	orr.w	r2, r3, #8
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004206:	2b00      	cmp	r3, #0
 8004208:	d078      	beq.n	80042fc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d007      	beq.n	8004224 <HAL_UART_IRQHandler+0x11c>
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fa1c 	bl	800465c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422e:	2b40      	cmp	r3, #64	; 0x40
 8004230:	bf0c      	ite	eq
 8004232:	2301      	moveq	r3, #1
 8004234:	2300      	movne	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d102      	bne.n	800424c <HAL_UART_IRQHandler+0x144>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d031      	beq.n	80042b0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f965 	bl	800451c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b40      	cmp	r3, #64	; 0x40
 800425e:	d123      	bne.n	80042a8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800426e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <HAL_UART_IRQHandler+0x1fc>)
 800427e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe fd61 	bl	8002d4c <HAL_DMA_Abort_IT>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d016      	beq.n	80042be <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800429a:	4610      	mov	r0, r2
 800429c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429e:	e00e      	b.n	80042be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f845 	bl	8004330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a6:	e00a      	b.n	80042be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f841 	bl	8004330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ae:	e006      	b.n	80042be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f83d 	bl	8004330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80042bc:	e01e      	b.n	80042fc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042be:	bf00      	nop
    return;
 80042c0:	e01c      	b.n	80042fc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_UART_IRQHandler+0x1d6>
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f952 	bl	8004580 <UART_Transmit_IT>
    return;
 80042dc:	e00f      	b.n	80042fe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_UART_IRQHandler+0x1f6>
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f99a 	bl	800462c <UART_EndTransmit_IT>
    return;
 80042f8:	bf00      	nop
 80042fa:	e000      	b.n	80042fe <HAL_UART_IRQHandler+0x1f6>
    return;
 80042fc:	bf00      	nop
  }
}
 80042fe:	3720      	adds	r7, #32
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	08004559 	.word	0x08004559

08004308 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d11e      	bne.n	800439e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004374:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0201 	bic.w	r2, r2, #1
 8004384:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695a      	ldr	r2, [r3, #20]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004394:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f7fd f8ba 	bl	8001518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043a4:	bf00      	nop
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff ffae 	bl	800431c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043c0:	bf00      	nop
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e4:	2b80      	cmp	r3, #128	; 0x80
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b21      	cmp	r3, #33	; 0x21
 80043fa:	d108      	bne.n	800440e <UART_DMAError+0x46>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2200      	movs	r2, #0
 8004406:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004408:	68b8      	ldr	r0, [r7, #8]
 800440a:	f000 f871 	bl	80044f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b40      	cmp	r3, #64	; 0x40
 800441a:	bf0c      	ite	eq
 800441c:	2301      	moveq	r3, #1
 800441e:	2300      	movne	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b22      	cmp	r3, #34	; 0x22
 800442e:	d108      	bne.n	8004442 <UART_DMAError+0x7a>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2200      	movs	r2, #0
 800443a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800443c:	68b8      	ldr	r0, [r7, #8]
 800443e:	f000 f86d 	bl	800451c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004446:	f043 0210 	orr.w	r2, r3, #16
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800444e:	68b8      	ldr	r0, [r7, #8]
 8004450:	f7ff ff6e 	bl	8004330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004454:	bf00      	nop
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446c:	e02c      	b.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d028      	beq.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d007      	beq.n	800448c <UART_WaitOnFlagUntilTimeout+0x30>
 800447c:	f7fd fe4e 	bl	800211c <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	429a      	cmp	r2, r3
 800448a:	d21d      	bcs.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800449a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e00f      	b.n	80044e8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4013      	ands	r3, r2
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d0c3      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004506:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004532:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695a      	ldr	r2, [r3, #20]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0201 	bic.w	r2, r2, #1
 8004542:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7ff fedc 	bl	8004330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004578:	bf00      	nop
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b21      	cmp	r3, #33	; 0x21
 8004592:	d144      	bne.n	800461e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459c:	d11a      	bne.n	80045d4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d105      	bne.n	80045c8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	1c9a      	adds	r2, r3, #2
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	621a      	str	r2, [r3, #32]
 80045c6:	e00e      	b.n	80045e6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	621a      	str	r2, [r3, #32]
 80045d2:	e008      	b.n	80045e6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	1c59      	adds	r1, r3, #1
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6211      	str	r1, [r2, #32]
 80045de:	781a      	ldrb	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	4619      	mov	r1, r3
 80045f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10f      	bne.n	800461a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004608:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004618:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e000      	b.n	8004620 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004642:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff fe5b 	bl	8004308 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b22      	cmp	r3, #34	; 0x22
 800466e:	d171      	bne.n	8004754 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004678:	d123      	bne.n	80046c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10e      	bne.n	80046a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	b29b      	uxth	r3, r3
 8004690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	1c9a      	adds	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	629a      	str	r2, [r3, #40]	; 0x28
 80046a4:	e029      	b.n	80046fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	629a      	str	r2, [r3, #40]	; 0x28
 80046c0:	e01b      	b.n	80046fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6858      	ldr	r0, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	1c59      	adds	r1, r3, #1
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6291      	str	r1, [r2, #40]	; 0x28
 80046da:	b2c2      	uxtb	r2, r0
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	e00c      	b.n	80046fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	1c58      	adds	r0, r3, #1
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	6288      	str	r0, [r1, #40]	; 0x28
 80046f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29b      	uxth	r3, r3
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	4619      	mov	r1, r3
 8004708:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800470a:	2b00      	cmp	r3, #0
 800470c:	d120      	bne.n	8004750 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0220 	bic.w	r2, r2, #32
 800471c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800472c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695a      	ldr	r2, [r3, #20]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0201 	bic.w	r2, r2, #1
 800473c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fc fee6 	bl	8001518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	e002      	b.n	8004756 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	e000      	b.n	8004756 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004754:	2302      	movs	r3, #2
  }
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80047a2:	f023 030c 	bic.w	r3, r3, #12
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	68f9      	ldr	r1, [r7, #12]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ce:	f040 818b 	bne.w	8004ae8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4ac1      	ldr	r2, [pc, #772]	; (8004adc <UART_SetConfig+0x37c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d005      	beq.n	80047e8 <UART_SetConfig+0x88>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4abf      	ldr	r2, [pc, #764]	; (8004ae0 <UART_SetConfig+0x380>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	f040 80bd 	bne.w	8004962 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047e8:	f7ff fb14 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 80047ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	461d      	mov	r5, r3
 80047f2:	f04f 0600 	mov.w	r6, #0
 80047f6:	46a8      	mov	r8, r5
 80047f8:	46b1      	mov	r9, r6
 80047fa:	eb18 0308 	adds.w	r3, r8, r8
 80047fe:	eb49 0409 	adc.w	r4, r9, r9
 8004802:	4698      	mov	r8, r3
 8004804:	46a1      	mov	r9, r4
 8004806:	eb18 0805 	adds.w	r8, r8, r5
 800480a:	eb49 0906 	adc.w	r9, r9, r6
 800480e:	f04f 0100 	mov.w	r1, #0
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800481a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800481e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004822:	4688      	mov	r8, r1
 8004824:	4691      	mov	r9, r2
 8004826:	eb18 0005 	adds.w	r0, r8, r5
 800482a:	eb49 0106 	adc.w	r1, r9, r6
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	461d      	mov	r5, r3
 8004834:	f04f 0600 	mov.w	r6, #0
 8004838:	196b      	adds	r3, r5, r5
 800483a:	eb46 0406 	adc.w	r4, r6, r6
 800483e:	461a      	mov	r2, r3
 8004840:	4623      	mov	r3, r4
 8004842:	f7fc f951 	bl	8000ae8 <__aeabi_uldivmod>
 8004846:	4603      	mov	r3, r0
 8004848:	460c      	mov	r4, r1
 800484a:	461a      	mov	r2, r3
 800484c:	4ba5      	ldr	r3, [pc, #660]	; (8004ae4 <UART_SetConfig+0x384>)
 800484e:	fba3 2302 	umull	r2, r3, r3, r2
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	461d      	mov	r5, r3
 800485c:	f04f 0600 	mov.w	r6, #0
 8004860:	46a9      	mov	r9, r5
 8004862:	46b2      	mov	sl, r6
 8004864:	eb19 0309 	adds.w	r3, r9, r9
 8004868:	eb4a 040a 	adc.w	r4, sl, sl
 800486c:	4699      	mov	r9, r3
 800486e:	46a2      	mov	sl, r4
 8004870:	eb19 0905 	adds.w	r9, r9, r5
 8004874:	eb4a 0a06 	adc.w	sl, sl, r6
 8004878:	f04f 0100 	mov.w	r1, #0
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004884:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004888:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800488c:	4689      	mov	r9, r1
 800488e:	4692      	mov	sl, r2
 8004890:	eb19 0005 	adds.w	r0, r9, r5
 8004894:	eb4a 0106 	adc.w	r1, sl, r6
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	461d      	mov	r5, r3
 800489e:	f04f 0600 	mov.w	r6, #0
 80048a2:	196b      	adds	r3, r5, r5
 80048a4:	eb46 0406 	adc.w	r4, r6, r6
 80048a8:	461a      	mov	r2, r3
 80048aa:	4623      	mov	r3, r4
 80048ac:	f7fc f91c 	bl	8000ae8 <__aeabi_uldivmod>
 80048b0:	4603      	mov	r3, r0
 80048b2:	460c      	mov	r4, r1
 80048b4:	461a      	mov	r2, r3
 80048b6:	4b8b      	ldr	r3, [pc, #556]	; (8004ae4 <UART_SetConfig+0x384>)
 80048b8:	fba3 1302 	umull	r1, r3, r3, r2
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	2164      	movs	r1, #100	; 0x64
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	3332      	adds	r3, #50	; 0x32
 80048ca:	4a86      	ldr	r2, [pc, #536]	; (8004ae4 <UART_SetConfig+0x384>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048d8:	4498      	add	r8, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	461d      	mov	r5, r3
 80048de:	f04f 0600 	mov.w	r6, #0
 80048e2:	46a9      	mov	r9, r5
 80048e4:	46b2      	mov	sl, r6
 80048e6:	eb19 0309 	adds.w	r3, r9, r9
 80048ea:	eb4a 040a 	adc.w	r4, sl, sl
 80048ee:	4699      	mov	r9, r3
 80048f0:	46a2      	mov	sl, r4
 80048f2:	eb19 0905 	adds.w	r9, r9, r5
 80048f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80048fa:	f04f 0100 	mov.w	r1, #0
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004906:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800490a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800490e:	4689      	mov	r9, r1
 8004910:	4692      	mov	sl, r2
 8004912:	eb19 0005 	adds.w	r0, r9, r5
 8004916:	eb4a 0106 	adc.w	r1, sl, r6
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	461d      	mov	r5, r3
 8004920:	f04f 0600 	mov.w	r6, #0
 8004924:	196b      	adds	r3, r5, r5
 8004926:	eb46 0406 	adc.w	r4, r6, r6
 800492a:	461a      	mov	r2, r3
 800492c:	4623      	mov	r3, r4
 800492e:	f7fc f8db 	bl	8000ae8 <__aeabi_uldivmod>
 8004932:	4603      	mov	r3, r0
 8004934:	460c      	mov	r4, r1
 8004936:	461a      	mov	r2, r3
 8004938:	4b6a      	ldr	r3, [pc, #424]	; (8004ae4 <UART_SetConfig+0x384>)
 800493a:	fba3 1302 	umull	r1, r3, r3, r2
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2164      	movs	r1, #100	; 0x64
 8004942:	fb01 f303 	mul.w	r3, r1, r3
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	3332      	adds	r3, #50	; 0x32
 800494c:	4a65      	ldr	r2, [pc, #404]	; (8004ae4 <UART_SetConfig+0x384>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	f003 0207 	and.w	r2, r3, #7
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4442      	add	r2, r8
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	e26f      	b.n	8004e42 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004962:	f7ff fa43 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 8004966:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	461d      	mov	r5, r3
 800496c:	f04f 0600 	mov.w	r6, #0
 8004970:	46a8      	mov	r8, r5
 8004972:	46b1      	mov	r9, r6
 8004974:	eb18 0308 	adds.w	r3, r8, r8
 8004978:	eb49 0409 	adc.w	r4, r9, r9
 800497c:	4698      	mov	r8, r3
 800497e:	46a1      	mov	r9, r4
 8004980:	eb18 0805 	adds.w	r8, r8, r5
 8004984:	eb49 0906 	adc.w	r9, r9, r6
 8004988:	f04f 0100 	mov.w	r1, #0
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004994:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004998:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800499c:	4688      	mov	r8, r1
 800499e:	4691      	mov	r9, r2
 80049a0:	eb18 0005 	adds.w	r0, r8, r5
 80049a4:	eb49 0106 	adc.w	r1, r9, r6
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	461d      	mov	r5, r3
 80049ae:	f04f 0600 	mov.w	r6, #0
 80049b2:	196b      	adds	r3, r5, r5
 80049b4:	eb46 0406 	adc.w	r4, r6, r6
 80049b8:	461a      	mov	r2, r3
 80049ba:	4623      	mov	r3, r4
 80049bc:	f7fc f894 	bl	8000ae8 <__aeabi_uldivmod>
 80049c0:	4603      	mov	r3, r0
 80049c2:	460c      	mov	r4, r1
 80049c4:	461a      	mov	r2, r3
 80049c6:	4b47      	ldr	r3, [pc, #284]	; (8004ae4 <UART_SetConfig+0x384>)
 80049c8:	fba3 2302 	umull	r2, r3, r3, r2
 80049cc:	095b      	lsrs	r3, r3, #5
 80049ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	461d      	mov	r5, r3
 80049d6:	f04f 0600 	mov.w	r6, #0
 80049da:	46a9      	mov	r9, r5
 80049dc:	46b2      	mov	sl, r6
 80049de:	eb19 0309 	adds.w	r3, r9, r9
 80049e2:	eb4a 040a 	adc.w	r4, sl, sl
 80049e6:	4699      	mov	r9, r3
 80049e8:	46a2      	mov	sl, r4
 80049ea:	eb19 0905 	adds.w	r9, r9, r5
 80049ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80049f2:	f04f 0100 	mov.w	r1, #0
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a06:	4689      	mov	r9, r1
 8004a08:	4692      	mov	sl, r2
 8004a0a:	eb19 0005 	adds.w	r0, r9, r5
 8004a0e:	eb4a 0106 	adc.w	r1, sl, r6
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	461d      	mov	r5, r3
 8004a18:	f04f 0600 	mov.w	r6, #0
 8004a1c:	196b      	adds	r3, r5, r5
 8004a1e:	eb46 0406 	adc.w	r4, r6, r6
 8004a22:	461a      	mov	r2, r3
 8004a24:	4623      	mov	r3, r4
 8004a26:	f7fc f85f 	bl	8000ae8 <__aeabi_uldivmod>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4b2c      	ldr	r3, [pc, #176]	; (8004ae4 <UART_SetConfig+0x384>)
 8004a32:	fba3 1302 	umull	r1, r3, r3, r2
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	2164      	movs	r1, #100	; 0x64
 8004a3a:	fb01 f303 	mul.w	r3, r1, r3
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	3332      	adds	r3, #50	; 0x32
 8004a44:	4a27      	ldr	r2, [pc, #156]	; (8004ae4 <UART_SetConfig+0x384>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a52:	4498      	add	r8, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	461d      	mov	r5, r3
 8004a58:	f04f 0600 	mov.w	r6, #0
 8004a5c:	46a9      	mov	r9, r5
 8004a5e:	46b2      	mov	sl, r6
 8004a60:	eb19 0309 	adds.w	r3, r9, r9
 8004a64:	eb4a 040a 	adc.w	r4, sl, sl
 8004a68:	4699      	mov	r9, r3
 8004a6a:	46a2      	mov	sl, r4
 8004a6c:	eb19 0905 	adds.w	r9, r9, r5
 8004a70:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a74:	f04f 0100 	mov.w	r1, #0
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a88:	4689      	mov	r9, r1
 8004a8a:	4692      	mov	sl, r2
 8004a8c:	eb19 0005 	adds.w	r0, r9, r5
 8004a90:	eb4a 0106 	adc.w	r1, sl, r6
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	461d      	mov	r5, r3
 8004a9a:	f04f 0600 	mov.w	r6, #0
 8004a9e:	196b      	adds	r3, r5, r5
 8004aa0:	eb46 0406 	adc.w	r4, r6, r6
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4623      	mov	r3, r4
 8004aa8:	f7fc f81e 	bl	8000ae8 <__aeabi_uldivmod>
 8004aac:	4603      	mov	r3, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <UART_SetConfig+0x384>)
 8004ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	2164      	movs	r1, #100	; 0x64
 8004abc:	fb01 f303 	mul.w	r3, r1, r3
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	3332      	adds	r3, #50	; 0x32
 8004ac6:	4a07      	ldr	r2, [pc, #28]	; (8004ae4 <UART_SetConfig+0x384>)
 8004ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	f003 0207 	and.w	r2, r3, #7
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4442      	add	r2, r8
 8004ad8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004ada:	e1b2      	b.n	8004e42 <UART_SetConfig+0x6e2>
 8004adc:	40011000 	.word	0x40011000
 8004ae0:	40011400 	.word	0x40011400
 8004ae4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4ad7      	ldr	r2, [pc, #860]	; (8004e4c <UART_SetConfig+0x6ec>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d005      	beq.n	8004afe <UART_SetConfig+0x39e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4ad6      	ldr	r2, [pc, #856]	; (8004e50 <UART_SetConfig+0x6f0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	f040 80d1 	bne.w	8004ca0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004afe:	f7ff f989 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8004b02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	469a      	mov	sl, r3
 8004b08:	f04f 0b00 	mov.w	fp, #0
 8004b0c:	46d0      	mov	r8, sl
 8004b0e:	46d9      	mov	r9, fp
 8004b10:	eb18 0308 	adds.w	r3, r8, r8
 8004b14:	eb49 0409 	adc.w	r4, r9, r9
 8004b18:	4698      	mov	r8, r3
 8004b1a:	46a1      	mov	r9, r4
 8004b1c:	eb18 080a 	adds.w	r8, r8, sl
 8004b20:	eb49 090b 	adc.w	r9, r9, fp
 8004b24:	f04f 0100 	mov.w	r1, #0
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b38:	4688      	mov	r8, r1
 8004b3a:	4691      	mov	r9, r2
 8004b3c:	eb1a 0508 	adds.w	r5, sl, r8
 8004b40:	eb4b 0609 	adc.w	r6, fp, r9
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4619      	mov	r1, r3
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	f04f 0400 	mov.w	r4, #0
 8004b56:	0094      	lsls	r4, r2, #2
 8004b58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b5c:	008b      	lsls	r3, r1, #2
 8004b5e:	461a      	mov	r2, r3
 8004b60:	4623      	mov	r3, r4
 8004b62:	4628      	mov	r0, r5
 8004b64:	4631      	mov	r1, r6
 8004b66:	f7fb ffbf 	bl	8000ae8 <__aeabi_uldivmod>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	460c      	mov	r4, r1
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4bb8      	ldr	r3, [pc, #736]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004b72:	fba3 2302 	umull	r2, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	469b      	mov	fp, r3
 8004b80:	f04f 0c00 	mov.w	ip, #0
 8004b84:	46d9      	mov	r9, fp
 8004b86:	46e2      	mov	sl, ip
 8004b88:	eb19 0309 	adds.w	r3, r9, r9
 8004b8c:	eb4a 040a 	adc.w	r4, sl, sl
 8004b90:	4699      	mov	r9, r3
 8004b92:	46a2      	mov	sl, r4
 8004b94:	eb19 090b 	adds.w	r9, r9, fp
 8004b98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b9c:	f04f 0100 	mov.w	r1, #0
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ba8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bb0:	4689      	mov	r9, r1
 8004bb2:	4692      	mov	sl, r2
 8004bb4:	eb1b 0509 	adds.w	r5, fp, r9
 8004bb8:	eb4c 060a 	adc.w	r6, ip, sl
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	f04f 0400 	mov.w	r4, #0
 8004bce:	0094      	lsls	r4, r2, #2
 8004bd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bd4:	008b      	lsls	r3, r1, #2
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4623      	mov	r3, r4
 8004bda:	4628      	mov	r0, r5
 8004bdc:	4631      	mov	r1, r6
 8004bde:	f7fb ff83 	bl	8000ae8 <__aeabi_uldivmod>
 8004be2:	4603      	mov	r3, r0
 8004be4:	460c      	mov	r4, r1
 8004be6:	461a      	mov	r2, r3
 8004be8:	4b9a      	ldr	r3, [pc, #616]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004bea:	fba3 1302 	umull	r1, r3, r3, r2
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2164      	movs	r1, #100	; 0x64
 8004bf2:	fb01 f303 	mul.w	r3, r1, r3
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	3332      	adds	r3, #50	; 0x32
 8004bfc:	4a95      	ldr	r2, [pc, #596]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c08:	4498      	add	r8, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	469b      	mov	fp, r3
 8004c0e:	f04f 0c00 	mov.w	ip, #0
 8004c12:	46d9      	mov	r9, fp
 8004c14:	46e2      	mov	sl, ip
 8004c16:	eb19 0309 	adds.w	r3, r9, r9
 8004c1a:	eb4a 040a 	adc.w	r4, sl, sl
 8004c1e:	4699      	mov	r9, r3
 8004c20:	46a2      	mov	sl, r4
 8004c22:	eb19 090b 	adds.w	r9, r9, fp
 8004c26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c2a:	f04f 0100 	mov.w	r1, #0
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c3e:	4689      	mov	r9, r1
 8004c40:	4692      	mov	sl, r2
 8004c42:	eb1b 0509 	adds.w	r5, fp, r9
 8004c46:	eb4c 060a 	adc.w	r6, ip, sl
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	f04f 0400 	mov.w	r4, #0
 8004c5c:	0094      	lsls	r4, r2, #2
 8004c5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c62:	008b      	lsls	r3, r1, #2
 8004c64:	461a      	mov	r2, r3
 8004c66:	4623      	mov	r3, r4
 8004c68:	4628      	mov	r0, r5
 8004c6a:	4631      	mov	r1, r6
 8004c6c:	f7fb ff3c 	bl	8000ae8 <__aeabi_uldivmod>
 8004c70:	4603      	mov	r3, r0
 8004c72:	460c      	mov	r4, r1
 8004c74:	461a      	mov	r2, r3
 8004c76:	4b77      	ldr	r3, [pc, #476]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004c78:	fba3 1302 	umull	r1, r3, r3, r2
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	2164      	movs	r1, #100	; 0x64
 8004c80:	fb01 f303 	mul.w	r3, r1, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	3332      	adds	r3, #50	; 0x32
 8004c8a:	4a72      	ldr	r2, [pc, #456]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	f003 020f 	and.w	r2, r3, #15
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4442      	add	r2, r8
 8004c9c:	609a      	str	r2, [r3, #8]
 8004c9e:	e0d0      	b.n	8004e42 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ca0:	f7ff f8a4 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 8004ca4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	469a      	mov	sl, r3
 8004caa:	f04f 0b00 	mov.w	fp, #0
 8004cae:	46d0      	mov	r8, sl
 8004cb0:	46d9      	mov	r9, fp
 8004cb2:	eb18 0308 	adds.w	r3, r8, r8
 8004cb6:	eb49 0409 	adc.w	r4, r9, r9
 8004cba:	4698      	mov	r8, r3
 8004cbc:	46a1      	mov	r9, r4
 8004cbe:	eb18 080a 	adds.w	r8, r8, sl
 8004cc2:	eb49 090b 	adc.w	r9, r9, fp
 8004cc6:	f04f 0100 	mov.w	r1, #0
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004cd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004cd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004cda:	4688      	mov	r8, r1
 8004cdc:	4691      	mov	r9, r2
 8004cde:	eb1a 0508 	adds.w	r5, sl, r8
 8004ce2:	eb4b 0609 	adc.w	r6, fp, r9
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4619      	mov	r1, r3
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	f04f 0400 	mov.w	r4, #0
 8004cf8:	0094      	lsls	r4, r2, #2
 8004cfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cfe:	008b      	lsls	r3, r1, #2
 8004d00:	461a      	mov	r2, r3
 8004d02:	4623      	mov	r3, r4
 8004d04:	4628      	mov	r0, r5
 8004d06:	4631      	mov	r1, r6
 8004d08:	f7fb feee 	bl	8000ae8 <__aeabi_uldivmod>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	460c      	mov	r4, r1
 8004d10:	461a      	mov	r2, r3
 8004d12:	4b50      	ldr	r3, [pc, #320]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004d14:	fba3 2302 	umull	r2, r3, r3, r2
 8004d18:	095b      	lsrs	r3, r3, #5
 8004d1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	469b      	mov	fp, r3
 8004d22:	f04f 0c00 	mov.w	ip, #0
 8004d26:	46d9      	mov	r9, fp
 8004d28:	46e2      	mov	sl, ip
 8004d2a:	eb19 0309 	adds.w	r3, r9, r9
 8004d2e:	eb4a 040a 	adc.w	r4, sl, sl
 8004d32:	4699      	mov	r9, r3
 8004d34:	46a2      	mov	sl, r4
 8004d36:	eb19 090b 	adds.w	r9, r9, fp
 8004d3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d3e:	f04f 0100 	mov.w	r1, #0
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d52:	4689      	mov	r9, r1
 8004d54:	4692      	mov	sl, r2
 8004d56:	eb1b 0509 	adds.w	r5, fp, r9
 8004d5a:	eb4c 060a 	adc.w	r6, ip, sl
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	4619      	mov	r1, r3
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	f04f 0400 	mov.w	r4, #0
 8004d70:	0094      	lsls	r4, r2, #2
 8004d72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d76:	008b      	lsls	r3, r1, #2
 8004d78:	461a      	mov	r2, r3
 8004d7a:	4623      	mov	r3, r4
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	4631      	mov	r1, r6
 8004d80:	f7fb feb2 	bl	8000ae8 <__aeabi_uldivmod>
 8004d84:	4603      	mov	r3, r0
 8004d86:	460c      	mov	r4, r1
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4b32      	ldr	r3, [pc, #200]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	2164      	movs	r1, #100	; 0x64
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	3332      	adds	r3, #50	; 0x32
 8004d9e:	4a2d      	ldr	r2, [pc, #180]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004da0:	fba2 2303 	umull	r2, r3, r2, r3
 8004da4:	095b      	lsrs	r3, r3, #5
 8004da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004daa:	4498      	add	r8, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	469b      	mov	fp, r3
 8004db0:	f04f 0c00 	mov.w	ip, #0
 8004db4:	46d9      	mov	r9, fp
 8004db6:	46e2      	mov	sl, ip
 8004db8:	eb19 0309 	adds.w	r3, r9, r9
 8004dbc:	eb4a 040a 	adc.w	r4, sl, sl
 8004dc0:	4699      	mov	r9, r3
 8004dc2:	46a2      	mov	sl, r4
 8004dc4:	eb19 090b 	adds.w	r9, r9, fp
 8004dc8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004dcc:	f04f 0100 	mov.w	r1, #0
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ddc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004de0:	4689      	mov	r9, r1
 8004de2:	4692      	mov	sl, r2
 8004de4:	eb1b 0509 	adds.w	r5, fp, r9
 8004de8:	eb4c 060a 	adc.w	r6, ip, sl
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	4619      	mov	r1, r3
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	f04f 0400 	mov.w	r4, #0
 8004dfe:	0094      	lsls	r4, r2, #2
 8004e00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e04:	008b      	lsls	r3, r1, #2
 8004e06:	461a      	mov	r2, r3
 8004e08:	4623      	mov	r3, r4
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	4631      	mov	r1, r6
 8004e0e:	f7fb fe6b 	bl	8000ae8 <__aeabi_uldivmod>
 8004e12:	4603      	mov	r3, r0
 8004e14:	460c      	mov	r4, r1
 8004e16:	461a      	mov	r2, r3
 8004e18:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	2164      	movs	r1, #100	; 0x64
 8004e22:	fb01 f303 	mul.w	r3, r1, r3
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	3332      	adds	r3, #50	; 0x32
 8004e2c:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	f003 020f 	and.w	r2, r3, #15
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4442      	add	r2, r8
 8004e3e:	609a      	str	r2, [r3, #8]
}
 8004e40:	e7ff      	b.n	8004e42 <UART_SetConfig+0x6e2>
 8004e42:	bf00      	nop
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4c:	40011000 	.word	0x40011000
 8004e50:	40011400 	.word	0x40011400
 8004e54:	51eb851f 	.word	0x51eb851f

08004e58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e6a:	2b84      	cmp	r3, #132	; 0x84
 8004e6c:	d005      	beq.n	8004e7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004e6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4413      	add	r3, r2
 8004e76:	3303      	adds	r3, #3
 8004e78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e8e:	f3ef 8305 	mrs	r3, IPSR
 8004e92:	607b      	str	r3, [r7, #4]
  return(result);
 8004e94:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	bf14      	ite	ne
 8004e9a:	2301      	movne	r3, #1
 8004e9c:	2300      	moveq	r3, #0
 8004e9e:	b2db      	uxtb	r3, r3
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004eb0:	f001 f8a0 	bl	8005ff4 <vTaskStartScheduler>
  
  return osOK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004eba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ebc:	b089      	sub	sp, #36	; 0x24
 8004ebe:	af04      	add	r7, sp, #16
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d020      	beq.n	8004f0e <osThreadCreate+0x54>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01c      	beq.n	8004f0e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685c      	ldr	r4, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681d      	ldr	r5, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691e      	ldr	r6, [r3, #16]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff ffb6 	bl	8004e58 <makeFreeRtosPriority>
 8004eec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ef6:	9202      	str	r2, [sp, #8]
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	9100      	str	r1, [sp, #0]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	4632      	mov	r2, r6
 8004f00:	4629      	mov	r1, r5
 8004f02:	4620      	mov	r0, r4
 8004f04:	f000 fee7 	bl	8005cd6 <xTaskCreateStatic>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	e01c      	b.n	8004f48 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685c      	ldr	r4, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f1a:	b29e      	uxth	r6, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff ff98 	bl	8004e58 <makeFreeRtosPriority>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	f107 030c 	add.w	r3, r7, #12
 8004f2e:	9301      	str	r3, [sp, #4]
 8004f30:	9200      	str	r2, [sp, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	4632      	mov	r2, r6
 8004f36:	4629      	mov	r1, r5
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f000 ff26 	bl	8005d8a <xTaskCreate>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d001      	beq.n	8004f48 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	e000      	b.n	8004f4a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f48:	68fb      	ldr	r3, [r7, #12]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f52 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004f52:	b590      	push	{r4, r7, lr}
 8004f54:	b085      	sub	sp, #20
 8004f56:	af02      	add	r7, sp, #8
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d012      	beq.n	8004f8a <osMessageCreate+0x38>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00e      	beq.n	8004f8a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6859      	ldr	r1, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68dc      	ldr	r4, [r3, #12]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	4623      	mov	r3, r4
 8004f82:	f000 f9df 	bl	8005344 <xQueueGenericCreateStatic>
 8004f86:	4603      	mov	r3, r0
 8004f88:	e008      	b.n	8004f9c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	4619      	mov	r1, r3
 8004f96:	f000 fa48 	bl	800542a <xQueueGenericCreate>
 8004f9a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd90      	pop	{r4, r7, pc}

08004fa4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <osMessagePut+0x1e>
    ticks = 1;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004fc2:	f7ff ff61 	bl	8004e88 <inHandlerMode>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d018      	beq.n	8004ffe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004fcc:	f107 0210 	add.w	r2, r7, #16
 8004fd0:	f107 0108 	add.w	r1, r7, #8
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 fb80 	bl	80056dc <xQueueGenericSendFromISR>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d001      	beq.n	8004fe6 <osMessagePut+0x42>
      return osErrorOS;
 8004fe2:	23ff      	movs	r3, #255	; 0xff
 8004fe4:	e018      	b.n	8005018 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d014      	beq.n	8005016 <osMessagePut+0x72>
 8004fec:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <osMessagePut+0x7c>)
 8004fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	e00b      	b.n	8005016 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004ffe:	f107 0108 	add.w	r1, r7, #8
 8005002:	2300      	movs	r3, #0
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fa6e 	bl	80054e8 <xQueueGenericSend>
 800500c:	4603      	mov	r3, r0
 800500e:	2b01      	cmp	r3, #1
 8005010:	d001      	beq.n	8005016 <osMessagePut+0x72>
      return osErrorOS;
 8005012:	23ff      	movs	r3, #255	; 0xff
 8005014:	e000      	b.n	8005018 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	e000ed04 	.word	0xe000ed04

08005024 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005024:	b590      	push	{r4, r7, lr}
 8005026:	b08b      	sub	sp, #44	; 0x2c
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005034:	2300      	movs	r3, #0
 8005036:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800503e:	2380      	movs	r3, #128	; 0x80
 8005040:	617b      	str	r3, [r7, #20]
    return event;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	461c      	mov	r4, r3
 8005046:	f107 0314 	add.w	r3, r7, #20
 800504a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800504e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005052:	e054      	b.n	80050fe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005054:	2300      	movs	r3, #0
 8005056:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005058:	2300      	movs	r3, #0
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d103      	bne.n	800506c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005064:	f04f 33ff 	mov.w	r3, #4294967295
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
 800506a:	e009      	b.n	8005080 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d006      	beq.n	8005080 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <osMessageGet+0x5c>
      ticks = 1;
 800507c:	2301      	movs	r3, #1
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005080:	f7ff ff02 	bl	8004e88 <inHandlerMode>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d01c      	beq.n	80050c4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800508a:	f107 0220 	add.w	r2, r7, #32
 800508e:	f107 0314 	add.w	r3, r7, #20
 8005092:	3304      	adds	r3, #4
 8005094:	4619      	mov	r1, r3
 8005096:	68b8      	ldr	r0, [r7, #8]
 8005098:	f000 fc90 	bl	80059bc <xQueueReceiveFromISR>
 800509c:	4603      	mov	r3, r0
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d102      	bne.n	80050a8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80050a2:	2310      	movs	r3, #16
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	e001      	b.n	80050ac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d01d      	beq.n	80050ee <osMessageGet+0xca>
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <osMessageGet+0xe4>)
 80050b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	e014      	b.n	80050ee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80050c4:	f107 0314 	add.w	r3, r7, #20
 80050c8:	3304      	adds	r3, #4
 80050ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050cc:	4619      	mov	r1, r3
 80050ce:	68b8      	ldr	r0, [r7, #8]
 80050d0:	f000 fb98 	bl	8005804 <xQueueReceive>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d102      	bne.n	80050e0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80050da:	2310      	movs	r3, #16
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	e006      	b.n	80050ee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <osMessageGet+0xc6>
 80050e6:	2300      	movs	r3, #0
 80050e8:	e000      	b.n	80050ec <osMessageGet+0xc8>
 80050ea:	2340      	movs	r3, #64	; 0x40
 80050ec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	461c      	mov	r4, r3
 80050f2:	f107 0314 	add.w	r3, r7, #20
 80050f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	372c      	adds	r7, #44	; 0x2c
 8005102:	46bd      	mov	sp, r7
 8005104:	bd90      	pop	{r4, r7, pc}
 8005106:	bf00      	nop
 8005108:	e000ed04 	.word	0xe000ed04

0800510c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f103 0208 	add.w	r2, r3, #8
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f04f 32ff 	mov.w	r2, #4294967295
 8005124:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f103 0208 	add.w	r2, r3, #8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f103 0208 	add.w	r2, r3, #8
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005166:	b480      	push	{r7}
 8005168:	b085      	sub	sp, #20
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	601a      	str	r2, [r3, #0]
}
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c4:	d103      	bne.n	80051ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	e00c      	b.n	80051e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3308      	adds	r3, #8
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e002      	b.n	80051dc <vListInsert+0x2e>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d2f6      	bcs.n	80051d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	601a      	str	r2, [r3, #0]
}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6892      	ldr	r2, [r2, #8]
 8005236:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6852      	ldr	r2, [r2, #4]
 8005240:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	429a      	cmp	r2, r3
 800524a:	d103      	bne.n	8005254 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	1e5a      	subs	r2, r3, #1
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d109      	bne.n	800529c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	e7fe      	b.n	800529a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800529c:	f001 fcce 	bl	8006c3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a8:	68f9      	ldr	r1, [r7, #12]
 80052aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	441a      	add	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052cc:	3b01      	subs	r3, #1
 80052ce:	68f9      	ldr	r1, [r7, #12]
 80052d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052d2:	fb01 f303 	mul.w	r3, r1, r3
 80052d6:	441a      	add	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	22ff      	movs	r2, #255	; 0xff
 80052e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	22ff      	movs	r2, #255	; 0xff
 80052e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d114      	bne.n	800531c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d01a      	beq.n	8005330 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3310      	adds	r3, #16
 80052fe:	4618      	mov	r0, r3
 8005300:	f001 f8b6 	bl	8006470 <xTaskRemoveFromEventList>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d012      	beq.n	8005330 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <xQueueGenericReset+0xcc>)
 800530c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	e009      	b.n	8005330 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3310      	adds	r3, #16
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff fef3 	bl	800510c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3324      	adds	r3, #36	; 0x24
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff feee 	bl	800510c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005330:	f001 fcb2 	bl	8006c98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005334:	2301      	movs	r3, #1
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	e000ed04 	.word	0xe000ed04

08005344 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08e      	sub	sp, #56	; 0x38
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d109      	bne.n	800536c <xQueueGenericCreateStatic+0x28>
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	62bb      	str	r3, [r7, #40]	; 0x28
 800536a:	e7fe      	b.n	800536a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d109      	bne.n	8005386 <xQueueGenericCreateStatic+0x42>
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
 8005384:	e7fe      	b.n	8005384 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <xQueueGenericCreateStatic+0x4e>
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <xQueueGenericCreateStatic+0x52>
 8005392:	2301      	movs	r3, #1
 8005394:	e000      	b.n	8005398 <xQueueGenericCreateStatic+0x54>
 8005396:	2300      	movs	r3, #0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <xQueueGenericCreateStatic+0x6c>
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	623b      	str	r3, [r7, #32]
 80053ae:	e7fe      	b.n	80053ae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d102      	bne.n	80053bc <xQueueGenericCreateStatic+0x78>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <xQueueGenericCreateStatic+0x7c>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <xQueueGenericCreateStatic+0x7e>
 80053c0:	2300      	movs	r3, #0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <xQueueGenericCreateStatic+0x96>
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	61fb      	str	r3, [r7, #28]
 80053d8:	e7fe      	b.n	80053d8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053da:	2348      	movs	r3, #72	; 0x48
 80053dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b48      	cmp	r3, #72	; 0x48
 80053e2:	d009      	beq.n	80053f8 <xQueueGenericCreateStatic+0xb4>
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	e7fe      	b.n	80053f6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80053f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00d      	beq.n	8005420 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800540c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 f844 	bl	80054a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005422:	4618      	mov	r0, r3
 8005424:	3730      	adds	r7, #48	; 0x30
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800542a:	b580      	push	{r7, lr}
 800542c:	b08a      	sub	sp, #40	; 0x28
 800542e:	af02      	add	r7, sp, #8
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	4613      	mov	r3, r2
 8005436:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <xQueueGenericCreate+0x28>
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	e7fe      	b.n	8005450 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005458:	2300      	movs	r3, #0
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	e004      	b.n	8005468 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	fb02 f303 	mul.w	r3, r2, r3
 8005466:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	3348      	adds	r3, #72	; 0x48
 800546c:	4618      	mov	r0, r3
 800546e:	f001 fcff 	bl	8006e70 <pvPortMalloc>
 8005472:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d011      	beq.n	800549e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	3348      	adds	r3, #72	; 0x48
 8005482:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800548c:	79fa      	ldrb	r2, [r7, #7]
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	4613      	mov	r3, r2
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	68b9      	ldr	r1, [r7, #8]
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 f805 	bl	80054a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800549e:	69bb      	ldr	r3, [r7, #24]
	}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3720      	adds	r7, #32
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d103      	bne.n	80054c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	e002      	b.n	80054ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054d6:	2101      	movs	r1, #1
 80054d8:	69b8      	ldr	r0, [r7, #24]
 80054da:	f7ff fecb 	bl	8005274 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054de:	bf00      	nop
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08e      	sub	sp, #56	; 0x38
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054f6:	2300      	movs	r3, #0
 80054f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	2b00      	cmp	r3, #0
 8005502:	d109      	bne.n	8005518 <xQueueGenericSend+0x30>
 8005504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	62bb      	str	r3, [r7, #40]	; 0x28
 8005516:	e7fe      	b.n	8005516 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d103      	bne.n	8005526 <xQueueGenericSend+0x3e>
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <xQueueGenericSend+0x42>
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <xQueueGenericSend+0x44>
 800552a:	2300      	movs	r3, #0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d109      	bne.n	8005544 <xQueueGenericSend+0x5c>
 8005530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
 8005542:	e7fe      	b.n	8005542 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d103      	bne.n	8005552 <xQueueGenericSend+0x6a>
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <xQueueGenericSend+0x6e>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <xQueueGenericSend+0x70>
 8005556:	2300      	movs	r3, #0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d109      	bne.n	8005570 <xQueueGenericSend+0x88>
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	623b      	str	r3, [r7, #32]
 800556e:	e7fe      	b.n	800556e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005570:	f001 f934 	bl	80067dc <xTaskGetSchedulerState>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d102      	bne.n	8005580 <xQueueGenericSend+0x98>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <xQueueGenericSend+0x9c>
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <xQueueGenericSend+0x9e>
 8005584:	2300      	movs	r3, #0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d109      	bne.n	800559e <xQueueGenericSend+0xb6>
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	61fb      	str	r3, [r7, #28]
 800559c:	e7fe      	b.n	800559c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800559e:	f001 fb4d 	bl	8006c3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d302      	bcc.n	80055b4 <xQueueGenericSend+0xcc>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d129      	bne.n	8005608 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ba:	f000 fa7c 	bl	8005ab6 <prvCopyDataToQueue>
 80055be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d010      	beq.n	80055ea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	3324      	adds	r3, #36	; 0x24
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 ff4f 	bl	8006470 <xTaskRemoveFromEventList>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d013      	beq.n	8005600 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055d8:	4b3f      	ldr	r3, [pc, #252]	; (80056d8 <xQueueGenericSend+0x1f0>)
 80055da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	e00a      	b.n	8005600 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055f0:	4b39      	ldr	r3, [pc, #228]	; (80056d8 <xQueueGenericSend+0x1f0>)
 80055f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005600:	f001 fb4a 	bl	8006c98 <vPortExitCritical>
				return pdPASS;
 8005604:	2301      	movs	r3, #1
 8005606:	e063      	b.n	80056d0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d103      	bne.n	8005616 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800560e:	f001 fb43 	bl	8006c98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005612:	2300      	movs	r3, #0
 8005614:	e05c      	b.n	80056d0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005618:	2b00      	cmp	r3, #0
 800561a:	d106      	bne.n	800562a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800561c:	f107 0314 	add.w	r3, r7, #20
 8005620:	4618      	mov	r0, r3
 8005622:	f000 ff87 	bl	8006534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005626:	2301      	movs	r3, #1
 8005628:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800562a:	f001 fb35 	bl	8006c98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800562e:	f000 fd3f 	bl	80060b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005632:	f001 fb03 	bl	8006c3c <vPortEnterCritical>
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800563c:	b25b      	sxtb	r3, r3
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005642:	d103      	bne.n	800564c <xQueueGenericSend+0x164>
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005652:	b25b      	sxtb	r3, r3
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d103      	bne.n	8005662 <xQueueGenericSend+0x17a>
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005662:	f001 fb19 	bl	8006c98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005666:	1d3a      	adds	r2, r7, #4
 8005668:	f107 0314 	add.w	r3, r7, #20
 800566c:	4611      	mov	r1, r2
 800566e:	4618      	mov	r0, r3
 8005670:	f000 ff76 	bl	8006560 <xTaskCheckForTimeOut>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d124      	bne.n	80056c4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800567a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800567c:	f000 fb13 	bl	8005ca6 <prvIsQueueFull>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d018      	beq.n	80056b8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	3310      	adds	r3, #16
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	4611      	mov	r1, r2
 800568e:	4618      	mov	r0, r3
 8005690:	f000 feca 	bl	8006428 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005696:	f000 fa9e 	bl	8005bd6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800569a:	f000 fd17 	bl	80060cc <xTaskResumeAll>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f47f af7c 	bne.w	800559e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80056a6:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <xQueueGenericSend+0x1f0>)
 80056a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	e772      	b.n	800559e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ba:	f000 fa8c 	bl	8005bd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056be:	f000 fd05 	bl	80060cc <xTaskResumeAll>
 80056c2:	e76c      	b.n	800559e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056c6:	f000 fa86 	bl	8005bd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056ca:	f000 fcff 	bl	80060cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3738      	adds	r7, #56	; 0x38
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08e      	sub	sp, #56	; 0x38
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <xQueueGenericSendFromISR+0x2c>
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
 8005706:	e7fe      	b.n	8005706 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d103      	bne.n	8005716 <xQueueGenericSendFromISR+0x3a>
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <xQueueGenericSendFromISR+0x3e>
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <xQueueGenericSendFromISR+0x40>
 800571a:	2300      	movs	r3, #0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d109      	bne.n	8005734 <xQueueGenericSendFromISR+0x58>
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	623b      	str	r3, [r7, #32]
 8005732:	e7fe      	b.n	8005732 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d103      	bne.n	8005742 <xQueueGenericSendFromISR+0x66>
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <xQueueGenericSendFromISR+0x6a>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <xQueueGenericSendFromISR+0x6c>
 8005746:	2300      	movs	r3, #0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d109      	bne.n	8005760 <xQueueGenericSendFromISR+0x84>
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	e7fe      	b.n	800575e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005760:	f001 fb48 	bl	8006df4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005764:	f3ef 8211 	mrs	r2, BASEPRI
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	61ba      	str	r2, [r7, #24]
 800577a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800577c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800577e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005788:	429a      	cmp	r2, r3
 800578a:	d302      	bcc.n	8005792 <xQueueGenericSendFromISR+0xb6>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d12c      	bne.n	80057ec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057a2:	f000 f988 	bl	8005ab6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80057aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ae:	d112      	bne.n	80057d6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d016      	beq.n	80057e6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	3324      	adds	r3, #36	; 0x24
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 fe57 	bl	8006470 <xTaskRemoveFromEventList>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00e      	beq.n	80057e6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00b      	beq.n	80057e6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	e007      	b.n	80057e6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057da:	3301      	adds	r3, #1
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	b25a      	sxtb	r2, r3
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80057e6:	2301      	movs	r3, #1
 80057e8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80057ea:	e001      	b.n	80057f0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057ec:	2300      	movs	r3, #0
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
 80057f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3738      	adds	r7, #56	; 0x38
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08c      	sub	sp, #48	; 0x30
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005810:	2300      	movs	r3, #0
 8005812:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	2b00      	cmp	r3, #0
 800581c:	d109      	bne.n	8005832 <xQueueReceive+0x2e>
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	623b      	str	r3, [r7, #32]
 8005830:	e7fe      	b.n	8005830 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d103      	bne.n	8005840 <xQueueReceive+0x3c>
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <xQueueReceive+0x40>
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <xQueueReceive+0x42>
 8005844:	2300      	movs	r3, #0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d109      	bne.n	800585e <xQueueReceive+0x5a>
 800584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	61fb      	str	r3, [r7, #28]
 800585c:	e7fe      	b.n	800585c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800585e:	f000 ffbd 	bl	80067dc <xTaskGetSchedulerState>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d102      	bne.n	800586e <xQueueReceive+0x6a>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <xQueueReceive+0x6e>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <xQueueReceive+0x70>
 8005872:	2300      	movs	r3, #0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d109      	bne.n	800588c <xQueueReceive+0x88>
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e7fe      	b.n	800588a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800588c:	f001 f9d6 	bl	8006c3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01f      	beq.n	80058dc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058a0:	f000 f973 	bl	8005b8a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	1e5a      	subs	r2, r3, #1
 80058a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00f      	beq.n	80058d4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	3310      	adds	r3, #16
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 fdd9 	bl	8006470 <xTaskRemoveFromEventList>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d007      	beq.n	80058d4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058c4:	4b3c      	ldr	r3, [pc, #240]	; (80059b8 <xQueueReceive+0x1b4>)
 80058c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058d4:	f001 f9e0 	bl	8006c98 <vPortExitCritical>
				return pdPASS;
 80058d8:	2301      	movs	r3, #1
 80058da:	e069      	b.n	80059b0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058e2:	f001 f9d9 	bl	8006c98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058e6:	2300      	movs	r3, #0
 80058e8:	e062      	b.n	80059b0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d106      	bne.n	80058fe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058f0:	f107 0310 	add.w	r3, r7, #16
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fe1d 	bl	8006534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058fa:	2301      	movs	r3, #1
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058fe:	f001 f9cb 	bl	8006c98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005902:	f000 fbd5 	bl	80060b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005906:	f001 f999 	bl	8006c3c <vPortEnterCritical>
 800590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005910:	b25b      	sxtb	r3, r3
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d103      	bne.n	8005920 <xQueueReceive+0x11c>
 8005918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005926:	b25b      	sxtb	r3, r3
 8005928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592c:	d103      	bne.n	8005936 <xQueueReceive+0x132>
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005936:	f001 f9af 	bl	8006c98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800593a:	1d3a      	adds	r2, r7, #4
 800593c:	f107 0310 	add.w	r3, r7, #16
 8005940:	4611      	mov	r1, r2
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fe0c 	bl	8006560 <xTaskCheckForTimeOut>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d123      	bne.n	8005996 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800594e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005950:	f000 f993 	bl	8005c7a <prvIsQueueEmpty>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d017      	beq.n	800598a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	3324      	adds	r3, #36	; 0x24
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	4611      	mov	r1, r2
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fd60 	bl	8006428 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800596a:	f000 f934 	bl	8005bd6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800596e:	f000 fbad 	bl	80060cc <xTaskResumeAll>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d189      	bne.n	800588c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005978:	4b0f      	ldr	r3, [pc, #60]	; (80059b8 <xQueueReceive+0x1b4>)
 800597a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	e780      	b.n	800588c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800598a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800598c:	f000 f923 	bl	8005bd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005990:	f000 fb9c 	bl	80060cc <xTaskResumeAll>
 8005994:	e77a      	b.n	800588c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005998:	f000 f91d 	bl	8005bd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800599c:	f000 fb96 	bl	80060cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059a2:	f000 f96a 	bl	8005c7a <prvIsQueueEmpty>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f43f af6f 	beq.w	800588c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3730      	adds	r7, #48	; 0x30
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	e000ed04 	.word	0xe000ed04

080059bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08e      	sub	sp, #56	; 0x38
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <xQueueReceiveFromISR+0x2a>
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	623b      	str	r3, [r7, #32]
 80059e4:	e7fe      	b.n	80059e4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d103      	bne.n	80059f4 <xQueueReceiveFromISR+0x38>
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <xQueueReceiveFromISR+0x3c>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <xQueueReceiveFromISR+0x3e>
 80059f8:	2300      	movs	r3, #0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <xQueueReceiveFromISR+0x56>
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	61fb      	str	r3, [r7, #28]
 8005a10:	e7fe      	b.n	8005a10 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a12:	f001 f9ef 	bl	8006df4 <vPortValidateInterruptPriority>
	__asm volatile
 8005a16:	f3ef 8211 	mrs	r2, BASEPRI
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	61ba      	str	r2, [r7, #24]
 8005a2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005a2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d02f      	beq.n	8005a9e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a4c:	f000 f89d 	bl	8005b8a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	1e5a      	subs	r2, r3, #1
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005a58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d112      	bne.n	8005a88 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d016      	beq.n	8005a98 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	3310      	adds	r3, #16
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fcfe 	bl	8006470 <xTaskRemoveFromEventList>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00e      	beq.n	8005a98 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00b      	beq.n	8005a98 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	e007      	b.n	8005a98 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	b25a      	sxtb	r2, r3
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a9c:	e001      	b.n	8005aa2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3738      	adds	r7, #56	; 0x38
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b086      	sub	sp, #24
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10d      	bne.n	8005af0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d14d      	bne.n	8005b78 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fe99 	bl	8006818 <xTaskPriorityDisinherit>
 8005ae6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	609a      	str	r2, [r3, #8]
 8005aee:	e043      	b.n	8005b78 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d119      	bne.n	8005b2a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6858      	ldr	r0, [r3, #4]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	461a      	mov	r2, r3
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	f001 fbb5 	bl	8007270 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	441a      	add	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d32b      	bcc.n	8005b78 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	605a      	str	r2, [r3, #4]
 8005b28:	e026      	b.n	8005b78 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	68d8      	ldr	r0, [r3, #12]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	461a      	mov	r2, r3
 8005b34:	68b9      	ldr	r1, [r7, #8]
 8005b36:	f001 fb9b 	bl	8007270 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	425b      	negs	r3, r3
 8005b44:	441a      	add	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d207      	bcs.n	8005b66 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	425b      	negs	r3, r3
 8005b60:	441a      	add	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d105      	bne.n	8005b78 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b80:	697b      	ldr	r3, [r7, #20]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d018      	beq.n	8005bce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	441a      	add	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d303      	bcc.n	8005bbe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68d9      	ldr	r1, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6838      	ldr	r0, [r7, #0]
 8005bca:	f001 fb51 	bl	8007270 <memcpy>
	}
}
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bde:	f001 f82d 	bl	8006c3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005be8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bea:	e011      	b.n	8005c10 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d012      	beq.n	8005c1a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3324      	adds	r3, #36	; 0x24
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fc39 	bl	8006470 <xTaskRemoveFromEventList>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c04:	f000 fd0c 	bl	8006620 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	dce9      	bgt.n	8005bec <prvUnlockQueue+0x16>
 8005c18:	e000      	b.n	8005c1c <prvUnlockQueue+0x46>
					break;
 8005c1a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	22ff      	movs	r2, #255	; 0xff
 8005c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c24:	f001 f838 	bl	8006c98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c28:	f001 f808 	bl	8006c3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c32:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c34:	e011      	b.n	8005c5a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d012      	beq.n	8005c64 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3310      	adds	r3, #16
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fc14 	bl	8006470 <xTaskRemoveFromEventList>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c4e:	f000 fce7 	bl	8006620 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c52:	7bbb      	ldrb	r3, [r7, #14]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	dce9      	bgt.n	8005c36 <prvUnlockQueue+0x60>
 8005c62:	e000      	b.n	8005c66 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c64:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	22ff      	movs	r2, #255	; 0xff
 8005c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c6e:	f001 f813 	bl	8006c98 <vPortExitCritical>
}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c82:	f000 ffdb 	bl	8006c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d102      	bne.n	8005c94 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	e001      	b.n	8005c98 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c98:	f000 fffe 	bl	8006c98 <vPortExitCritical>

	return xReturn;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cae:	f000 ffc5 	bl	8006c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d102      	bne.n	8005cc4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	e001      	b.n	8005cc8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cc8:	f000 ffe6 	bl	8006c98 <vPortExitCritical>

	return xReturn;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b08e      	sub	sp, #56	; 0x38
 8005cda:	af04      	add	r7, sp, #16
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
 8005ce2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d109      	bne.n	8005cfe <xTaskCreateStatic+0x28>
	__asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	623b      	str	r3, [r7, #32]
 8005cfc:	e7fe      	b.n	8005cfc <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d109      	bne.n	8005d18 <xTaskCreateStatic+0x42>
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	61fb      	str	r3, [r7, #28]
 8005d16:	e7fe      	b.n	8005d16 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d18:	2354      	movs	r3, #84	; 0x54
 8005d1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	2b54      	cmp	r3, #84	; 0x54
 8005d20:	d009      	beq.n	8005d36 <xTaskCreateStatic+0x60>
 8005d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	61bb      	str	r3, [r7, #24]
 8005d34:	e7fe      	b.n	8005d34 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d01e      	beq.n	8005d7c <xTaskCreateStatic+0xa6>
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01b      	beq.n	8005d7c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	2202      	movs	r2, #2
 8005d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d56:	2300      	movs	r3, #0
 8005d58:	9303      	str	r3, [sp, #12]
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	9302      	str	r3, [sp, #8]
 8005d5e:	f107 0314 	add.w	r3, r7, #20
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	68b9      	ldr	r1, [r7, #8]
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f850 	bl	8005e14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d76:	f000 f8d3 	bl	8005f20 <prvAddNewTaskToReadyList>
 8005d7a:	e001      	b.n	8005d80 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d80:	697b      	ldr	r3, [r7, #20]
	}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3728      	adds	r7, #40	; 0x28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b08c      	sub	sp, #48	; 0x30
 8005d8e:	af04      	add	r7, sp, #16
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	603b      	str	r3, [r7, #0]
 8005d96:	4613      	mov	r3, r2
 8005d98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d9a:	88fb      	ldrh	r3, [r7, #6]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 f866 	bl	8006e70 <pvPortMalloc>
 8005da4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00e      	beq.n	8005dca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005dac:	2054      	movs	r0, #84	; 0x54
 8005dae:	f001 f85f 	bl	8006e70 <pvPortMalloc>
 8005db2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8005dc0:	e005      	b.n	8005dce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005dc2:	6978      	ldr	r0, [r7, #20]
 8005dc4:	f001 f916 	bl	8006ff4 <vPortFree>
 8005dc8:	e001      	b.n	8005dce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d017      	beq.n	8005e04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ddc:	88fa      	ldrh	r2, [r7, #6]
 8005dde:	2300      	movs	r3, #0
 8005de0:	9303      	str	r3, [sp, #12]
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	9302      	str	r3, [sp, #8]
 8005de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de8:	9301      	str	r3, [sp, #4]
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68b9      	ldr	r1, [r7, #8]
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 f80e 	bl	8005e14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005df8:	69f8      	ldr	r0, [r7, #28]
 8005dfa:	f000 f891 	bl	8005f20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	61bb      	str	r3, [r7, #24]
 8005e02:	e002      	b.n	8005e0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e04:	f04f 33ff 	mov.w	r3, #4294967295
 8005e08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e0a:	69bb      	ldr	r3, [r7, #24]
	}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3720      	adds	r7, #32
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	f023 0307 	bic.w	r3, r3, #7
 8005e3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d009      	beq.n	8005e5a <prvInitialiseNewTask+0x46>
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	e7fe      	b.n	8005e58 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d01f      	beq.n	8005ea0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e60:	2300      	movs	r3, #0
 8005e62:	61fb      	str	r3, [r7, #28]
 8005e64:	e012      	b.n	8005e8c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	7819      	ldrb	r1, [r3, #0]
 8005e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	4413      	add	r3, r2
 8005e74:	3334      	adds	r3, #52	; 0x34
 8005e76:	460a      	mov	r2, r1
 8005e78:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	4413      	add	r3, r2
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d006      	beq.n	8005e94 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	61fb      	str	r3, [r7, #28]
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	2b0f      	cmp	r3, #15
 8005e90:	d9e9      	bls.n	8005e66 <prvInitialiseNewTask+0x52>
 8005e92:	e000      	b.n	8005e96 <prvInitialiseNewTask+0x82>
			{
				break;
 8005e94:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e9e:	e003      	b.n	8005ea8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	2b06      	cmp	r3, #6
 8005eac:	d901      	bls.n	8005eb2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005eae:	2306      	movs	r3, #6
 8005eb0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eb6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ebc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff f93f 	bl	800514c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	3318      	adds	r3, #24
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7ff f93a 	bl	800514c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005edc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	f1c3 0207 	rsb	r2, r3, #7
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	68f9      	ldr	r1, [r7, #12]
 8005f00:	69b8      	ldr	r0, [r7, #24]
 8005f02:	f000 fd73 	bl	80069ec <pxPortInitialiseStack>
 8005f06:	4602      	mov	r2, r0
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f18:	bf00      	nop
 8005f1a:	3720      	adds	r7, #32
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f28:	f000 fe88 	bl	8006c3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f2c:	4b2a      	ldr	r3, [pc, #168]	; (8005fd8 <prvAddNewTaskToReadyList+0xb8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3301      	adds	r3, #1
 8005f32:	4a29      	ldr	r2, [pc, #164]	; (8005fd8 <prvAddNewTaskToReadyList+0xb8>)
 8005f34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f36:	4b29      	ldr	r3, [pc, #164]	; (8005fdc <prvAddNewTaskToReadyList+0xbc>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d109      	bne.n	8005f52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f3e:	4a27      	ldr	r2, [pc, #156]	; (8005fdc <prvAddNewTaskToReadyList+0xbc>)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f44:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <prvAddNewTaskToReadyList+0xb8>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d110      	bne.n	8005f6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f4c:	f000 fb8c 	bl	8006668 <prvInitialiseTaskLists>
 8005f50:	e00d      	b.n	8005f6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f52:	4b23      	ldr	r3, [pc, #140]	; (8005fe0 <prvAddNewTaskToReadyList+0xc0>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d109      	bne.n	8005f6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f5a:	4b20      	ldr	r3, [pc, #128]	; (8005fdc <prvAddNewTaskToReadyList+0xbc>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d802      	bhi.n	8005f6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f68:	4a1c      	ldr	r2, [pc, #112]	; (8005fdc <prvAddNewTaskToReadyList+0xbc>)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f6e:	4b1d      	ldr	r3, [pc, #116]	; (8005fe4 <prvAddNewTaskToReadyList+0xc4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3301      	adds	r3, #1
 8005f74:	4a1b      	ldr	r2, [pc, #108]	; (8005fe4 <prvAddNewTaskToReadyList+0xc4>)
 8005f76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	409a      	lsls	r2, r3
 8005f80:	4b19      	ldr	r3, [pc, #100]	; (8005fe8 <prvAddNewTaskToReadyList+0xc8>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	4a18      	ldr	r2, [pc, #96]	; (8005fe8 <prvAddNewTaskToReadyList+0xc8>)
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8e:	4613      	mov	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4a15      	ldr	r2, [pc, #84]	; (8005fec <prvAddNewTaskToReadyList+0xcc>)
 8005f98:	441a      	add	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	f7ff f8e0 	bl	8005166 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fa6:	f000 fe77 	bl	8006c98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005faa:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <prvAddNewTaskToReadyList+0xc0>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00e      	beq.n	8005fd0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fb2:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <prvAddNewTaskToReadyList+0xbc>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d207      	bcs.n	8005fd0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fc0:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <prvAddNewTaskToReadyList+0xd0>)
 8005fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	200003f0 	.word	0x200003f0
 8005fdc:	200002f0 	.word	0x200002f0
 8005fe0:	200003fc 	.word	0x200003fc
 8005fe4:	2000040c 	.word	0x2000040c
 8005fe8:	200003f8 	.word	0x200003f8
 8005fec:	200002f4 	.word	0x200002f4
 8005ff0:	e000ed04 	.word	0xe000ed04

08005ff4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b08a      	sub	sp, #40	; 0x28
 8005ff8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006002:	463a      	mov	r2, r7
 8006004:	1d39      	adds	r1, r7, #4
 8006006:	f107 0308 	add.w	r3, r7, #8
 800600a:	4618      	mov	r0, r3
 800600c:	f7fa ff48 	bl	8000ea0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	9202      	str	r2, [sp, #8]
 8006018:	9301      	str	r3, [sp, #4]
 800601a:	2300      	movs	r3, #0
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	2300      	movs	r3, #0
 8006020:	460a      	mov	r2, r1
 8006022:	491d      	ldr	r1, [pc, #116]	; (8006098 <vTaskStartScheduler+0xa4>)
 8006024:	481d      	ldr	r0, [pc, #116]	; (800609c <vTaskStartScheduler+0xa8>)
 8006026:	f7ff fe56 	bl	8005cd6 <xTaskCreateStatic>
 800602a:	4602      	mov	r2, r0
 800602c:	4b1c      	ldr	r3, [pc, #112]	; (80060a0 <vTaskStartScheduler+0xac>)
 800602e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006030:	4b1b      	ldr	r3, [pc, #108]	; (80060a0 <vTaskStartScheduler+0xac>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006038:	2301      	movs	r3, #1
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	e001      	b.n	8006042 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800603e:	2300      	movs	r3, #0
 8006040:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d115      	bne.n	8006074 <vTaskStartScheduler+0x80>
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800605a:	4b12      	ldr	r3, [pc, #72]	; (80060a4 <vTaskStartScheduler+0xb0>)
 800605c:	f04f 32ff 	mov.w	r2, #4294967295
 8006060:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006062:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <vTaskStartScheduler+0xb4>)
 8006064:	2201      	movs	r2, #1
 8006066:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006068:	4b10      	ldr	r3, [pc, #64]	; (80060ac <vTaskStartScheduler+0xb8>)
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800606e:	f000 fd47 	bl	8006b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006072:	e00d      	b.n	8006090 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d109      	bne.n	8006090 <vTaskStartScheduler+0x9c>
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	e7fe      	b.n	800608e <vTaskStartScheduler+0x9a>
}
 8006090:	bf00      	nop
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	080083f0 	.word	0x080083f0
 800609c:	08006639 	.word	0x08006639
 80060a0:	20000414 	.word	0x20000414
 80060a4:	20000410 	.word	0x20000410
 80060a8:	200003fc 	.word	0x200003fc
 80060ac:	200003f4 	.word	0x200003f4

080060b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80060b4:	4b04      	ldr	r3, [pc, #16]	; (80060c8 <vTaskSuspendAll+0x18>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3301      	adds	r3, #1
 80060ba:	4a03      	ldr	r2, [pc, #12]	; (80060c8 <vTaskSuspendAll+0x18>)
 80060bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80060be:	bf00      	nop
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	20000418 	.word	0x20000418

080060cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060da:	4b41      	ldr	r3, [pc, #260]	; (80061e0 <xTaskResumeAll+0x114>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d109      	bne.n	80060f6 <xTaskResumeAll+0x2a>
 80060e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e6:	f383 8811 	msr	BASEPRI, r3
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	603b      	str	r3, [r7, #0]
 80060f4:	e7fe      	b.n	80060f4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060f6:	f000 fda1 	bl	8006c3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060fa:	4b39      	ldr	r3, [pc, #228]	; (80061e0 <xTaskResumeAll+0x114>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3b01      	subs	r3, #1
 8006100:	4a37      	ldr	r2, [pc, #220]	; (80061e0 <xTaskResumeAll+0x114>)
 8006102:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006104:	4b36      	ldr	r3, [pc, #216]	; (80061e0 <xTaskResumeAll+0x114>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d161      	bne.n	80061d0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800610c:	4b35      	ldr	r3, [pc, #212]	; (80061e4 <xTaskResumeAll+0x118>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d05d      	beq.n	80061d0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006114:	e02e      	b.n	8006174 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006116:	4b34      	ldr	r3, [pc, #208]	; (80061e8 <xTaskResumeAll+0x11c>)
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3318      	adds	r3, #24
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff f87c 	bl	8005220 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	3304      	adds	r3, #4
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff f877 	bl	8005220 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	2201      	movs	r2, #1
 8006138:	409a      	lsls	r2, r3
 800613a:	4b2c      	ldr	r3, [pc, #176]	; (80061ec <xTaskResumeAll+0x120>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4313      	orrs	r3, r2
 8006140:	4a2a      	ldr	r2, [pc, #168]	; (80061ec <xTaskResumeAll+0x120>)
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4a27      	ldr	r2, [pc, #156]	; (80061f0 <xTaskResumeAll+0x124>)
 8006152:	441a      	add	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	3304      	adds	r3, #4
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f7ff f803 	bl	8005166 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006164:	4b23      	ldr	r3, [pc, #140]	; (80061f4 <xTaskResumeAll+0x128>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	429a      	cmp	r2, r3
 800616c:	d302      	bcc.n	8006174 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800616e:	4b22      	ldr	r3, [pc, #136]	; (80061f8 <xTaskResumeAll+0x12c>)
 8006170:	2201      	movs	r2, #1
 8006172:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006174:	4b1c      	ldr	r3, [pc, #112]	; (80061e8 <xTaskResumeAll+0x11c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1cc      	bne.n	8006116 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006182:	f000 fb0b 	bl	800679c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006186:	4b1d      	ldr	r3, [pc, #116]	; (80061fc <xTaskResumeAll+0x130>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d010      	beq.n	80061b4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006192:	f000 f837 	bl	8006204 <xTaskIncrementTick>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800619c:	4b16      	ldr	r3, [pc, #88]	; (80061f8 <xTaskResumeAll+0x12c>)
 800619e:	2201      	movs	r2, #1
 80061a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1f1      	bne.n	8006192 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80061ae:	4b13      	ldr	r3, [pc, #76]	; (80061fc <xTaskResumeAll+0x130>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061b4:	4b10      	ldr	r3, [pc, #64]	; (80061f8 <xTaskResumeAll+0x12c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d009      	beq.n	80061d0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061bc:	2301      	movs	r3, #1
 80061be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061c0:	4b0f      	ldr	r3, [pc, #60]	; (8006200 <xTaskResumeAll+0x134>)
 80061c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061d0:	f000 fd62 	bl	8006c98 <vPortExitCritical>

	return xAlreadyYielded;
 80061d4:	68bb      	ldr	r3, [r7, #8]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000418 	.word	0x20000418
 80061e4:	200003f0 	.word	0x200003f0
 80061e8:	200003b0 	.word	0x200003b0
 80061ec:	200003f8 	.word	0x200003f8
 80061f0:	200002f4 	.word	0x200002f4
 80061f4:	200002f0 	.word	0x200002f0
 80061f8:	20000404 	.word	0x20000404
 80061fc:	20000400 	.word	0x20000400
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800620a:	2300      	movs	r3, #0
 800620c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800620e:	4b4e      	ldr	r3, [pc, #312]	; (8006348 <xTaskIncrementTick+0x144>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	f040 8087 	bne.w	8006326 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006218:	4b4c      	ldr	r3, [pc, #304]	; (800634c <xTaskIncrementTick+0x148>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3301      	adds	r3, #1
 800621e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006220:	4a4a      	ldr	r2, [pc, #296]	; (800634c <xTaskIncrementTick+0x148>)
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d11f      	bne.n	800626c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800622c:	4b48      	ldr	r3, [pc, #288]	; (8006350 <xTaskIncrementTick+0x14c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d009      	beq.n	800624a <xTaskIncrementTick+0x46>
 8006236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	603b      	str	r3, [r7, #0]
 8006248:	e7fe      	b.n	8006248 <xTaskIncrementTick+0x44>
 800624a:	4b41      	ldr	r3, [pc, #260]	; (8006350 <xTaskIncrementTick+0x14c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	4b40      	ldr	r3, [pc, #256]	; (8006354 <xTaskIncrementTick+0x150>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a3e      	ldr	r2, [pc, #248]	; (8006350 <xTaskIncrementTick+0x14c>)
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	4a3e      	ldr	r2, [pc, #248]	; (8006354 <xTaskIncrementTick+0x150>)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	4b3e      	ldr	r3, [pc, #248]	; (8006358 <xTaskIncrementTick+0x154>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3301      	adds	r3, #1
 8006264:	4a3c      	ldr	r2, [pc, #240]	; (8006358 <xTaskIncrementTick+0x154>)
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	f000 fa98 	bl	800679c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800626c:	4b3b      	ldr	r3, [pc, #236]	; (800635c <xTaskIncrementTick+0x158>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	429a      	cmp	r2, r3
 8006274:	d348      	bcc.n	8006308 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006276:	4b36      	ldr	r3, [pc, #216]	; (8006350 <xTaskIncrementTick+0x14c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d104      	bne.n	800628a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006280:	4b36      	ldr	r3, [pc, #216]	; (800635c <xTaskIncrementTick+0x158>)
 8006282:	f04f 32ff 	mov.w	r2, #4294967295
 8006286:	601a      	str	r2, [r3, #0]
					break;
 8006288:	e03e      	b.n	8006308 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800628a:	4b31      	ldr	r3, [pc, #196]	; (8006350 <xTaskIncrementTick+0x14c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d203      	bcs.n	80062aa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062a2:	4a2e      	ldr	r2, [pc, #184]	; (800635c <xTaskIncrementTick+0x158>)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062a8:	e02e      	b.n	8006308 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	3304      	adds	r3, #4
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe ffb6 	bl	8005220 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d004      	beq.n	80062c6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	3318      	adds	r3, #24
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe ffad 	bl	8005220 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ca:	2201      	movs	r2, #1
 80062cc:	409a      	lsls	r2, r3
 80062ce:	4b24      	ldr	r3, [pc, #144]	; (8006360 <xTaskIncrementTick+0x15c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	4a22      	ldr	r2, [pc, #136]	; (8006360 <xTaskIncrementTick+0x15c>)
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062dc:	4613      	mov	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4a1f      	ldr	r2, [pc, #124]	; (8006364 <xTaskIncrementTick+0x160>)
 80062e6:	441a      	add	r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	3304      	adds	r3, #4
 80062ec:	4619      	mov	r1, r3
 80062ee:	4610      	mov	r0, r2
 80062f0:	f7fe ff39 	bl	8005166 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f8:	4b1b      	ldr	r3, [pc, #108]	; (8006368 <xTaskIncrementTick+0x164>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fe:	429a      	cmp	r2, r3
 8006300:	d3b9      	bcc.n	8006276 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006302:	2301      	movs	r3, #1
 8006304:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006306:	e7b6      	b.n	8006276 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006308:	4b17      	ldr	r3, [pc, #92]	; (8006368 <xTaskIncrementTick+0x164>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630e:	4915      	ldr	r1, [pc, #84]	; (8006364 <xTaskIncrementTick+0x160>)
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d907      	bls.n	8006330 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006320:	2301      	movs	r3, #1
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	e004      	b.n	8006330 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006326:	4b11      	ldr	r3, [pc, #68]	; (800636c <xTaskIncrementTick+0x168>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3301      	adds	r3, #1
 800632c:	4a0f      	ldr	r2, [pc, #60]	; (800636c <xTaskIncrementTick+0x168>)
 800632e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006330:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <xTaskIncrementTick+0x16c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006338:	2301      	movs	r3, #1
 800633a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800633c:	697b      	ldr	r3, [r7, #20]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000418 	.word	0x20000418
 800634c:	200003f4 	.word	0x200003f4
 8006350:	200003a8 	.word	0x200003a8
 8006354:	200003ac 	.word	0x200003ac
 8006358:	20000408 	.word	0x20000408
 800635c:	20000410 	.word	0x20000410
 8006360:	200003f8 	.word	0x200003f8
 8006364:	200002f4 	.word	0x200002f4
 8006368:	200002f0 	.word	0x200002f0
 800636c:	20000400 	.word	0x20000400
 8006370:	20000404 	.word	0x20000404

08006374 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800637a:	4b26      	ldr	r3, [pc, #152]	; (8006414 <vTaskSwitchContext+0xa0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006382:	4b25      	ldr	r3, [pc, #148]	; (8006418 <vTaskSwitchContext+0xa4>)
 8006384:	2201      	movs	r2, #1
 8006386:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006388:	e03e      	b.n	8006408 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800638a:	4b23      	ldr	r3, [pc, #140]	; (8006418 <vTaskSwitchContext+0xa4>)
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006390:	4b22      	ldr	r3, [pc, #136]	; (800641c <vTaskSwitchContext+0xa8>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	fab3 f383 	clz	r3, r3
 800639c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800639e:	7afb      	ldrb	r3, [r7, #11]
 80063a0:	f1c3 031f 	rsb	r3, r3, #31
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	491e      	ldr	r1, [pc, #120]	; (8006420 <vTaskSwitchContext+0xac>)
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4613      	mov	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	440b      	add	r3, r1
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d109      	bne.n	80063ce <vTaskSwitchContext+0x5a>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	607b      	str	r3, [r7, #4]
 80063cc:	e7fe      	b.n	80063cc <vTaskSwitchContext+0x58>
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4a11      	ldr	r2, [pc, #68]	; (8006420 <vTaskSwitchContext+0xac>)
 80063da:	4413      	add	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	605a      	str	r2, [r3, #4]
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	3308      	adds	r3, #8
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d104      	bne.n	80063fe <vTaskSwitchContext+0x8a>
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	605a      	str	r2, [r3, #4]
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	4a07      	ldr	r2, [pc, #28]	; (8006424 <vTaskSwitchContext+0xb0>)
 8006406:	6013      	str	r3, [r2, #0]
}
 8006408:	bf00      	nop
 800640a:	371c      	adds	r7, #28
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	20000418 	.word	0x20000418
 8006418:	20000404 	.word	0x20000404
 800641c:	200003f8 	.word	0x200003f8
 8006420:	200002f4 	.word	0x200002f4
 8006424:	200002f0 	.word	0x200002f0

08006428 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d109      	bne.n	800644c <vTaskPlaceOnEventList+0x24>
 8006438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	e7fe      	b.n	800644a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800644c:	4b07      	ldr	r3, [pc, #28]	; (800646c <vTaskPlaceOnEventList+0x44>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3318      	adds	r3, #24
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7fe feaa 	bl	80051ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800645a:	2101      	movs	r1, #1
 800645c:	6838      	ldr	r0, [r7, #0]
 800645e:	f000 fa5f 	bl	8006920 <prvAddCurrentTaskToDelayedList>
}
 8006462:	bf00      	nop
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	200002f0 	.word	0x200002f0

08006470 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d109      	bne.n	800649a <xTaskRemoveFromEventList+0x2a>
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	e7fe      	b.n	8006498 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	3318      	adds	r3, #24
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe febe 	bl	8005220 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064a4:	4b1d      	ldr	r3, [pc, #116]	; (800651c <xTaskRemoveFromEventList+0xac>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d11c      	bne.n	80064e6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	3304      	adds	r3, #4
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fe feb5 	bl	8005220 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	2201      	movs	r2, #1
 80064bc:	409a      	lsls	r2, r3
 80064be:	4b18      	ldr	r3, [pc, #96]	; (8006520 <xTaskRemoveFromEventList+0xb0>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	4a16      	ldr	r2, [pc, #88]	; (8006520 <xTaskRemoveFromEventList+0xb0>)
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4a13      	ldr	r2, [pc, #76]	; (8006524 <xTaskRemoveFromEventList+0xb4>)
 80064d6:	441a      	add	r2, r3
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	3304      	adds	r3, #4
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f7fe fe41 	bl	8005166 <vListInsertEnd>
 80064e4:	e005      	b.n	80064f2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	3318      	adds	r3, #24
 80064ea:	4619      	mov	r1, r3
 80064ec:	480e      	ldr	r0, [pc, #56]	; (8006528 <xTaskRemoveFromEventList+0xb8>)
 80064ee:	f7fe fe3a 	bl	8005166 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f6:	4b0d      	ldr	r3, [pc, #52]	; (800652c <xTaskRemoveFromEventList+0xbc>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d905      	bls.n	800650c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006500:	2301      	movs	r3, #1
 8006502:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006504:	4b0a      	ldr	r3, [pc, #40]	; (8006530 <xTaskRemoveFromEventList+0xc0>)
 8006506:	2201      	movs	r2, #1
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	e001      	b.n	8006510 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006510:	697b      	ldr	r3, [r7, #20]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000418 	.word	0x20000418
 8006520:	200003f8 	.word	0x200003f8
 8006524:	200002f4 	.word	0x200002f4
 8006528:	200003b0 	.word	0x200003b0
 800652c:	200002f0 	.word	0x200002f0
 8006530:	20000404 	.word	0x20000404

08006534 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800653c:	4b06      	ldr	r3, [pc, #24]	; (8006558 <vTaskInternalSetTimeOutState+0x24>)
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006544:	4b05      	ldr	r3, [pc, #20]	; (800655c <vTaskInternalSetTimeOutState+0x28>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	605a      	str	r2, [r3, #4]
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	20000408 	.word	0x20000408
 800655c:	200003f4 	.word	0x200003f4

08006560 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d109      	bne.n	8006584 <xTaskCheckForTimeOut+0x24>
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	613b      	str	r3, [r7, #16]
 8006582:	e7fe      	b.n	8006582 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d109      	bne.n	800659e <xTaskCheckForTimeOut+0x3e>
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	e7fe      	b.n	800659c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800659e:	f000 fb4d 	bl	8006c3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80065a2:	4b1d      	ldr	r3, [pc, #116]	; (8006618 <xTaskCheckForTimeOut+0xb8>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ba:	d102      	bne.n	80065c2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80065bc:	2300      	movs	r3, #0
 80065be:	61fb      	str	r3, [r7, #28]
 80065c0:	e023      	b.n	800660a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	4b15      	ldr	r3, [pc, #84]	; (800661c <xTaskCheckForTimeOut+0xbc>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d007      	beq.n	80065de <xTaskCheckForTimeOut+0x7e>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d302      	bcc.n	80065de <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065d8:	2301      	movs	r3, #1
 80065da:	61fb      	str	r3, [r7, #28]
 80065dc:	e015      	b.n	800660a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d20b      	bcs.n	8006600 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	1ad2      	subs	r2, r2, r3
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff ff9d 	bl	8006534 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065fa:	2300      	movs	r3, #0
 80065fc:	61fb      	str	r3, [r7, #28]
 80065fe:	e004      	b.n	800660a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006606:	2301      	movs	r3, #1
 8006608:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800660a:	f000 fb45 	bl	8006c98 <vPortExitCritical>

	return xReturn;
 800660e:	69fb      	ldr	r3, [r7, #28]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3720      	adds	r7, #32
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	200003f4 	.word	0x200003f4
 800661c:	20000408 	.word	0x20000408

08006620 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006624:	4b03      	ldr	r3, [pc, #12]	; (8006634 <vTaskMissedYield+0x14>)
 8006626:	2201      	movs	r2, #1
 8006628:	601a      	str	r2, [r3, #0]
}
 800662a:	bf00      	nop
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	20000404 	.word	0x20000404

08006638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006640:	f000 f852 	bl	80066e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006644:	4b06      	ldr	r3, [pc, #24]	; (8006660 <prvIdleTask+0x28>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d9f9      	bls.n	8006640 <prvIdleTask+0x8>
			{
				taskYIELD();
 800664c:	4b05      	ldr	r3, [pc, #20]	; (8006664 <prvIdleTask+0x2c>)
 800664e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800665c:	e7f0      	b.n	8006640 <prvIdleTask+0x8>
 800665e:	bf00      	nop
 8006660:	200002f4 	.word	0x200002f4
 8006664:	e000ed04 	.word	0xe000ed04

08006668 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800666e:	2300      	movs	r3, #0
 8006670:	607b      	str	r3, [r7, #4]
 8006672:	e00c      	b.n	800668e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4a12      	ldr	r2, [pc, #72]	; (80066c8 <prvInitialiseTaskLists+0x60>)
 8006680:	4413      	add	r3, r2
 8006682:	4618      	mov	r0, r3
 8006684:	f7fe fd42 	bl	800510c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3301      	adds	r3, #1
 800668c:	607b      	str	r3, [r7, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b06      	cmp	r3, #6
 8006692:	d9ef      	bls.n	8006674 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006694:	480d      	ldr	r0, [pc, #52]	; (80066cc <prvInitialiseTaskLists+0x64>)
 8006696:	f7fe fd39 	bl	800510c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800669a:	480d      	ldr	r0, [pc, #52]	; (80066d0 <prvInitialiseTaskLists+0x68>)
 800669c:	f7fe fd36 	bl	800510c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066a0:	480c      	ldr	r0, [pc, #48]	; (80066d4 <prvInitialiseTaskLists+0x6c>)
 80066a2:	f7fe fd33 	bl	800510c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066a6:	480c      	ldr	r0, [pc, #48]	; (80066d8 <prvInitialiseTaskLists+0x70>)
 80066a8:	f7fe fd30 	bl	800510c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066ac:	480b      	ldr	r0, [pc, #44]	; (80066dc <prvInitialiseTaskLists+0x74>)
 80066ae:	f7fe fd2d 	bl	800510c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066b2:	4b0b      	ldr	r3, [pc, #44]	; (80066e0 <prvInitialiseTaskLists+0x78>)
 80066b4:	4a05      	ldr	r2, [pc, #20]	; (80066cc <prvInitialiseTaskLists+0x64>)
 80066b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066b8:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <prvInitialiseTaskLists+0x7c>)
 80066ba:	4a05      	ldr	r2, [pc, #20]	; (80066d0 <prvInitialiseTaskLists+0x68>)
 80066bc:	601a      	str	r2, [r3, #0]
}
 80066be:	bf00      	nop
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	200002f4 	.word	0x200002f4
 80066cc:	20000380 	.word	0x20000380
 80066d0:	20000394 	.word	0x20000394
 80066d4:	200003b0 	.word	0x200003b0
 80066d8:	200003c4 	.word	0x200003c4
 80066dc:	200003dc 	.word	0x200003dc
 80066e0:	200003a8 	.word	0x200003a8
 80066e4:	200003ac 	.word	0x200003ac

080066e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066ee:	e019      	b.n	8006724 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066f0:	f000 faa4 	bl	8006c3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f4:	4b0f      	ldr	r3, [pc, #60]	; (8006734 <prvCheckTasksWaitingTermination+0x4c>)
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3304      	adds	r3, #4
 8006700:	4618      	mov	r0, r3
 8006702:	f7fe fd8d 	bl	8005220 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006706:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <prvCheckTasksWaitingTermination+0x50>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3b01      	subs	r3, #1
 800670c:	4a0a      	ldr	r2, [pc, #40]	; (8006738 <prvCheckTasksWaitingTermination+0x50>)
 800670e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006710:	4b0a      	ldr	r3, [pc, #40]	; (800673c <prvCheckTasksWaitingTermination+0x54>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3b01      	subs	r3, #1
 8006716:	4a09      	ldr	r2, [pc, #36]	; (800673c <prvCheckTasksWaitingTermination+0x54>)
 8006718:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800671a:	f000 fabd 	bl	8006c98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f80e 	bl	8006740 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <prvCheckTasksWaitingTermination+0x54>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e1      	bne.n	80066f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800672c:	bf00      	nop
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	200003c4 	.word	0x200003c4
 8006738:	200003f0 	.word	0x200003f0
 800673c:	200003d8 	.word	0x200003d8

08006740 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800674e:	2b00      	cmp	r3, #0
 8006750:	d108      	bne.n	8006764 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fc4c 	bl	8006ff4 <vPortFree>
				vPortFree( pxTCB );
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fc49 	bl	8006ff4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006762:	e017      	b.n	8006794 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800676a:	2b01      	cmp	r3, #1
 800676c:	d103      	bne.n	8006776 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fc40 	bl	8006ff4 <vPortFree>
	}
 8006774:	e00e      	b.n	8006794 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800677c:	2b02      	cmp	r3, #2
 800677e:	d009      	beq.n	8006794 <prvDeleteTCB+0x54>
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	e7fe      	b.n	8006792 <prvDeleteTCB+0x52>
	}
 8006794:	bf00      	nop
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067a2:	4b0c      	ldr	r3, [pc, #48]	; (80067d4 <prvResetNextTaskUnblockTime+0x38>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d104      	bne.n	80067b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067ac:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <prvResetNextTaskUnblockTime+0x3c>)
 80067ae:	f04f 32ff 	mov.w	r2, #4294967295
 80067b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067b4:	e008      	b.n	80067c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067b6:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <prvResetNextTaskUnblockTime+0x38>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	4a04      	ldr	r2, [pc, #16]	; (80067d8 <prvResetNextTaskUnblockTime+0x3c>)
 80067c6:	6013      	str	r3, [r2, #0]
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	200003a8 	.word	0x200003a8
 80067d8:	20000410 	.word	0x20000410

080067dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067e2:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <xTaskGetSchedulerState+0x34>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d102      	bne.n	80067f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067ea:	2301      	movs	r3, #1
 80067ec:	607b      	str	r3, [r7, #4]
 80067ee:	e008      	b.n	8006802 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067f0:	4b08      	ldr	r3, [pc, #32]	; (8006814 <xTaskGetSchedulerState+0x38>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d102      	bne.n	80067fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067f8:	2302      	movs	r3, #2
 80067fa:	607b      	str	r3, [r7, #4]
 80067fc:	e001      	b.n	8006802 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067fe:	2300      	movs	r3, #0
 8006800:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006802:	687b      	ldr	r3, [r7, #4]
	}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	200003fc 	.word	0x200003fc
 8006814:	20000418 	.word	0x20000418

08006818 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006824:	2300      	movs	r3, #0
 8006826:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d06c      	beq.n	8006908 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800682e:	4b39      	ldr	r3, [pc, #228]	; (8006914 <xTaskPriorityDisinherit+0xfc>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	429a      	cmp	r2, r3
 8006836:	d009      	beq.n	800684c <xTaskPriorityDisinherit+0x34>
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	e7fe      	b.n	800684a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006850:	2b00      	cmp	r3, #0
 8006852:	d109      	bne.n	8006868 <xTaskPriorityDisinherit+0x50>
 8006854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	60bb      	str	r3, [r7, #8]
 8006866:	e7fe      	b.n	8006866 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800686c:	1e5a      	subs	r2, r3, #1
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687a:	429a      	cmp	r2, r3
 800687c:	d044      	beq.n	8006908 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006882:	2b00      	cmp	r3, #0
 8006884:	d140      	bne.n	8006908 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	3304      	adds	r3, #4
 800688a:	4618      	mov	r0, r3
 800688c:	f7fe fcc8 	bl	8005220 <uxListRemove>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d115      	bne.n	80068c2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689a:	491f      	ldr	r1, [pc, #124]	; (8006918 <xTaskPriorityDisinherit+0x100>)
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	440b      	add	r3, r1
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <xTaskPriorityDisinherit+0xaa>
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	2201      	movs	r2, #1
 80068b2:	fa02 f303 	lsl.w	r3, r2, r3
 80068b6:	43da      	mvns	r2, r3
 80068b8:	4b18      	ldr	r3, [pc, #96]	; (800691c <xTaskPriorityDisinherit+0x104>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4013      	ands	r3, r2
 80068be:	4a17      	ldr	r2, [pc, #92]	; (800691c <xTaskPriorityDisinherit+0x104>)
 80068c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ce:	f1c3 0207 	rsb	r2, r3, #7
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068da:	2201      	movs	r2, #1
 80068dc:	409a      	lsls	r2, r3
 80068de:	4b0f      	ldr	r3, [pc, #60]	; (800691c <xTaskPriorityDisinherit+0x104>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	4a0d      	ldr	r2, [pc, #52]	; (800691c <xTaskPriorityDisinherit+0x104>)
 80068e6:	6013      	str	r3, [r2, #0]
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4a08      	ldr	r2, [pc, #32]	; (8006918 <xTaskPriorityDisinherit+0x100>)
 80068f6:	441a      	add	r2, r3
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	3304      	adds	r3, #4
 80068fc:	4619      	mov	r1, r3
 80068fe:	4610      	mov	r0, r2
 8006900:	f7fe fc31 	bl	8005166 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006904:	2301      	movs	r3, #1
 8006906:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006908:	697b      	ldr	r3, [r7, #20]
	}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	200002f0 	.word	0x200002f0
 8006918:	200002f4 	.word	0x200002f4
 800691c:	200003f8 	.word	0x200003f8

08006920 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800692a:	4b29      	ldr	r3, [pc, #164]	; (80069d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006930:	4b28      	ldr	r3, [pc, #160]	; (80069d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3304      	adds	r3, #4
 8006936:	4618      	mov	r0, r3
 8006938:	f7fe fc72 	bl	8005220 <uxListRemove>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10b      	bne.n	800695a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006942:	4b24      	ldr	r3, [pc, #144]	; (80069d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006948:	2201      	movs	r2, #1
 800694a:	fa02 f303 	lsl.w	r3, r2, r3
 800694e:	43da      	mvns	r2, r3
 8006950:	4b21      	ldr	r3, [pc, #132]	; (80069d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4013      	ands	r3, r2
 8006956:	4a20      	ldr	r2, [pc, #128]	; (80069d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006958:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d10a      	bne.n	8006978 <prvAddCurrentTaskToDelayedList+0x58>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d007      	beq.n	8006978 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006968:	4b1a      	ldr	r3, [pc, #104]	; (80069d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3304      	adds	r3, #4
 800696e:	4619      	mov	r1, r3
 8006970:	481a      	ldr	r0, [pc, #104]	; (80069dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006972:	f7fe fbf8 	bl	8005166 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006976:	e026      	b.n	80069c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4413      	add	r3, r2
 800697e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006980:	4b14      	ldr	r3, [pc, #80]	; (80069d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	429a      	cmp	r2, r3
 800698e:	d209      	bcs.n	80069a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006990:	4b13      	ldr	r3, [pc, #76]	; (80069e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	4b0f      	ldr	r3, [pc, #60]	; (80069d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3304      	adds	r3, #4
 800699a:	4619      	mov	r1, r3
 800699c:	4610      	mov	r0, r2
 800699e:	f7fe fc06 	bl	80051ae <vListInsert>
}
 80069a2:	e010      	b.n	80069c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069a4:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3304      	adds	r3, #4
 80069ae:	4619      	mov	r1, r3
 80069b0:	4610      	mov	r0, r2
 80069b2:	f7fe fbfc 	bl	80051ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069b6:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d202      	bcs.n	80069c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80069c0:	4a09      	ldr	r2, [pc, #36]	; (80069e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	6013      	str	r3, [r2, #0]
}
 80069c6:	bf00      	nop
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	200003f4 	.word	0x200003f4
 80069d4:	200002f0 	.word	0x200002f0
 80069d8:	200003f8 	.word	0x200003f8
 80069dc:	200003dc 	.word	0x200003dc
 80069e0:	200003ac 	.word	0x200003ac
 80069e4:	200003a8 	.word	0x200003a8
 80069e8:	20000410 	.word	0x20000410

080069ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3b04      	subs	r3, #4
 80069fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3b04      	subs	r3, #4
 8006a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f023 0201 	bic.w	r2, r3, #1
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3b04      	subs	r3, #4
 8006a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a1c:	4a0c      	ldr	r2, [pc, #48]	; (8006a50 <pxPortInitialiseStack+0x64>)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3b14      	subs	r3, #20
 8006a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3b04      	subs	r3, #4
 8006a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f06f 0202 	mvn.w	r2, #2
 8006a3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	3b20      	subs	r3, #32
 8006a40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a42:	68fb      	ldr	r3, [r7, #12]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	08006a55 	.word	0x08006a55

08006a54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a5e:	4b11      	ldr	r3, [pc, #68]	; (8006aa4 <prvTaskExitError+0x50>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a66:	d009      	beq.n	8006a7c <prvTaskExitError+0x28>
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	e7fe      	b.n	8006a7a <prvTaskExitError+0x26>
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a8e:	bf00      	nop
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0fc      	beq.n	8006a90 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a96:	bf00      	nop
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	2000000c 	.word	0x2000000c
	...

08006ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ab0:	4b07      	ldr	r3, [pc, #28]	; (8006ad0 <pxCurrentTCBConst2>)
 8006ab2:	6819      	ldr	r1, [r3, #0]
 8006ab4:	6808      	ldr	r0, [r1, #0]
 8006ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aba:	f380 8809 	msr	PSP, r0
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f04f 0000 	mov.w	r0, #0
 8006ac6:	f380 8811 	msr	BASEPRI, r0
 8006aca:	4770      	bx	lr
 8006acc:	f3af 8000 	nop.w

08006ad0 <pxCurrentTCBConst2>:
 8006ad0:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop

08006ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ad8:	4808      	ldr	r0, [pc, #32]	; (8006afc <prvPortStartFirstTask+0x24>)
 8006ada:	6800      	ldr	r0, [r0, #0]
 8006adc:	6800      	ldr	r0, [r0, #0]
 8006ade:	f380 8808 	msr	MSP, r0
 8006ae2:	f04f 0000 	mov.w	r0, #0
 8006ae6:	f380 8814 	msr	CONTROL, r0
 8006aea:	b662      	cpsie	i
 8006aec:	b661      	cpsie	f
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	df00      	svc	0
 8006af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006afa:	bf00      	nop
 8006afc:	e000ed08 	.word	0xe000ed08

08006b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b06:	4b44      	ldr	r3, [pc, #272]	; (8006c18 <xPortStartScheduler+0x118>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a44      	ldr	r2, [pc, #272]	; (8006c1c <xPortStartScheduler+0x11c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d109      	bne.n	8006b24 <xPortStartScheduler+0x24>
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	e7fe      	b.n	8006b22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b24:	4b3c      	ldr	r3, [pc, #240]	; (8006c18 <xPortStartScheduler+0x118>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a3d      	ldr	r2, [pc, #244]	; (8006c20 <xPortStartScheduler+0x120>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d109      	bne.n	8006b42 <xPortStartScheduler+0x42>
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	e7fe      	b.n	8006b40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b42:	4b38      	ldr	r3, [pc, #224]	; (8006c24 <xPortStartScheduler+0x124>)
 8006b44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	22ff      	movs	r2, #255	; 0xff
 8006b52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b5c:	78fb      	ldrb	r3, [r7, #3]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	4b30      	ldr	r3, [pc, #192]	; (8006c28 <xPortStartScheduler+0x128>)
 8006b68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b6a:	4b30      	ldr	r3, [pc, #192]	; (8006c2c <xPortStartScheduler+0x12c>)
 8006b6c:	2207      	movs	r2, #7
 8006b6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b70:	e009      	b.n	8006b86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006b72:	4b2e      	ldr	r3, [pc, #184]	; (8006c2c <xPortStartScheduler+0x12c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	4a2c      	ldr	r2, [pc, #176]	; (8006c2c <xPortStartScheduler+0x12c>)
 8006b7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b86:	78fb      	ldrb	r3, [r7, #3]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8e:	2b80      	cmp	r3, #128	; 0x80
 8006b90:	d0ef      	beq.n	8006b72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b92:	4b26      	ldr	r3, [pc, #152]	; (8006c2c <xPortStartScheduler+0x12c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f1c3 0307 	rsb	r3, r3, #7
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d009      	beq.n	8006bb2 <xPortStartScheduler+0xb2>
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	60bb      	str	r3, [r7, #8]
 8006bb0:	e7fe      	b.n	8006bb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bb2:	4b1e      	ldr	r3, [pc, #120]	; (8006c2c <xPortStartScheduler+0x12c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	021b      	lsls	r3, r3, #8
 8006bb8:	4a1c      	ldr	r2, [pc, #112]	; (8006c2c <xPortStartScheduler+0x12c>)
 8006bba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bbc:	4b1b      	ldr	r3, [pc, #108]	; (8006c2c <xPortStartScheduler+0x12c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bc4:	4a19      	ldr	r2, [pc, #100]	; (8006c2c <xPortStartScheduler+0x12c>)
 8006bc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bd0:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <xPortStartScheduler+0x130>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a16      	ldr	r2, [pc, #88]	; (8006c30 <xPortStartScheduler+0x130>)
 8006bd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006bdc:	4b14      	ldr	r3, [pc, #80]	; (8006c30 <xPortStartScheduler+0x130>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a13      	ldr	r2, [pc, #76]	; (8006c30 <xPortStartScheduler+0x130>)
 8006be2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006be6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006be8:	f000 f8d6 	bl	8006d98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006bec:	4b11      	ldr	r3, [pc, #68]	; (8006c34 <xPortStartScheduler+0x134>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006bf2:	f000 f8f5 	bl	8006de0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006bf6:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <xPortStartScheduler+0x138>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a0f      	ldr	r2, [pc, #60]	; (8006c38 <xPortStartScheduler+0x138>)
 8006bfc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c02:	f7ff ff69 	bl	8006ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c06:	f7ff fbb5 	bl	8006374 <vTaskSwitchContext>
	prvTaskExitError();
 8006c0a:	f7ff ff23 	bl	8006a54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	e000ed00 	.word	0xe000ed00
 8006c1c:	410fc271 	.word	0x410fc271
 8006c20:	410fc270 	.word	0x410fc270
 8006c24:	e000e400 	.word	0xe000e400
 8006c28:	2000041c 	.word	0x2000041c
 8006c2c:	20000420 	.word	0x20000420
 8006c30:	e000ed20 	.word	0xe000ed20
 8006c34:	2000000c 	.word	0x2000000c
 8006c38:	e000ef34 	.word	0xe000ef34

08006c3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c54:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <vPortEnterCritical+0x54>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	4a0d      	ldr	r2, [pc, #52]	; (8006c90 <vPortEnterCritical+0x54>)
 8006c5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <vPortEnterCritical+0x54>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d10e      	bne.n	8006c84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c66:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <vPortEnterCritical+0x58>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d009      	beq.n	8006c84 <vPortEnterCritical+0x48>
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	603b      	str	r3, [r7, #0]
 8006c82:	e7fe      	b.n	8006c82 <vPortEnterCritical+0x46>
	}
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	2000000c 	.word	0x2000000c
 8006c94:	e000ed04 	.word	0xe000ed04

08006c98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c9e:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <vPortExitCritical+0x4c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d109      	bne.n	8006cba <vPortExitCritical+0x22>
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	607b      	str	r3, [r7, #4]
 8006cb8:	e7fe      	b.n	8006cb8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006cba:	4b0a      	ldr	r3, [pc, #40]	; (8006ce4 <vPortExitCritical+0x4c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	4a08      	ldr	r2, [pc, #32]	; (8006ce4 <vPortExitCritical+0x4c>)
 8006cc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006cc4:	4b07      	ldr	r3, [pc, #28]	; (8006ce4 <vPortExitCritical+0x4c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d104      	bne.n	8006cd6 <vPortExitCritical+0x3e>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006cd6:	bf00      	nop
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	2000000c 	.word	0x2000000c
	...

08006cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006cf0:	f3ef 8009 	mrs	r0, PSP
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	4b15      	ldr	r3, [pc, #84]	; (8006d50 <pxCurrentTCBConst>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	f01e 0f10 	tst.w	lr, #16
 8006d00:	bf08      	it	eq
 8006d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0a:	6010      	str	r0, [r2, #0]
 8006d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d14:	f380 8811 	msr	BASEPRI, r0
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f7ff fb28 	bl	8006374 <vTaskSwitchContext>
 8006d24:	f04f 0000 	mov.w	r0, #0
 8006d28:	f380 8811 	msr	BASEPRI, r0
 8006d2c:	bc09      	pop	{r0, r3}
 8006d2e:	6819      	ldr	r1, [r3, #0]
 8006d30:	6808      	ldr	r0, [r1, #0]
 8006d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d36:	f01e 0f10 	tst.w	lr, #16
 8006d3a:	bf08      	it	eq
 8006d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d40:	f380 8809 	msr	PSP, r0
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	f3af 8000 	nop.w

08006d50 <pxCurrentTCBConst>:
 8006d50:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop

08006d58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d70:	f7ff fa48 	bl	8006204 <xTaskIncrementTick>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d7a:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <xPortSysTickHandler+0x3c>)
 8006d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	2300      	movs	r3, #0
 8006d84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d8c:	bf00      	nop
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	e000ed04 	.word	0xe000ed04

08006d98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d9c:	4b0b      	ldr	r3, [pc, #44]	; (8006dcc <vPortSetupTimerInterrupt+0x34>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006da2:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <vPortSetupTimerInterrupt+0x38>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006da8:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <vPortSetupTimerInterrupt+0x3c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a0a      	ldr	r2, [pc, #40]	; (8006dd8 <vPortSetupTimerInterrupt+0x40>)
 8006dae:	fba2 2303 	umull	r2, r3, r2, r3
 8006db2:	099b      	lsrs	r3, r3, #6
 8006db4:	4a09      	ldr	r2, [pc, #36]	; (8006ddc <vPortSetupTimerInterrupt+0x44>)
 8006db6:	3b01      	subs	r3, #1
 8006db8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dba:	4b04      	ldr	r3, [pc, #16]	; (8006dcc <vPortSetupTimerInterrupt+0x34>)
 8006dbc:	2207      	movs	r2, #7
 8006dbe:	601a      	str	r2, [r3, #0]
}
 8006dc0:	bf00      	nop
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	e000e010 	.word	0xe000e010
 8006dd0:	e000e018 	.word	0xe000e018
 8006dd4:	20000000 	.word	0x20000000
 8006dd8:	10624dd3 	.word	0x10624dd3
 8006ddc:	e000e014 	.word	0xe000e014

08006de0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006de0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006df0 <vPortEnableVFP+0x10>
 8006de4:	6801      	ldr	r1, [r0, #0]
 8006de6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006dea:	6001      	str	r1, [r0, #0]
 8006dec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006dee:	bf00      	nop
 8006df0:	e000ed88 	.word	0xe000ed88

08006df4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dfa:	f3ef 8305 	mrs	r3, IPSR
 8006dfe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b0f      	cmp	r3, #15
 8006e04:	d913      	bls.n	8006e2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e06:	4a16      	ldr	r2, [pc, #88]	; (8006e60 <vPortValidateInterruptPriority+0x6c>)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e10:	4b14      	ldr	r3, [pc, #80]	; (8006e64 <vPortValidateInterruptPriority+0x70>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	7afa      	ldrb	r2, [r7, #11]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d209      	bcs.n	8006e2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	607b      	str	r3, [r7, #4]
 8006e2c:	e7fe      	b.n	8006e2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e2e:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <vPortValidateInterruptPriority+0x74>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e36:	4b0d      	ldr	r3, [pc, #52]	; (8006e6c <vPortValidateInterruptPriority+0x78>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d909      	bls.n	8006e52 <vPortValidateInterruptPriority+0x5e>
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	603b      	str	r3, [r7, #0]
 8006e50:	e7fe      	b.n	8006e50 <vPortValidateInterruptPriority+0x5c>
	}
 8006e52:	bf00      	nop
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	e000e3f0 	.word	0xe000e3f0
 8006e64:	2000041c 	.word	0x2000041c
 8006e68:	e000ed0c 	.word	0xe000ed0c
 8006e6c:	20000420 	.word	0x20000420

08006e70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08a      	sub	sp, #40	; 0x28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e7c:	f7ff f918 	bl	80060b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e80:	4b57      	ldr	r3, [pc, #348]	; (8006fe0 <pvPortMalloc+0x170>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e88:	f000 f90c 	bl	80070a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e8c:	4b55      	ldr	r3, [pc, #340]	; (8006fe4 <pvPortMalloc+0x174>)
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4013      	ands	r3, r2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f040 808c 	bne.w	8006fb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d01c      	beq.n	8006eda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f003 0307 	and.w	r3, r3, #7
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d013      	beq.n	8006eda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f023 0307 	bic.w	r3, r3, #7
 8006eb8:	3308      	adds	r3, #8
 8006eba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f003 0307 	and.w	r3, r3, #7
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d009      	beq.n	8006eda <pvPortMalloc+0x6a>
 8006ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	e7fe      	b.n	8006ed8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d068      	beq.n	8006fb2 <pvPortMalloc+0x142>
 8006ee0:	4b41      	ldr	r3, [pc, #260]	; (8006fe8 <pvPortMalloc+0x178>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d863      	bhi.n	8006fb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006eea:	4b40      	ldr	r3, [pc, #256]	; (8006fec <pvPortMalloc+0x17c>)
 8006eec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006eee:	4b3f      	ldr	r3, [pc, #252]	; (8006fec <pvPortMalloc+0x17c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ef4:	e004      	b.n	8006f00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d903      	bls.n	8006f12 <pvPortMalloc+0xa2>
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f1      	bne.n	8006ef6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f12:	4b33      	ldr	r3, [pc, #204]	; (8006fe0 <pvPortMalloc+0x170>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d04a      	beq.n	8006fb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2208      	movs	r2, #8
 8006f22:	4413      	add	r3, r2
 8006f24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	1ad2      	subs	r2, r2, r3
 8006f36:	2308      	movs	r3, #8
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d91e      	bls.n	8006f7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4413      	add	r3, r2
 8006f44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d009      	beq.n	8006f64 <pvPortMalloc+0xf4>
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	613b      	str	r3, [r7, #16]
 8006f62:	e7fe      	b.n	8006f62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	1ad2      	subs	r2, r2, r3
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f76:	69b8      	ldr	r0, [r7, #24]
 8006f78:	f000 f8f6 	bl	8007168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f7c:	4b1a      	ldr	r3, [pc, #104]	; (8006fe8 <pvPortMalloc+0x178>)
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	4a18      	ldr	r2, [pc, #96]	; (8006fe8 <pvPortMalloc+0x178>)
 8006f88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f8a:	4b17      	ldr	r3, [pc, #92]	; (8006fe8 <pvPortMalloc+0x178>)
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	4b18      	ldr	r3, [pc, #96]	; (8006ff0 <pvPortMalloc+0x180>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d203      	bcs.n	8006f9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f96:	4b14      	ldr	r3, [pc, #80]	; (8006fe8 <pvPortMalloc+0x178>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a15      	ldr	r2, [pc, #84]	; (8006ff0 <pvPortMalloc+0x180>)
 8006f9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	4b10      	ldr	r3, [pc, #64]	; (8006fe4 <pvPortMalloc+0x174>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	2200      	movs	r2, #0
 8006fb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fb2:	f7ff f88b 	bl	80060cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d009      	beq.n	8006fd4 <pvPortMalloc+0x164>
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	e7fe      	b.n	8006fd2 <pvPortMalloc+0x162>
	return pvReturn;
 8006fd4:	69fb      	ldr	r3, [r7, #28]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3728      	adds	r7, #40	; 0x28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	2000402c 	.word	0x2000402c
 8006fe4:	20004038 	.word	0x20004038
 8006fe8:	20004030 	.word	0x20004030
 8006fec:	20004024 	.word	0x20004024
 8006ff0:	20004034 	.word	0x20004034

08006ff4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d046      	beq.n	8007094 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007006:	2308      	movs	r3, #8
 8007008:	425b      	negs	r3, r3
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	4413      	add	r3, r2
 800700e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	4b20      	ldr	r3, [pc, #128]	; (800709c <vPortFree+0xa8>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4013      	ands	r3, r2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d109      	bne.n	8007036 <vPortFree+0x42>
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	e7fe      	b.n	8007034 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d009      	beq.n	8007052 <vPortFree+0x5e>
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	60bb      	str	r3, [r7, #8]
 8007050:	e7fe      	b.n	8007050 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	4b11      	ldr	r3, [pc, #68]	; (800709c <vPortFree+0xa8>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4013      	ands	r3, r2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d019      	beq.n	8007094 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d115      	bne.n	8007094 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	4b0b      	ldr	r3, [pc, #44]	; (800709c <vPortFree+0xa8>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	43db      	mvns	r3, r3
 8007072:	401a      	ands	r2, r3
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007078:	f7ff f81a 	bl	80060b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	4b07      	ldr	r3, [pc, #28]	; (80070a0 <vPortFree+0xac>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4413      	add	r3, r2
 8007086:	4a06      	ldr	r2, [pc, #24]	; (80070a0 <vPortFree+0xac>)
 8007088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800708a:	6938      	ldr	r0, [r7, #16]
 800708c:	f000 f86c 	bl	8007168 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007090:	f7ff f81c 	bl	80060cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007094:	bf00      	nop
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	20004038 	.word	0x20004038
 80070a0:	20004030 	.word	0x20004030

080070a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80070ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070b0:	4b27      	ldr	r3, [pc, #156]	; (8007150 <prvHeapInit+0xac>)
 80070b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00c      	beq.n	80070d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3307      	adds	r3, #7
 80070c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0307 	bic.w	r3, r3, #7
 80070ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	4a1f      	ldr	r2, [pc, #124]	; (8007150 <prvHeapInit+0xac>)
 80070d4:	4413      	add	r3, r2
 80070d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070dc:	4a1d      	ldr	r2, [pc, #116]	; (8007154 <prvHeapInit+0xb0>)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070e2:	4b1c      	ldr	r3, [pc, #112]	; (8007154 <prvHeapInit+0xb0>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	4413      	add	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070f0:	2208      	movs	r2, #8
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	1a9b      	subs	r3, r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0307 	bic.w	r3, r3, #7
 80070fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4a15      	ldr	r2, [pc, #84]	; (8007158 <prvHeapInit+0xb4>)
 8007104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007106:	4b14      	ldr	r3, [pc, #80]	; (8007158 <prvHeapInit+0xb4>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2200      	movs	r2, #0
 800710c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800710e:	4b12      	ldr	r3, [pc, #72]	; (8007158 <prvHeapInit+0xb4>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	1ad2      	subs	r2, r2, r3
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007124:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <prvHeapInit+0xb4>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	4a0a      	ldr	r2, [pc, #40]	; (800715c <prvHeapInit+0xb8>)
 8007132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	4a09      	ldr	r2, [pc, #36]	; (8007160 <prvHeapInit+0xbc>)
 800713a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800713c:	4b09      	ldr	r3, [pc, #36]	; (8007164 <prvHeapInit+0xc0>)
 800713e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007142:	601a      	str	r2, [r3, #0]
}
 8007144:	bf00      	nop
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	20000424 	.word	0x20000424
 8007154:	20004024 	.word	0x20004024
 8007158:	2000402c 	.word	0x2000402c
 800715c:	20004034 	.word	0x20004034
 8007160:	20004030 	.word	0x20004030
 8007164:	20004038 	.word	0x20004038

08007168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007170:	4b28      	ldr	r3, [pc, #160]	; (8007214 <prvInsertBlockIntoFreeList+0xac>)
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	e002      	b.n	800717c <prvInsertBlockIntoFreeList+0x14>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	429a      	cmp	r2, r3
 8007184:	d8f7      	bhi.n	8007176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	4413      	add	r3, r2
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	429a      	cmp	r2, r3
 8007196:	d108      	bne.n	80071aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	441a      	add	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	441a      	add	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d118      	bne.n	80071f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	4b15      	ldr	r3, [pc, #84]	; (8007218 <prvInsertBlockIntoFreeList+0xb0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d00d      	beq.n	80071e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	441a      	add	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	e008      	b.n	80071f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071e6:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <prvInsertBlockIntoFreeList+0xb0>)
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	e003      	b.n	80071f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d002      	beq.n	8007206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007206:	bf00      	nop
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	20004024 	.word	0x20004024
 8007218:	2000402c 	.word	0x2000402c

0800721c <__errno>:
 800721c:	4b01      	ldr	r3, [pc, #4]	; (8007224 <__errno+0x8>)
 800721e:	6818      	ldr	r0, [r3, #0]
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20000010 	.word	0x20000010

08007228 <__libc_init_array>:
 8007228:	b570      	push	{r4, r5, r6, lr}
 800722a:	4e0d      	ldr	r6, [pc, #52]	; (8007260 <__libc_init_array+0x38>)
 800722c:	4c0d      	ldr	r4, [pc, #52]	; (8007264 <__libc_init_array+0x3c>)
 800722e:	1ba4      	subs	r4, r4, r6
 8007230:	10a4      	asrs	r4, r4, #2
 8007232:	2500      	movs	r5, #0
 8007234:	42a5      	cmp	r5, r4
 8007236:	d109      	bne.n	800724c <__libc_init_array+0x24>
 8007238:	4e0b      	ldr	r6, [pc, #44]	; (8007268 <__libc_init_array+0x40>)
 800723a:	4c0c      	ldr	r4, [pc, #48]	; (800726c <__libc_init_array+0x44>)
 800723c:	f001 f882 	bl	8008344 <_init>
 8007240:	1ba4      	subs	r4, r4, r6
 8007242:	10a4      	asrs	r4, r4, #2
 8007244:	2500      	movs	r5, #0
 8007246:	42a5      	cmp	r5, r4
 8007248:	d105      	bne.n	8007256 <__libc_init_array+0x2e>
 800724a:	bd70      	pop	{r4, r5, r6, pc}
 800724c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007250:	4798      	blx	r3
 8007252:	3501      	adds	r5, #1
 8007254:	e7ee      	b.n	8007234 <__libc_init_array+0xc>
 8007256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800725a:	4798      	blx	r3
 800725c:	3501      	adds	r5, #1
 800725e:	e7f2      	b.n	8007246 <__libc_init_array+0x1e>
 8007260:	08008468 	.word	0x08008468
 8007264:	08008468 	.word	0x08008468
 8007268:	08008468 	.word	0x08008468
 800726c:	0800846c 	.word	0x0800846c

08007270 <memcpy>:
 8007270:	b510      	push	{r4, lr}
 8007272:	1e43      	subs	r3, r0, #1
 8007274:	440a      	add	r2, r1
 8007276:	4291      	cmp	r1, r2
 8007278:	d100      	bne.n	800727c <memcpy+0xc>
 800727a:	bd10      	pop	{r4, pc}
 800727c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007280:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007284:	e7f7      	b.n	8007276 <memcpy+0x6>

08007286 <memset>:
 8007286:	4402      	add	r2, r0
 8007288:	4603      	mov	r3, r0
 800728a:	4293      	cmp	r3, r2
 800728c:	d100      	bne.n	8007290 <memset+0xa>
 800728e:	4770      	bx	lr
 8007290:	f803 1b01 	strb.w	r1, [r3], #1
 8007294:	e7f9      	b.n	800728a <memset+0x4>
	...

08007298 <pow>:
 8007298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800729c:	ed2d 8b04 	vpush	{d8-d9}
 80072a0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8007574 <pow+0x2dc>
 80072a4:	b08d      	sub	sp, #52	; 0x34
 80072a6:	ec57 6b10 	vmov	r6, r7, d0
 80072aa:	ec55 4b11 	vmov	r4, r5, d1
 80072ae:	f000 f963 	bl	8007578 <__ieee754_pow>
 80072b2:	f999 3000 	ldrsb.w	r3, [r9]
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	3301      	adds	r3, #1
 80072ba:	eeb0 8a40 	vmov.f32	s16, s0
 80072be:	eef0 8a60 	vmov.f32	s17, s1
 80072c2:	46c8      	mov	r8, r9
 80072c4:	d05f      	beq.n	8007386 <pow+0xee>
 80072c6:	4622      	mov	r2, r4
 80072c8:	462b      	mov	r3, r5
 80072ca:	4620      	mov	r0, r4
 80072cc:	4629      	mov	r1, r5
 80072ce:	f7f9 fbd5 	bl	8000a7c <__aeabi_dcmpun>
 80072d2:	4683      	mov	fp, r0
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d156      	bne.n	8007386 <pow+0xee>
 80072d8:	4632      	mov	r2, r6
 80072da:	463b      	mov	r3, r7
 80072dc:	4630      	mov	r0, r6
 80072de:	4639      	mov	r1, r7
 80072e0:	f7f9 fbcc 	bl	8000a7c <__aeabi_dcmpun>
 80072e4:	9001      	str	r0, [sp, #4]
 80072e6:	b1e8      	cbz	r0, 8007324 <pow+0x8c>
 80072e8:	2200      	movs	r2, #0
 80072ea:	2300      	movs	r3, #0
 80072ec:	4620      	mov	r0, r4
 80072ee:	4629      	mov	r1, r5
 80072f0:	f7f9 fb92 	bl	8000a18 <__aeabi_dcmpeq>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d046      	beq.n	8007386 <pow+0xee>
 80072f8:	2301      	movs	r3, #1
 80072fa:	9302      	str	r3, [sp, #8]
 80072fc:	4b96      	ldr	r3, [pc, #600]	; (8007558 <pow+0x2c0>)
 80072fe:	9303      	str	r3, [sp, #12]
 8007300:	4b96      	ldr	r3, [pc, #600]	; (800755c <pow+0x2c4>)
 8007302:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007306:	2200      	movs	r2, #0
 8007308:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800730c:	9b00      	ldr	r3, [sp, #0]
 800730e:	2b02      	cmp	r3, #2
 8007310:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007314:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007318:	d033      	beq.n	8007382 <pow+0xea>
 800731a:	a802      	add	r0, sp, #8
 800731c:	f000 fefb 	bl	8008116 <matherr>
 8007320:	bb48      	cbnz	r0, 8007376 <pow+0xde>
 8007322:	e05d      	b.n	80073e0 <pow+0x148>
 8007324:	f04f 0a00 	mov.w	sl, #0
 8007328:	f04f 0b00 	mov.w	fp, #0
 800732c:	4652      	mov	r2, sl
 800732e:	465b      	mov	r3, fp
 8007330:	4630      	mov	r0, r6
 8007332:	4639      	mov	r1, r7
 8007334:	f7f9 fb70 	bl	8000a18 <__aeabi_dcmpeq>
 8007338:	ec4b ab19 	vmov	d9, sl, fp
 800733c:	2800      	cmp	r0, #0
 800733e:	d054      	beq.n	80073ea <pow+0x152>
 8007340:	4652      	mov	r2, sl
 8007342:	465b      	mov	r3, fp
 8007344:	4620      	mov	r0, r4
 8007346:	4629      	mov	r1, r5
 8007348:	f7f9 fb66 	bl	8000a18 <__aeabi_dcmpeq>
 800734c:	4680      	mov	r8, r0
 800734e:	b318      	cbz	r0, 8007398 <pow+0x100>
 8007350:	2301      	movs	r3, #1
 8007352:	9302      	str	r3, [sp, #8]
 8007354:	4b80      	ldr	r3, [pc, #512]	; (8007558 <pow+0x2c0>)
 8007356:	9303      	str	r3, [sp, #12]
 8007358:	9b01      	ldr	r3, [sp, #4]
 800735a:	930a      	str	r3, [sp, #40]	; 0x28
 800735c:	9b00      	ldr	r3, [sp, #0]
 800735e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007362:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007366:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0d5      	beq.n	800731a <pow+0x82>
 800736e:	4b7b      	ldr	r3, [pc, #492]	; (800755c <pow+0x2c4>)
 8007370:	2200      	movs	r2, #0
 8007372:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007378:	b11b      	cbz	r3, 8007382 <pow+0xea>
 800737a:	f7ff ff4f 	bl	800721c <__errno>
 800737e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007380:	6003      	str	r3, [r0, #0]
 8007382:	ed9d 8b08 	vldr	d8, [sp, #32]
 8007386:	eeb0 0a48 	vmov.f32	s0, s16
 800738a:	eef0 0a68 	vmov.f32	s1, s17
 800738e:	b00d      	add	sp, #52	; 0x34
 8007390:	ecbd 8b04 	vpop	{d8-d9}
 8007394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007398:	ec45 4b10 	vmov	d0, r4, r5
 800739c:	f000 feb3 	bl	8008106 <finite>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d0f0      	beq.n	8007386 <pow+0xee>
 80073a4:	4652      	mov	r2, sl
 80073a6:	465b      	mov	r3, fp
 80073a8:	4620      	mov	r0, r4
 80073aa:	4629      	mov	r1, r5
 80073ac:	f7f9 fb3e 	bl	8000a2c <__aeabi_dcmplt>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d0e8      	beq.n	8007386 <pow+0xee>
 80073b4:	2301      	movs	r3, #1
 80073b6:	9302      	str	r3, [sp, #8]
 80073b8:	4b67      	ldr	r3, [pc, #412]	; (8007558 <pow+0x2c0>)
 80073ba:	9303      	str	r3, [sp, #12]
 80073bc:	f999 3000 	ldrsb.w	r3, [r9]
 80073c0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80073c4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80073c8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80073cc:	b913      	cbnz	r3, 80073d4 <pow+0x13c>
 80073ce:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80073d2:	e7a2      	b.n	800731a <pow+0x82>
 80073d4:	4962      	ldr	r1, [pc, #392]	; (8007560 <pow+0x2c8>)
 80073d6:	2000      	movs	r0, #0
 80073d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d19c      	bne.n	800731a <pow+0x82>
 80073e0:	f7ff ff1c 	bl	800721c <__errno>
 80073e4:	2321      	movs	r3, #33	; 0x21
 80073e6:	6003      	str	r3, [r0, #0]
 80073e8:	e7c5      	b.n	8007376 <pow+0xde>
 80073ea:	eeb0 0a48 	vmov.f32	s0, s16
 80073ee:	eef0 0a68 	vmov.f32	s1, s17
 80073f2:	f000 fe88 	bl	8008106 <finite>
 80073f6:	9000      	str	r0, [sp, #0]
 80073f8:	2800      	cmp	r0, #0
 80073fa:	f040 8081 	bne.w	8007500 <pow+0x268>
 80073fe:	ec47 6b10 	vmov	d0, r6, r7
 8007402:	f000 fe80 	bl	8008106 <finite>
 8007406:	2800      	cmp	r0, #0
 8007408:	d07a      	beq.n	8007500 <pow+0x268>
 800740a:	ec45 4b10 	vmov	d0, r4, r5
 800740e:	f000 fe7a 	bl	8008106 <finite>
 8007412:	2800      	cmp	r0, #0
 8007414:	d074      	beq.n	8007500 <pow+0x268>
 8007416:	ec53 2b18 	vmov	r2, r3, d8
 800741a:	ee18 0a10 	vmov	r0, s16
 800741e:	4619      	mov	r1, r3
 8007420:	f7f9 fb2c 	bl	8000a7c <__aeabi_dcmpun>
 8007424:	f999 9000 	ldrsb.w	r9, [r9]
 8007428:	4b4b      	ldr	r3, [pc, #300]	; (8007558 <pow+0x2c0>)
 800742a:	b1b0      	cbz	r0, 800745a <pow+0x1c2>
 800742c:	2201      	movs	r2, #1
 800742e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007432:	9b00      	ldr	r3, [sp, #0]
 8007434:	930a      	str	r3, [sp, #40]	; 0x28
 8007436:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800743a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800743e:	f1b9 0f00 	cmp.w	r9, #0
 8007442:	d0c4      	beq.n	80073ce <pow+0x136>
 8007444:	4652      	mov	r2, sl
 8007446:	465b      	mov	r3, fp
 8007448:	4650      	mov	r0, sl
 800744a:	4659      	mov	r1, fp
 800744c:	f7f9 f9a6 	bl	800079c <__aeabi_ddiv>
 8007450:	f1b9 0f02 	cmp.w	r9, #2
 8007454:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007458:	e7c1      	b.n	80073de <pow+0x146>
 800745a:	2203      	movs	r2, #3
 800745c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007460:	900a      	str	r0, [sp, #40]	; 0x28
 8007462:	4629      	mov	r1, r5
 8007464:	4620      	mov	r0, r4
 8007466:	2200      	movs	r2, #0
 8007468:	4b3e      	ldr	r3, [pc, #248]	; (8007564 <pow+0x2cc>)
 800746a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800746e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007472:	f7f9 f869 	bl	8000548 <__aeabi_dmul>
 8007476:	4604      	mov	r4, r0
 8007478:	460d      	mov	r5, r1
 800747a:	f1b9 0f00 	cmp.w	r9, #0
 800747e:	d124      	bne.n	80074ca <pow+0x232>
 8007480:	4b39      	ldr	r3, [pc, #228]	; (8007568 <pow+0x2d0>)
 8007482:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007486:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800748a:	4630      	mov	r0, r6
 800748c:	4652      	mov	r2, sl
 800748e:	465b      	mov	r3, fp
 8007490:	4639      	mov	r1, r7
 8007492:	f7f9 facb 	bl	8000a2c <__aeabi_dcmplt>
 8007496:	2800      	cmp	r0, #0
 8007498:	d056      	beq.n	8007548 <pow+0x2b0>
 800749a:	ec45 4b10 	vmov	d0, r4, r5
 800749e:	f000 fe47 	bl	8008130 <rint>
 80074a2:	4622      	mov	r2, r4
 80074a4:	462b      	mov	r3, r5
 80074a6:	ec51 0b10 	vmov	r0, r1, d0
 80074aa:	f7f9 fab5 	bl	8000a18 <__aeabi_dcmpeq>
 80074ae:	b920      	cbnz	r0, 80074ba <pow+0x222>
 80074b0:	4b2e      	ldr	r3, [pc, #184]	; (800756c <pow+0x2d4>)
 80074b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80074b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80074ba:	f998 3000 	ldrsb.w	r3, [r8]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d142      	bne.n	8007548 <pow+0x2b0>
 80074c2:	f7ff feab 	bl	800721c <__errno>
 80074c6:	2322      	movs	r3, #34	; 0x22
 80074c8:	e78d      	b.n	80073e6 <pow+0x14e>
 80074ca:	4b29      	ldr	r3, [pc, #164]	; (8007570 <pow+0x2d8>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80074d2:	4630      	mov	r0, r6
 80074d4:	4652      	mov	r2, sl
 80074d6:	465b      	mov	r3, fp
 80074d8:	4639      	mov	r1, r7
 80074da:	f7f9 faa7 	bl	8000a2c <__aeabi_dcmplt>
 80074de:	2800      	cmp	r0, #0
 80074e0:	d0eb      	beq.n	80074ba <pow+0x222>
 80074e2:	ec45 4b10 	vmov	d0, r4, r5
 80074e6:	f000 fe23 	bl	8008130 <rint>
 80074ea:	4622      	mov	r2, r4
 80074ec:	462b      	mov	r3, r5
 80074ee:	ec51 0b10 	vmov	r0, r1, d0
 80074f2:	f7f9 fa91 	bl	8000a18 <__aeabi_dcmpeq>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	d1df      	bne.n	80074ba <pow+0x222>
 80074fa:	2200      	movs	r2, #0
 80074fc:	4b18      	ldr	r3, [pc, #96]	; (8007560 <pow+0x2c8>)
 80074fe:	e7da      	b.n	80074b6 <pow+0x21e>
 8007500:	2200      	movs	r2, #0
 8007502:	2300      	movs	r3, #0
 8007504:	ec51 0b18 	vmov	r0, r1, d8
 8007508:	f7f9 fa86 	bl	8000a18 <__aeabi_dcmpeq>
 800750c:	2800      	cmp	r0, #0
 800750e:	f43f af3a 	beq.w	8007386 <pow+0xee>
 8007512:	ec47 6b10 	vmov	d0, r6, r7
 8007516:	f000 fdf6 	bl	8008106 <finite>
 800751a:	2800      	cmp	r0, #0
 800751c:	f43f af33 	beq.w	8007386 <pow+0xee>
 8007520:	ec45 4b10 	vmov	d0, r4, r5
 8007524:	f000 fdef 	bl	8008106 <finite>
 8007528:	2800      	cmp	r0, #0
 800752a:	f43f af2c 	beq.w	8007386 <pow+0xee>
 800752e:	2304      	movs	r3, #4
 8007530:	9302      	str	r3, [sp, #8]
 8007532:	4b09      	ldr	r3, [pc, #36]	; (8007558 <pow+0x2c0>)
 8007534:	9303      	str	r3, [sp, #12]
 8007536:	2300      	movs	r3, #0
 8007538:	930a      	str	r3, [sp, #40]	; 0x28
 800753a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800753e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007542:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007546:	e7b8      	b.n	80074ba <pow+0x222>
 8007548:	a802      	add	r0, sp, #8
 800754a:	f000 fde4 	bl	8008116 <matherr>
 800754e:	2800      	cmp	r0, #0
 8007550:	f47f af11 	bne.w	8007376 <pow+0xde>
 8007554:	e7b5      	b.n	80074c2 <pow+0x22a>
 8007556:	bf00      	nop
 8007558:	08008418 	.word	0x08008418
 800755c:	3ff00000 	.word	0x3ff00000
 8007560:	fff00000 	.word	0xfff00000
 8007564:	3fe00000 	.word	0x3fe00000
 8007568:	47efffff 	.word	0x47efffff
 800756c:	c7efffff 	.word	0xc7efffff
 8007570:	7ff00000 	.word	0x7ff00000
 8007574:	20000074 	.word	0x20000074

08007578 <__ieee754_pow>:
 8007578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757c:	b091      	sub	sp, #68	; 0x44
 800757e:	ed8d 1b00 	vstr	d1, [sp]
 8007582:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007586:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800758a:	ea58 0302 	orrs.w	r3, r8, r2
 800758e:	ec57 6b10 	vmov	r6, r7, d0
 8007592:	f000 84be 	beq.w	8007f12 <__ieee754_pow+0x99a>
 8007596:	4b7a      	ldr	r3, [pc, #488]	; (8007780 <__ieee754_pow+0x208>)
 8007598:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800759c:	429c      	cmp	r4, r3
 800759e:	463d      	mov	r5, r7
 80075a0:	ee10 aa10 	vmov	sl, s0
 80075a4:	dc09      	bgt.n	80075ba <__ieee754_pow+0x42>
 80075a6:	d103      	bne.n	80075b0 <__ieee754_pow+0x38>
 80075a8:	b93e      	cbnz	r6, 80075ba <__ieee754_pow+0x42>
 80075aa:	45a0      	cmp	r8, r4
 80075ac:	dc0d      	bgt.n	80075ca <__ieee754_pow+0x52>
 80075ae:	e001      	b.n	80075b4 <__ieee754_pow+0x3c>
 80075b0:	4598      	cmp	r8, r3
 80075b2:	dc02      	bgt.n	80075ba <__ieee754_pow+0x42>
 80075b4:	4598      	cmp	r8, r3
 80075b6:	d10e      	bne.n	80075d6 <__ieee754_pow+0x5e>
 80075b8:	b16a      	cbz	r2, 80075d6 <__ieee754_pow+0x5e>
 80075ba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80075be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80075c2:	ea54 030a 	orrs.w	r3, r4, sl
 80075c6:	f000 84a4 	beq.w	8007f12 <__ieee754_pow+0x99a>
 80075ca:	486e      	ldr	r0, [pc, #440]	; (8007784 <__ieee754_pow+0x20c>)
 80075cc:	b011      	add	sp, #68	; 0x44
 80075ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d2:	f000 bda5 	b.w	8008120 <nan>
 80075d6:	2d00      	cmp	r5, #0
 80075d8:	da53      	bge.n	8007682 <__ieee754_pow+0x10a>
 80075da:	4b6b      	ldr	r3, [pc, #428]	; (8007788 <__ieee754_pow+0x210>)
 80075dc:	4598      	cmp	r8, r3
 80075de:	dc4d      	bgt.n	800767c <__ieee754_pow+0x104>
 80075e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80075e4:	4598      	cmp	r8, r3
 80075e6:	dd4c      	ble.n	8007682 <__ieee754_pow+0x10a>
 80075e8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80075ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80075f0:	2b14      	cmp	r3, #20
 80075f2:	dd26      	ble.n	8007642 <__ieee754_pow+0xca>
 80075f4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80075f8:	fa22 f103 	lsr.w	r1, r2, r3
 80075fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007600:	4293      	cmp	r3, r2
 8007602:	d13e      	bne.n	8007682 <__ieee754_pow+0x10a>
 8007604:	f001 0101 	and.w	r1, r1, #1
 8007608:	f1c1 0b02 	rsb	fp, r1, #2
 800760c:	2a00      	cmp	r2, #0
 800760e:	d15b      	bne.n	80076c8 <__ieee754_pow+0x150>
 8007610:	4b5b      	ldr	r3, [pc, #364]	; (8007780 <__ieee754_pow+0x208>)
 8007612:	4598      	cmp	r8, r3
 8007614:	d124      	bne.n	8007660 <__ieee754_pow+0xe8>
 8007616:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800761a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800761e:	ea53 030a 	orrs.w	r3, r3, sl
 8007622:	f000 8476 	beq.w	8007f12 <__ieee754_pow+0x99a>
 8007626:	4b59      	ldr	r3, [pc, #356]	; (800778c <__ieee754_pow+0x214>)
 8007628:	429c      	cmp	r4, r3
 800762a:	dd2d      	ble.n	8007688 <__ieee754_pow+0x110>
 800762c:	f1b9 0f00 	cmp.w	r9, #0
 8007630:	f280 8473 	bge.w	8007f1a <__ieee754_pow+0x9a2>
 8007634:	2000      	movs	r0, #0
 8007636:	2100      	movs	r1, #0
 8007638:	ec41 0b10 	vmov	d0, r0, r1
 800763c:	b011      	add	sp, #68	; 0x44
 800763e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007642:	2a00      	cmp	r2, #0
 8007644:	d13e      	bne.n	80076c4 <__ieee754_pow+0x14c>
 8007646:	f1c3 0314 	rsb	r3, r3, #20
 800764a:	fa48 f103 	asr.w	r1, r8, r3
 800764e:	fa01 f303 	lsl.w	r3, r1, r3
 8007652:	4543      	cmp	r3, r8
 8007654:	f040 8469 	bne.w	8007f2a <__ieee754_pow+0x9b2>
 8007658:	f001 0101 	and.w	r1, r1, #1
 800765c:	f1c1 0b02 	rsb	fp, r1, #2
 8007660:	4b4b      	ldr	r3, [pc, #300]	; (8007790 <__ieee754_pow+0x218>)
 8007662:	4598      	cmp	r8, r3
 8007664:	d118      	bne.n	8007698 <__ieee754_pow+0x120>
 8007666:	f1b9 0f00 	cmp.w	r9, #0
 800766a:	f280 845a 	bge.w	8007f22 <__ieee754_pow+0x9aa>
 800766e:	4948      	ldr	r1, [pc, #288]	; (8007790 <__ieee754_pow+0x218>)
 8007670:	4632      	mov	r2, r6
 8007672:	463b      	mov	r3, r7
 8007674:	2000      	movs	r0, #0
 8007676:	f7f9 f891 	bl	800079c <__aeabi_ddiv>
 800767a:	e7dd      	b.n	8007638 <__ieee754_pow+0xc0>
 800767c:	f04f 0b02 	mov.w	fp, #2
 8007680:	e7c4      	b.n	800760c <__ieee754_pow+0x94>
 8007682:	f04f 0b00 	mov.w	fp, #0
 8007686:	e7c1      	b.n	800760c <__ieee754_pow+0x94>
 8007688:	f1b9 0f00 	cmp.w	r9, #0
 800768c:	dad2      	bge.n	8007634 <__ieee754_pow+0xbc>
 800768e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007692:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007696:	e7cf      	b.n	8007638 <__ieee754_pow+0xc0>
 8007698:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800769c:	d106      	bne.n	80076ac <__ieee754_pow+0x134>
 800769e:	4632      	mov	r2, r6
 80076a0:	463b      	mov	r3, r7
 80076a2:	4610      	mov	r0, r2
 80076a4:	4619      	mov	r1, r3
 80076a6:	f7f8 ff4f 	bl	8000548 <__aeabi_dmul>
 80076aa:	e7c5      	b.n	8007638 <__ieee754_pow+0xc0>
 80076ac:	4b39      	ldr	r3, [pc, #228]	; (8007794 <__ieee754_pow+0x21c>)
 80076ae:	4599      	cmp	r9, r3
 80076b0:	d10a      	bne.n	80076c8 <__ieee754_pow+0x150>
 80076b2:	2d00      	cmp	r5, #0
 80076b4:	db08      	blt.n	80076c8 <__ieee754_pow+0x150>
 80076b6:	ec47 6b10 	vmov	d0, r6, r7
 80076ba:	b011      	add	sp, #68	; 0x44
 80076bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c0:	f000 bc68 	b.w	8007f94 <__ieee754_sqrt>
 80076c4:	f04f 0b00 	mov.w	fp, #0
 80076c8:	ec47 6b10 	vmov	d0, r6, r7
 80076cc:	f000 fd12 	bl	80080f4 <fabs>
 80076d0:	ec51 0b10 	vmov	r0, r1, d0
 80076d4:	f1ba 0f00 	cmp.w	sl, #0
 80076d8:	d127      	bne.n	800772a <__ieee754_pow+0x1b2>
 80076da:	b124      	cbz	r4, 80076e6 <__ieee754_pow+0x16e>
 80076dc:	4b2c      	ldr	r3, [pc, #176]	; (8007790 <__ieee754_pow+0x218>)
 80076de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d121      	bne.n	800772a <__ieee754_pow+0x1b2>
 80076e6:	f1b9 0f00 	cmp.w	r9, #0
 80076ea:	da05      	bge.n	80076f8 <__ieee754_pow+0x180>
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	2000      	movs	r0, #0
 80076f2:	4927      	ldr	r1, [pc, #156]	; (8007790 <__ieee754_pow+0x218>)
 80076f4:	f7f9 f852 	bl	800079c <__aeabi_ddiv>
 80076f8:	2d00      	cmp	r5, #0
 80076fa:	da9d      	bge.n	8007638 <__ieee754_pow+0xc0>
 80076fc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007700:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007704:	ea54 030b 	orrs.w	r3, r4, fp
 8007708:	d108      	bne.n	800771c <__ieee754_pow+0x1a4>
 800770a:	4602      	mov	r2, r0
 800770c:	460b      	mov	r3, r1
 800770e:	4610      	mov	r0, r2
 8007710:	4619      	mov	r1, r3
 8007712:	f7f8 fd61 	bl	80001d8 <__aeabi_dsub>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	e7ac      	b.n	8007676 <__ieee754_pow+0xfe>
 800771c:	f1bb 0f01 	cmp.w	fp, #1
 8007720:	d18a      	bne.n	8007638 <__ieee754_pow+0xc0>
 8007722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007726:	4619      	mov	r1, r3
 8007728:	e786      	b.n	8007638 <__ieee754_pow+0xc0>
 800772a:	0fed      	lsrs	r5, r5, #31
 800772c:	1e6b      	subs	r3, r5, #1
 800772e:	930d      	str	r3, [sp, #52]	; 0x34
 8007730:	ea5b 0303 	orrs.w	r3, fp, r3
 8007734:	d102      	bne.n	800773c <__ieee754_pow+0x1c4>
 8007736:	4632      	mov	r2, r6
 8007738:	463b      	mov	r3, r7
 800773a:	e7e8      	b.n	800770e <__ieee754_pow+0x196>
 800773c:	4b16      	ldr	r3, [pc, #88]	; (8007798 <__ieee754_pow+0x220>)
 800773e:	4598      	cmp	r8, r3
 8007740:	f340 80fe 	ble.w	8007940 <__ieee754_pow+0x3c8>
 8007744:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007748:	4598      	cmp	r8, r3
 800774a:	dd0a      	ble.n	8007762 <__ieee754_pow+0x1ea>
 800774c:	4b0f      	ldr	r3, [pc, #60]	; (800778c <__ieee754_pow+0x214>)
 800774e:	429c      	cmp	r4, r3
 8007750:	dc0d      	bgt.n	800776e <__ieee754_pow+0x1f6>
 8007752:	f1b9 0f00 	cmp.w	r9, #0
 8007756:	f6bf af6d 	bge.w	8007634 <__ieee754_pow+0xbc>
 800775a:	a307      	add	r3, pc, #28	; (adr r3, 8007778 <__ieee754_pow+0x200>)
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	e79f      	b.n	80076a2 <__ieee754_pow+0x12a>
 8007762:	4b0e      	ldr	r3, [pc, #56]	; (800779c <__ieee754_pow+0x224>)
 8007764:	429c      	cmp	r4, r3
 8007766:	ddf4      	ble.n	8007752 <__ieee754_pow+0x1da>
 8007768:	4b09      	ldr	r3, [pc, #36]	; (8007790 <__ieee754_pow+0x218>)
 800776a:	429c      	cmp	r4, r3
 800776c:	dd18      	ble.n	80077a0 <__ieee754_pow+0x228>
 800776e:	f1b9 0f00 	cmp.w	r9, #0
 8007772:	dcf2      	bgt.n	800775a <__ieee754_pow+0x1e2>
 8007774:	e75e      	b.n	8007634 <__ieee754_pow+0xbc>
 8007776:	bf00      	nop
 8007778:	8800759c 	.word	0x8800759c
 800777c:	7e37e43c 	.word	0x7e37e43c
 8007780:	7ff00000 	.word	0x7ff00000
 8007784:	0800841b 	.word	0x0800841b
 8007788:	433fffff 	.word	0x433fffff
 800778c:	3fefffff 	.word	0x3fefffff
 8007790:	3ff00000 	.word	0x3ff00000
 8007794:	3fe00000 	.word	0x3fe00000
 8007798:	41e00000 	.word	0x41e00000
 800779c:	3feffffe 	.word	0x3feffffe
 80077a0:	2200      	movs	r2, #0
 80077a2:	4b63      	ldr	r3, [pc, #396]	; (8007930 <__ieee754_pow+0x3b8>)
 80077a4:	f7f8 fd18 	bl	80001d8 <__aeabi_dsub>
 80077a8:	a355      	add	r3, pc, #340	; (adr r3, 8007900 <__ieee754_pow+0x388>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	4604      	mov	r4, r0
 80077b0:	460d      	mov	r5, r1
 80077b2:	f7f8 fec9 	bl	8000548 <__aeabi_dmul>
 80077b6:	a354      	add	r3, pc, #336	; (adr r3, 8007908 <__ieee754_pow+0x390>)
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	4606      	mov	r6, r0
 80077be:	460f      	mov	r7, r1
 80077c0:	4620      	mov	r0, r4
 80077c2:	4629      	mov	r1, r5
 80077c4:	f7f8 fec0 	bl	8000548 <__aeabi_dmul>
 80077c8:	2200      	movs	r2, #0
 80077ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077ce:	4b59      	ldr	r3, [pc, #356]	; (8007934 <__ieee754_pow+0x3bc>)
 80077d0:	4620      	mov	r0, r4
 80077d2:	4629      	mov	r1, r5
 80077d4:	f7f8 feb8 	bl	8000548 <__aeabi_dmul>
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	a14c      	add	r1, pc, #304	; (adr r1, 8007910 <__ieee754_pow+0x398>)
 80077de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077e2:	f7f8 fcf9 	bl	80001d8 <__aeabi_dsub>
 80077e6:	4622      	mov	r2, r4
 80077e8:	462b      	mov	r3, r5
 80077ea:	f7f8 fead 	bl	8000548 <__aeabi_dmul>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	2000      	movs	r0, #0
 80077f4:	4950      	ldr	r1, [pc, #320]	; (8007938 <__ieee754_pow+0x3c0>)
 80077f6:	f7f8 fcef 	bl	80001d8 <__aeabi_dsub>
 80077fa:	4622      	mov	r2, r4
 80077fc:	462b      	mov	r3, r5
 80077fe:	4680      	mov	r8, r0
 8007800:	4689      	mov	r9, r1
 8007802:	4620      	mov	r0, r4
 8007804:	4629      	mov	r1, r5
 8007806:	f7f8 fe9f 	bl	8000548 <__aeabi_dmul>
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	4640      	mov	r0, r8
 8007810:	4649      	mov	r1, r9
 8007812:	f7f8 fe99 	bl	8000548 <__aeabi_dmul>
 8007816:	a340      	add	r3, pc, #256	; (adr r3, 8007918 <__ieee754_pow+0x3a0>)
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	f7f8 fe94 	bl	8000548 <__aeabi_dmul>
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007828:	f7f8 fcd6 	bl	80001d8 <__aeabi_dsub>
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	4604      	mov	r4, r0
 8007832:	460d      	mov	r5, r1
 8007834:	4630      	mov	r0, r6
 8007836:	4639      	mov	r1, r7
 8007838:	f7f8 fcd0 	bl	80001dc <__adddf3>
 800783c:	2000      	movs	r0, #0
 800783e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007842:	4632      	mov	r2, r6
 8007844:	463b      	mov	r3, r7
 8007846:	f7f8 fcc7 	bl	80001d8 <__aeabi_dsub>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	4620      	mov	r0, r4
 8007850:	4629      	mov	r1, r5
 8007852:	f7f8 fcc1 	bl	80001d8 <__aeabi_dsub>
 8007856:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007858:	f10b 33ff 	add.w	r3, fp, #4294967295
 800785c:	4313      	orrs	r3, r2
 800785e:	4606      	mov	r6, r0
 8007860:	460f      	mov	r7, r1
 8007862:	f040 81eb 	bne.w	8007c3c <__ieee754_pow+0x6c4>
 8007866:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007920 <__ieee754_pow+0x3a8>
 800786a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800786e:	2400      	movs	r4, #0
 8007870:	4622      	mov	r2, r4
 8007872:	462b      	mov	r3, r5
 8007874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007878:	ed8d 7b02 	vstr	d7, [sp, #8]
 800787c:	f7f8 fcac 	bl	80001d8 <__aeabi_dsub>
 8007880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007884:	f7f8 fe60 	bl	8000548 <__aeabi_dmul>
 8007888:	e9dd 2300 	ldrd	r2, r3, [sp]
 800788c:	4680      	mov	r8, r0
 800788e:	4689      	mov	r9, r1
 8007890:	4630      	mov	r0, r6
 8007892:	4639      	mov	r1, r7
 8007894:	f7f8 fe58 	bl	8000548 <__aeabi_dmul>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4640      	mov	r0, r8
 800789e:	4649      	mov	r1, r9
 80078a0:	f7f8 fc9c 	bl	80001dc <__adddf3>
 80078a4:	4622      	mov	r2, r4
 80078a6:	462b      	mov	r3, r5
 80078a8:	4680      	mov	r8, r0
 80078aa:	4689      	mov	r9, r1
 80078ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078b0:	f7f8 fe4a 	bl	8000548 <__aeabi_dmul>
 80078b4:	460b      	mov	r3, r1
 80078b6:	4604      	mov	r4, r0
 80078b8:	460d      	mov	r5, r1
 80078ba:	4602      	mov	r2, r0
 80078bc:	4649      	mov	r1, r9
 80078be:	4640      	mov	r0, r8
 80078c0:	e9cd 4500 	strd	r4, r5, [sp]
 80078c4:	f7f8 fc8a 	bl	80001dc <__adddf3>
 80078c8:	4b1c      	ldr	r3, [pc, #112]	; (800793c <__ieee754_pow+0x3c4>)
 80078ca:	4299      	cmp	r1, r3
 80078cc:	4606      	mov	r6, r0
 80078ce:	460f      	mov	r7, r1
 80078d0:	468b      	mov	fp, r1
 80078d2:	f340 82f7 	ble.w	8007ec4 <__ieee754_pow+0x94c>
 80078d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80078da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80078de:	4303      	orrs	r3, r0
 80078e0:	f000 81ea 	beq.w	8007cb8 <__ieee754_pow+0x740>
 80078e4:	a310      	add	r3, pc, #64	; (adr r3, 8007928 <__ieee754_pow+0x3b0>)
 80078e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ee:	f7f8 fe2b 	bl	8000548 <__aeabi_dmul>
 80078f2:	a30d      	add	r3, pc, #52	; (adr r3, 8007928 <__ieee754_pow+0x3b0>)
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	e6d5      	b.n	80076a6 <__ieee754_pow+0x12e>
 80078fa:	bf00      	nop
 80078fc:	f3af 8000 	nop.w
 8007900:	60000000 	.word	0x60000000
 8007904:	3ff71547 	.word	0x3ff71547
 8007908:	f85ddf44 	.word	0xf85ddf44
 800790c:	3e54ae0b 	.word	0x3e54ae0b
 8007910:	55555555 	.word	0x55555555
 8007914:	3fd55555 	.word	0x3fd55555
 8007918:	652b82fe 	.word	0x652b82fe
 800791c:	3ff71547 	.word	0x3ff71547
 8007920:	00000000 	.word	0x00000000
 8007924:	bff00000 	.word	0xbff00000
 8007928:	8800759c 	.word	0x8800759c
 800792c:	7e37e43c 	.word	0x7e37e43c
 8007930:	3ff00000 	.word	0x3ff00000
 8007934:	3fd00000 	.word	0x3fd00000
 8007938:	3fe00000 	.word	0x3fe00000
 800793c:	408fffff 	.word	0x408fffff
 8007940:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007944:	f04f 0200 	mov.w	r2, #0
 8007948:	da05      	bge.n	8007956 <__ieee754_pow+0x3de>
 800794a:	4bd3      	ldr	r3, [pc, #844]	; (8007c98 <__ieee754_pow+0x720>)
 800794c:	f7f8 fdfc 	bl	8000548 <__aeabi_dmul>
 8007950:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007954:	460c      	mov	r4, r1
 8007956:	1523      	asrs	r3, r4, #20
 8007958:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800795c:	4413      	add	r3, r2
 800795e:	9309      	str	r3, [sp, #36]	; 0x24
 8007960:	4bce      	ldr	r3, [pc, #824]	; (8007c9c <__ieee754_pow+0x724>)
 8007962:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007966:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800796a:	429c      	cmp	r4, r3
 800796c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007970:	dd08      	ble.n	8007984 <__ieee754_pow+0x40c>
 8007972:	4bcb      	ldr	r3, [pc, #812]	; (8007ca0 <__ieee754_pow+0x728>)
 8007974:	429c      	cmp	r4, r3
 8007976:	f340 815e 	ble.w	8007c36 <__ieee754_pow+0x6be>
 800797a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800797c:	3301      	adds	r3, #1
 800797e:	9309      	str	r3, [sp, #36]	; 0x24
 8007980:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007984:	f04f 0a00 	mov.w	sl, #0
 8007988:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800798c:	930c      	str	r3, [sp, #48]	; 0x30
 800798e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007990:	4bc4      	ldr	r3, [pc, #784]	; (8007ca4 <__ieee754_pow+0x72c>)
 8007992:	4413      	add	r3, r2
 8007994:	ed93 7b00 	vldr	d7, [r3]
 8007998:	4629      	mov	r1, r5
 800799a:	ec53 2b17 	vmov	r2, r3, d7
 800799e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80079a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80079a6:	f7f8 fc17 	bl	80001d8 <__aeabi_dsub>
 80079aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80079ae:	4606      	mov	r6, r0
 80079b0:	460f      	mov	r7, r1
 80079b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079b6:	f7f8 fc11 	bl	80001dc <__adddf3>
 80079ba:	4602      	mov	r2, r0
 80079bc:	460b      	mov	r3, r1
 80079be:	2000      	movs	r0, #0
 80079c0:	49b9      	ldr	r1, [pc, #740]	; (8007ca8 <__ieee754_pow+0x730>)
 80079c2:	f7f8 feeb 	bl	800079c <__aeabi_ddiv>
 80079c6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	4630      	mov	r0, r6
 80079d0:	4639      	mov	r1, r7
 80079d2:	f7f8 fdb9 	bl	8000548 <__aeabi_dmul>
 80079d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079da:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80079de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80079e2:	2300      	movs	r3, #0
 80079e4:	9302      	str	r3, [sp, #8]
 80079e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80079ea:	106d      	asrs	r5, r5, #1
 80079ec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80079f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80079f4:	2200      	movs	r2, #0
 80079f6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80079fa:	4640      	mov	r0, r8
 80079fc:	4649      	mov	r1, r9
 80079fe:	4614      	mov	r4, r2
 8007a00:	461d      	mov	r5, r3
 8007a02:	f7f8 fda1 	bl	8000548 <__aeabi_dmul>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	f7f8 fbe3 	bl	80001d8 <__aeabi_dsub>
 8007a12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a16:	4606      	mov	r6, r0
 8007a18:	460f      	mov	r7, r1
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	f7f8 fbdb 	bl	80001d8 <__aeabi_dsub>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a2a:	f7f8 fbd5 	bl	80001d8 <__aeabi_dsub>
 8007a2e:	4642      	mov	r2, r8
 8007a30:	464b      	mov	r3, r9
 8007a32:	f7f8 fd89 	bl	8000548 <__aeabi_dmul>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	4639      	mov	r1, r7
 8007a3e:	f7f8 fbcb 	bl	80001d8 <__aeabi_dsub>
 8007a42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007a46:	f7f8 fd7f 	bl	8000548 <__aeabi_dmul>
 8007a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a52:	4610      	mov	r0, r2
 8007a54:	4619      	mov	r1, r3
 8007a56:	f7f8 fd77 	bl	8000548 <__aeabi_dmul>
 8007a5a:	a37b      	add	r3, pc, #492	; (adr r3, 8007c48 <__ieee754_pow+0x6d0>)
 8007a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a60:	4604      	mov	r4, r0
 8007a62:	460d      	mov	r5, r1
 8007a64:	f7f8 fd70 	bl	8000548 <__aeabi_dmul>
 8007a68:	a379      	add	r3, pc, #484	; (adr r3, 8007c50 <__ieee754_pow+0x6d8>)
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	f7f8 fbb5 	bl	80001dc <__adddf3>
 8007a72:	4622      	mov	r2, r4
 8007a74:	462b      	mov	r3, r5
 8007a76:	f7f8 fd67 	bl	8000548 <__aeabi_dmul>
 8007a7a:	a377      	add	r3, pc, #476	; (adr r3, 8007c58 <__ieee754_pow+0x6e0>)
 8007a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a80:	f7f8 fbac 	bl	80001dc <__adddf3>
 8007a84:	4622      	mov	r2, r4
 8007a86:	462b      	mov	r3, r5
 8007a88:	f7f8 fd5e 	bl	8000548 <__aeabi_dmul>
 8007a8c:	a374      	add	r3, pc, #464	; (adr r3, 8007c60 <__ieee754_pow+0x6e8>)
 8007a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a92:	f7f8 fba3 	bl	80001dc <__adddf3>
 8007a96:	4622      	mov	r2, r4
 8007a98:	462b      	mov	r3, r5
 8007a9a:	f7f8 fd55 	bl	8000548 <__aeabi_dmul>
 8007a9e:	a372      	add	r3, pc, #456	; (adr r3, 8007c68 <__ieee754_pow+0x6f0>)
 8007aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa4:	f7f8 fb9a 	bl	80001dc <__adddf3>
 8007aa8:	4622      	mov	r2, r4
 8007aaa:	462b      	mov	r3, r5
 8007aac:	f7f8 fd4c 	bl	8000548 <__aeabi_dmul>
 8007ab0:	a36f      	add	r3, pc, #444	; (adr r3, 8007c70 <__ieee754_pow+0x6f8>)
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	f7f8 fb91 	bl	80001dc <__adddf3>
 8007aba:	4622      	mov	r2, r4
 8007abc:	4606      	mov	r6, r0
 8007abe:	460f      	mov	r7, r1
 8007ac0:	462b      	mov	r3, r5
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	f7f8 fd3f 	bl	8000548 <__aeabi_dmul>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4630      	mov	r0, r6
 8007ad0:	4639      	mov	r1, r7
 8007ad2:	f7f8 fd39 	bl	8000548 <__aeabi_dmul>
 8007ad6:	4642      	mov	r2, r8
 8007ad8:	4604      	mov	r4, r0
 8007ada:	460d      	mov	r5, r1
 8007adc:	464b      	mov	r3, r9
 8007ade:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ae2:	f7f8 fb7b 	bl	80001dc <__adddf3>
 8007ae6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007aea:	f7f8 fd2d 	bl	8000548 <__aeabi_dmul>
 8007aee:	4622      	mov	r2, r4
 8007af0:	462b      	mov	r3, r5
 8007af2:	f7f8 fb73 	bl	80001dc <__adddf3>
 8007af6:	4642      	mov	r2, r8
 8007af8:	4606      	mov	r6, r0
 8007afa:	460f      	mov	r7, r1
 8007afc:	464b      	mov	r3, r9
 8007afe:	4640      	mov	r0, r8
 8007b00:	4649      	mov	r1, r9
 8007b02:	f7f8 fd21 	bl	8000548 <__aeabi_dmul>
 8007b06:	2200      	movs	r2, #0
 8007b08:	4b68      	ldr	r3, [pc, #416]	; (8007cac <__ieee754_pow+0x734>)
 8007b0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007b0e:	f7f8 fb65 	bl	80001dc <__adddf3>
 8007b12:	4632      	mov	r2, r6
 8007b14:	463b      	mov	r3, r7
 8007b16:	f7f8 fb61 	bl	80001dc <__adddf3>
 8007b1a:	9802      	ldr	r0, [sp, #8]
 8007b1c:	460d      	mov	r5, r1
 8007b1e:	4604      	mov	r4, r0
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	4640      	mov	r0, r8
 8007b26:	4649      	mov	r1, r9
 8007b28:	f7f8 fd0e 	bl	8000548 <__aeabi_dmul>
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	4680      	mov	r8, r0
 8007b30:	4689      	mov	r9, r1
 8007b32:	4b5e      	ldr	r3, [pc, #376]	; (8007cac <__ieee754_pow+0x734>)
 8007b34:	4620      	mov	r0, r4
 8007b36:	4629      	mov	r1, r5
 8007b38:	f7f8 fb4e 	bl	80001d8 <__aeabi_dsub>
 8007b3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b40:	f7f8 fb4a 	bl	80001d8 <__aeabi_dsub>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	4630      	mov	r0, r6
 8007b4a:	4639      	mov	r1, r7
 8007b4c:	f7f8 fb44 	bl	80001d8 <__aeabi_dsub>
 8007b50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b54:	f7f8 fcf8 	bl	8000548 <__aeabi_dmul>
 8007b58:	4622      	mov	r2, r4
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	460f      	mov	r7, r1
 8007b5e:	462b      	mov	r3, r5
 8007b60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b64:	f7f8 fcf0 	bl	8000548 <__aeabi_dmul>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	4639      	mov	r1, r7
 8007b70:	f7f8 fb34 	bl	80001dc <__adddf3>
 8007b74:	4606      	mov	r6, r0
 8007b76:	460f      	mov	r7, r1
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4640      	mov	r0, r8
 8007b7e:	4649      	mov	r1, r9
 8007b80:	f7f8 fb2c 	bl	80001dc <__adddf3>
 8007b84:	9802      	ldr	r0, [sp, #8]
 8007b86:	a33c      	add	r3, pc, #240	; (adr r3, 8007c78 <__ieee754_pow+0x700>)
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	f7f8 fcda 	bl	8000548 <__aeabi_dmul>
 8007b94:	4642      	mov	r2, r8
 8007b96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b9a:	464b      	mov	r3, r9
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	f7f8 fb1a 	bl	80001d8 <__aeabi_dsub>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4630      	mov	r0, r6
 8007baa:	4639      	mov	r1, r7
 8007bac:	f7f8 fb14 	bl	80001d8 <__aeabi_dsub>
 8007bb0:	a333      	add	r3, pc, #204	; (adr r3, 8007c80 <__ieee754_pow+0x708>)
 8007bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb6:	f7f8 fcc7 	bl	8000548 <__aeabi_dmul>
 8007bba:	a333      	add	r3, pc, #204	; (adr r3, 8007c88 <__ieee754_pow+0x710>)
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	460f      	mov	r7, r1
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	f7f8 fcbe 	bl	8000548 <__aeabi_dmul>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	f7f8 fb02 	bl	80001dc <__adddf3>
 8007bd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bda:	4b35      	ldr	r3, [pc, #212]	; (8007cb0 <__ieee754_pow+0x738>)
 8007bdc:	4413      	add	r3, r2
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	f7f8 fafb 	bl	80001dc <__adddf3>
 8007be6:	4604      	mov	r4, r0
 8007be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bea:	460d      	mov	r5, r1
 8007bec:	f7f8 fc42 	bl	8000474 <__aeabi_i2d>
 8007bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bf2:	4b30      	ldr	r3, [pc, #192]	; (8007cb4 <__ieee754_pow+0x73c>)
 8007bf4:	4413      	add	r3, r2
 8007bf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	460f      	mov	r7, r1
 8007bfe:	4622      	mov	r2, r4
 8007c00:	462b      	mov	r3, r5
 8007c02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c06:	f7f8 fae9 	bl	80001dc <__adddf3>
 8007c0a:	4642      	mov	r2, r8
 8007c0c:	464b      	mov	r3, r9
 8007c0e:	f7f8 fae5 	bl	80001dc <__adddf3>
 8007c12:	4632      	mov	r2, r6
 8007c14:	463b      	mov	r3, r7
 8007c16:	f7f8 fae1 	bl	80001dc <__adddf3>
 8007c1a:	9802      	ldr	r0, [sp, #8]
 8007c1c:	4632      	mov	r2, r6
 8007c1e:	463b      	mov	r3, r7
 8007c20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c24:	f7f8 fad8 	bl	80001d8 <__aeabi_dsub>
 8007c28:	4642      	mov	r2, r8
 8007c2a:	464b      	mov	r3, r9
 8007c2c:	f7f8 fad4 	bl	80001d8 <__aeabi_dsub>
 8007c30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c34:	e607      	b.n	8007846 <__ieee754_pow+0x2ce>
 8007c36:	f04f 0a01 	mov.w	sl, #1
 8007c3a:	e6a5      	b.n	8007988 <__ieee754_pow+0x410>
 8007c3c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007c90 <__ieee754_pow+0x718>
 8007c40:	e613      	b.n	800786a <__ieee754_pow+0x2f2>
 8007c42:	bf00      	nop
 8007c44:	f3af 8000 	nop.w
 8007c48:	4a454eef 	.word	0x4a454eef
 8007c4c:	3fca7e28 	.word	0x3fca7e28
 8007c50:	93c9db65 	.word	0x93c9db65
 8007c54:	3fcd864a 	.word	0x3fcd864a
 8007c58:	a91d4101 	.word	0xa91d4101
 8007c5c:	3fd17460 	.word	0x3fd17460
 8007c60:	518f264d 	.word	0x518f264d
 8007c64:	3fd55555 	.word	0x3fd55555
 8007c68:	db6fabff 	.word	0xdb6fabff
 8007c6c:	3fdb6db6 	.word	0x3fdb6db6
 8007c70:	33333303 	.word	0x33333303
 8007c74:	3fe33333 	.word	0x3fe33333
 8007c78:	e0000000 	.word	0xe0000000
 8007c7c:	3feec709 	.word	0x3feec709
 8007c80:	dc3a03fd 	.word	0xdc3a03fd
 8007c84:	3feec709 	.word	0x3feec709
 8007c88:	145b01f5 	.word	0x145b01f5
 8007c8c:	be3e2fe0 	.word	0xbe3e2fe0
 8007c90:	00000000 	.word	0x00000000
 8007c94:	3ff00000 	.word	0x3ff00000
 8007c98:	43400000 	.word	0x43400000
 8007c9c:	0003988e 	.word	0x0003988e
 8007ca0:	000bb679 	.word	0x000bb679
 8007ca4:	08008420 	.word	0x08008420
 8007ca8:	3ff00000 	.word	0x3ff00000
 8007cac:	40080000 	.word	0x40080000
 8007cb0:	08008440 	.word	0x08008440
 8007cb4:	08008430 	.word	0x08008430
 8007cb8:	a3b4      	add	r3, pc, #720	; (adr r3, 8007f8c <__ieee754_pow+0xa14>)
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	f7f8 fa8b 	bl	80001dc <__adddf3>
 8007cc6:	4622      	mov	r2, r4
 8007cc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ccc:	462b      	mov	r3, r5
 8007cce:	4630      	mov	r0, r6
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	f7f8 fa81 	bl	80001d8 <__aeabi_dsub>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cde:	f7f8 fec3 	bl	8000a68 <__aeabi_dcmpgt>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	f47f adfe 	bne.w	80078e4 <__ieee754_pow+0x36c>
 8007ce8:	4aa3      	ldr	r2, [pc, #652]	; (8007f78 <__ieee754_pow+0xa00>)
 8007cea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	f340 810a 	ble.w	8007f08 <__ieee754_pow+0x990>
 8007cf4:	151b      	asrs	r3, r3, #20
 8007cf6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007cfa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007cfe:	fa4a f303 	asr.w	r3, sl, r3
 8007d02:	445b      	add	r3, fp
 8007d04:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007d08:	4e9c      	ldr	r6, [pc, #624]	; (8007f7c <__ieee754_pow+0xa04>)
 8007d0a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007d0e:	4116      	asrs	r6, r2
 8007d10:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007d14:	2000      	movs	r0, #0
 8007d16:	ea23 0106 	bic.w	r1, r3, r6
 8007d1a:	f1c2 0214 	rsb	r2, r2, #20
 8007d1e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007d22:	fa4a fa02 	asr.w	sl, sl, r2
 8007d26:	f1bb 0f00 	cmp.w	fp, #0
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4620      	mov	r0, r4
 8007d30:	4629      	mov	r1, r5
 8007d32:	bfb8      	it	lt
 8007d34:	f1ca 0a00 	rsblt	sl, sl, #0
 8007d38:	f7f8 fa4e 	bl	80001d8 <__aeabi_dsub>
 8007d3c:	e9cd 0100 	strd	r0, r1, [sp]
 8007d40:	4642      	mov	r2, r8
 8007d42:	464b      	mov	r3, r9
 8007d44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d48:	f7f8 fa48 	bl	80001dc <__adddf3>
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	a378      	add	r3, pc, #480	; (adr r3, 8007f30 <__ieee754_pow+0x9b8>)
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	4604      	mov	r4, r0
 8007d56:	460d      	mov	r5, r1
 8007d58:	f7f8 fbf6 	bl	8000548 <__aeabi_dmul>
 8007d5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d60:	4606      	mov	r6, r0
 8007d62:	460f      	mov	r7, r1
 8007d64:	4620      	mov	r0, r4
 8007d66:	4629      	mov	r1, r5
 8007d68:	f7f8 fa36 	bl	80001d8 <__aeabi_dsub>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4640      	mov	r0, r8
 8007d72:	4649      	mov	r1, r9
 8007d74:	f7f8 fa30 	bl	80001d8 <__aeabi_dsub>
 8007d78:	a36f      	add	r3, pc, #444	; (adr r3, 8007f38 <__ieee754_pow+0x9c0>)
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	f7f8 fbe3 	bl	8000548 <__aeabi_dmul>
 8007d82:	a36f      	add	r3, pc, #444	; (adr r3, 8007f40 <__ieee754_pow+0x9c8>)
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	4680      	mov	r8, r0
 8007d8a:	4689      	mov	r9, r1
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	4629      	mov	r1, r5
 8007d90:	f7f8 fbda 	bl	8000548 <__aeabi_dmul>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4640      	mov	r0, r8
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	f7f8 fa1e 	bl	80001dc <__adddf3>
 8007da0:	4604      	mov	r4, r0
 8007da2:	460d      	mov	r5, r1
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4630      	mov	r0, r6
 8007daa:	4639      	mov	r1, r7
 8007dac:	f7f8 fa16 	bl	80001dc <__adddf3>
 8007db0:	4632      	mov	r2, r6
 8007db2:	463b      	mov	r3, r7
 8007db4:	4680      	mov	r8, r0
 8007db6:	4689      	mov	r9, r1
 8007db8:	f7f8 fa0e 	bl	80001d8 <__aeabi_dsub>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	f7f8 fa08 	bl	80001d8 <__aeabi_dsub>
 8007dc8:	4642      	mov	r2, r8
 8007dca:	4606      	mov	r6, r0
 8007dcc:	460f      	mov	r7, r1
 8007dce:	464b      	mov	r3, r9
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	f7f8 fbb8 	bl	8000548 <__aeabi_dmul>
 8007dd8:	a35b      	add	r3, pc, #364	; (adr r3, 8007f48 <__ieee754_pow+0x9d0>)
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	4604      	mov	r4, r0
 8007de0:	460d      	mov	r5, r1
 8007de2:	f7f8 fbb1 	bl	8000548 <__aeabi_dmul>
 8007de6:	a35a      	add	r3, pc, #360	; (adr r3, 8007f50 <__ieee754_pow+0x9d8>)
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	f7f8 f9f4 	bl	80001d8 <__aeabi_dsub>
 8007df0:	4622      	mov	r2, r4
 8007df2:	462b      	mov	r3, r5
 8007df4:	f7f8 fba8 	bl	8000548 <__aeabi_dmul>
 8007df8:	a357      	add	r3, pc, #348	; (adr r3, 8007f58 <__ieee754_pow+0x9e0>)
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f7f8 f9ed 	bl	80001dc <__adddf3>
 8007e02:	4622      	mov	r2, r4
 8007e04:	462b      	mov	r3, r5
 8007e06:	f7f8 fb9f 	bl	8000548 <__aeabi_dmul>
 8007e0a:	a355      	add	r3, pc, #340	; (adr r3, 8007f60 <__ieee754_pow+0x9e8>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	f7f8 f9e2 	bl	80001d8 <__aeabi_dsub>
 8007e14:	4622      	mov	r2, r4
 8007e16:	462b      	mov	r3, r5
 8007e18:	f7f8 fb96 	bl	8000548 <__aeabi_dmul>
 8007e1c:	a352      	add	r3, pc, #328	; (adr r3, 8007f68 <__ieee754_pow+0x9f0>)
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	f7f8 f9db 	bl	80001dc <__adddf3>
 8007e26:	4622      	mov	r2, r4
 8007e28:	462b      	mov	r3, r5
 8007e2a:	f7f8 fb8d 	bl	8000548 <__aeabi_dmul>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4640      	mov	r0, r8
 8007e34:	4649      	mov	r1, r9
 8007e36:	f7f8 f9cf 	bl	80001d8 <__aeabi_dsub>
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	460d      	mov	r5, r1
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	4640      	mov	r0, r8
 8007e44:	4649      	mov	r1, r9
 8007e46:	f7f8 fb7f 	bl	8000548 <__aeabi_dmul>
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	e9cd 0100 	strd	r0, r1, [sp]
 8007e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e54:	4620      	mov	r0, r4
 8007e56:	4629      	mov	r1, r5
 8007e58:	f7f8 f9be 	bl	80001d8 <__aeabi_dsub>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e64:	f7f8 fc9a 	bl	800079c <__aeabi_ddiv>
 8007e68:	4632      	mov	r2, r6
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	460d      	mov	r5, r1
 8007e6e:	463b      	mov	r3, r7
 8007e70:	4640      	mov	r0, r8
 8007e72:	4649      	mov	r1, r9
 8007e74:	f7f8 fb68 	bl	8000548 <__aeabi_dmul>
 8007e78:	4632      	mov	r2, r6
 8007e7a:	463b      	mov	r3, r7
 8007e7c:	f7f8 f9ae 	bl	80001dc <__adddf3>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4620      	mov	r0, r4
 8007e86:	4629      	mov	r1, r5
 8007e88:	f7f8 f9a6 	bl	80001d8 <__aeabi_dsub>
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	464b      	mov	r3, r9
 8007e90:	f7f8 f9a2 	bl	80001d8 <__aeabi_dsub>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	2000      	movs	r0, #0
 8007e9a:	4939      	ldr	r1, [pc, #228]	; (8007f80 <__ieee754_pow+0xa08>)
 8007e9c:	f7f8 f99c 	bl	80001d8 <__aeabi_dsub>
 8007ea0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007ea4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	da2f      	bge.n	8007f0e <__ieee754_pow+0x996>
 8007eae:	4650      	mov	r0, sl
 8007eb0:	ec43 2b10 	vmov	d0, r2, r3
 8007eb4:	f000 f9c0 	bl	8008238 <scalbn>
 8007eb8:	ec51 0b10 	vmov	r0, r1, d0
 8007ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ec0:	f7ff bbf1 	b.w	80076a6 <__ieee754_pow+0x12e>
 8007ec4:	4b2f      	ldr	r3, [pc, #188]	; (8007f84 <__ieee754_pow+0xa0c>)
 8007ec6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007eca:	429e      	cmp	r6, r3
 8007ecc:	f77f af0c 	ble.w	8007ce8 <__ieee754_pow+0x770>
 8007ed0:	4b2d      	ldr	r3, [pc, #180]	; (8007f88 <__ieee754_pow+0xa10>)
 8007ed2:	440b      	add	r3, r1
 8007ed4:	4303      	orrs	r3, r0
 8007ed6:	d00b      	beq.n	8007ef0 <__ieee754_pow+0x978>
 8007ed8:	a325      	add	r3, pc, #148	; (adr r3, 8007f70 <__ieee754_pow+0x9f8>)
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ee2:	f7f8 fb31 	bl	8000548 <__aeabi_dmul>
 8007ee6:	a322      	add	r3, pc, #136	; (adr r3, 8007f70 <__ieee754_pow+0x9f8>)
 8007ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eec:	f7ff bbdb 	b.w	80076a6 <__ieee754_pow+0x12e>
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	462b      	mov	r3, r5
 8007ef4:	f7f8 f970 	bl	80001d8 <__aeabi_dsub>
 8007ef8:	4642      	mov	r2, r8
 8007efa:	464b      	mov	r3, r9
 8007efc:	f7f8 fdaa 	bl	8000a54 <__aeabi_dcmpge>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	f43f aef1 	beq.w	8007ce8 <__ieee754_pow+0x770>
 8007f06:	e7e7      	b.n	8007ed8 <__ieee754_pow+0x960>
 8007f08:	f04f 0a00 	mov.w	sl, #0
 8007f0c:	e718      	b.n	8007d40 <__ieee754_pow+0x7c8>
 8007f0e:	4621      	mov	r1, r4
 8007f10:	e7d4      	b.n	8007ebc <__ieee754_pow+0x944>
 8007f12:	2000      	movs	r0, #0
 8007f14:	491a      	ldr	r1, [pc, #104]	; (8007f80 <__ieee754_pow+0xa08>)
 8007f16:	f7ff bb8f 	b.w	8007638 <__ieee754_pow+0xc0>
 8007f1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f1e:	f7ff bb8b 	b.w	8007638 <__ieee754_pow+0xc0>
 8007f22:	4630      	mov	r0, r6
 8007f24:	4639      	mov	r1, r7
 8007f26:	f7ff bb87 	b.w	8007638 <__ieee754_pow+0xc0>
 8007f2a:	4693      	mov	fp, r2
 8007f2c:	f7ff bb98 	b.w	8007660 <__ieee754_pow+0xe8>
 8007f30:	00000000 	.word	0x00000000
 8007f34:	3fe62e43 	.word	0x3fe62e43
 8007f38:	fefa39ef 	.word	0xfefa39ef
 8007f3c:	3fe62e42 	.word	0x3fe62e42
 8007f40:	0ca86c39 	.word	0x0ca86c39
 8007f44:	be205c61 	.word	0xbe205c61
 8007f48:	72bea4d0 	.word	0x72bea4d0
 8007f4c:	3e663769 	.word	0x3e663769
 8007f50:	c5d26bf1 	.word	0xc5d26bf1
 8007f54:	3ebbbd41 	.word	0x3ebbbd41
 8007f58:	af25de2c 	.word	0xaf25de2c
 8007f5c:	3f11566a 	.word	0x3f11566a
 8007f60:	16bebd93 	.word	0x16bebd93
 8007f64:	3f66c16c 	.word	0x3f66c16c
 8007f68:	5555553e 	.word	0x5555553e
 8007f6c:	3fc55555 	.word	0x3fc55555
 8007f70:	c2f8f359 	.word	0xc2f8f359
 8007f74:	01a56e1f 	.word	0x01a56e1f
 8007f78:	3fe00000 	.word	0x3fe00000
 8007f7c:	000fffff 	.word	0x000fffff
 8007f80:	3ff00000 	.word	0x3ff00000
 8007f84:	4090cbff 	.word	0x4090cbff
 8007f88:	3f6f3400 	.word	0x3f6f3400
 8007f8c:	652b82fe 	.word	0x652b82fe
 8007f90:	3c971547 	.word	0x3c971547

08007f94 <__ieee754_sqrt>:
 8007f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f98:	4955      	ldr	r1, [pc, #340]	; (80080f0 <__ieee754_sqrt+0x15c>)
 8007f9a:	ec55 4b10 	vmov	r4, r5, d0
 8007f9e:	43a9      	bics	r1, r5
 8007fa0:	462b      	mov	r3, r5
 8007fa2:	462a      	mov	r2, r5
 8007fa4:	d112      	bne.n	8007fcc <__ieee754_sqrt+0x38>
 8007fa6:	ee10 2a10 	vmov	r2, s0
 8007faa:	ee10 0a10 	vmov	r0, s0
 8007fae:	4629      	mov	r1, r5
 8007fb0:	f7f8 faca 	bl	8000548 <__aeabi_dmul>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4620      	mov	r0, r4
 8007fba:	4629      	mov	r1, r5
 8007fbc:	f7f8 f90e 	bl	80001dc <__adddf3>
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	460d      	mov	r5, r1
 8007fc4:	ec45 4b10 	vmov	d0, r4, r5
 8007fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fcc:	2d00      	cmp	r5, #0
 8007fce:	ee10 0a10 	vmov	r0, s0
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	dc0f      	bgt.n	8007ff6 <__ieee754_sqrt+0x62>
 8007fd6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007fda:	4330      	orrs	r0, r6
 8007fdc:	d0f2      	beq.n	8007fc4 <__ieee754_sqrt+0x30>
 8007fde:	b155      	cbz	r5, 8007ff6 <__ieee754_sqrt+0x62>
 8007fe0:	ee10 2a10 	vmov	r2, s0
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	f7f8 f8f6 	bl	80001d8 <__aeabi_dsub>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	f7f8 fbd4 	bl	800079c <__aeabi_ddiv>
 8007ff4:	e7e4      	b.n	8007fc0 <__ieee754_sqrt+0x2c>
 8007ff6:	151b      	asrs	r3, r3, #20
 8007ff8:	d073      	beq.n	80080e2 <__ieee754_sqrt+0x14e>
 8007ffa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007ffe:	07dd      	lsls	r5, r3, #31
 8008000:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008004:	bf48      	it	mi
 8008006:	0fc8      	lsrmi	r0, r1, #31
 8008008:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800800c:	bf44      	itt	mi
 800800e:	0049      	lslmi	r1, r1, #1
 8008010:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008014:	2500      	movs	r5, #0
 8008016:	1058      	asrs	r0, r3, #1
 8008018:	0fcb      	lsrs	r3, r1, #31
 800801a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800801e:	0049      	lsls	r1, r1, #1
 8008020:	2316      	movs	r3, #22
 8008022:	462c      	mov	r4, r5
 8008024:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008028:	19a7      	adds	r7, r4, r6
 800802a:	4297      	cmp	r7, r2
 800802c:	bfde      	ittt	le
 800802e:	19bc      	addle	r4, r7, r6
 8008030:	1bd2      	suble	r2, r2, r7
 8008032:	19ad      	addle	r5, r5, r6
 8008034:	0fcf      	lsrs	r7, r1, #31
 8008036:	3b01      	subs	r3, #1
 8008038:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800803c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008040:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008044:	d1f0      	bne.n	8008028 <__ieee754_sqrt+0x94>
 8008046:	f04f 0c20 	mov.w	ip, #32
 800804a:	469e      	mov	lr, r3
 800804c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008050:	42a2      	cmp	r2, r4
 8008052:	eb06 070e 	add.w	r7, r6, lr
 8008056:	dc02      	bgt.n	800805e <__ieee754_sqrt+0xca>
 8008058:	d112      	bne.n	8008080 <__ieee754_sqrt+0xec>
 800805a:	428f      	cmp	r7, r1
 800805c:	d810      	bhi.n	8008080 <__ieee754_sqrt+0xec>
 800805e:	2f00      	cmp	r7, #0
 8008060:	eb07 0e06 	add.w	lr, r7, r6
 8008064:	da42      	bge.n	80080ec <__ieee754_sqrt+0x158>
 8008066:	f1be 0f00 	cmp.w	lr, #0
 800806a:	db3f      	blt.n	80080ec <__ieee754_sqrt+0x158>
 800806c:	f104 0801 	add.w	r8, r4, #1
 8008070:	1b12      	subs	r2, r2, r4
 8008072:	428f      	cmp	r7, r1
 8008074:	bf88      	it	hi
 8008076:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800807a:	1bc9      	subs	r1, r1, r7
 800807c:	4433      	add	r3, r6
 800807e:	4644      	mov	r4, r8
 8008080:	0052      	lsls	r2, r2, #1
 8008082:	f1bc 0c01 	subs.w	ip, ip, #1
 8008086:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800808a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800808e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008092:	d1dd      	bne.n	8008050 <__ieee754_sqrt+0xbc>
 8008094:	430a      	orrs	r2, r1
 8008096:	d006      	beq.n	80080a6 <__ieee754_sqrt+0x112>
 8008098:	1c5c      	adds	r4, r3, #1
 800809a:	bf13      	iteet	ne
 800809c:	3301      	addne	r3, #1
 800809e:	3501      	addeq	r5, #1
 80080a0:	4663      	moveq	r3, ip
 80080a2:	f023 0301 	bicne.w	r3, r3, #1
 80080a6:	106a      	asrs	r2, r5, #1
 80080a8:	085b      	lsrs	r3, r3, #1
 80080aa:	07e9      	lsls	r1, r5, #31
 80080ac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80080b0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80080b4:	bf48      	it	mi
 80080b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80080ba:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80080be:	461c      	mov	r4, r3
 80080c0:	e780      	b.n	8007fc4 <__ieee754_sqrt+0x30>
 80080c2:	0aca      	lsrs	r2, r1, #11
 80080c4:	3815      	subs	r0, #21
 80080c6:	0549      	lsls	r1, r1, #21
 80080c8:	2a00      	cmp	r2, #0
 80080ca:	d0fa      	beq.n	80080c2 <__ieee754_sqrt+0x12e>
 80080cc:	02d6      	lsls	r6, r2, #11
 80080ce:	d50a      	bpl.n	80080e6 <__ieee754_sqrt+0x152>
 80080d0:	f1c3 0420 	rsb	r4, r3, #32
 80080d4:	fa21 f404 	lsr.w	r4, r1, r4
 80080d8:	1e5d      	subs	r5, r3, #1
 80080da:	4099      	lsls	r1, r3
 80080dc:	4322      	orrs	r2, r4
 80080de:	1b43      	subs	r3, r0, r5
 80080e0:	e78b      	b.n	8007ffa <__ieee754_sqrt+0x66>
 80080e2:	4618      	mov	r0, r3
 80080e4:	e7f0      	b.n	80080c8 <__ieee754_sqrt+0x134>
 80080e6:	0052      	lsls	r2, r2, #1
 80080e8:	3301      	adds	r3, #1
 80080ea:	e7ef      	b.n	80080cc <__ieee754_sqrt+0x138>
 80080ec:	46a0      	mov	r8, r4
 80080ee:	e7bf      	b.n	8008070 <__ieee754_sqrt+0xdc>
 80080f0:	7ff00000 	.word	0x7ff00000

080080f4 <fabs>:
 80080f4:	ec51 0b10 	vmov	r0, r1, d0
 80080f8:	ee10 2a10 	vmov	r2, s0
 80080fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008100:	ec43 2b10 	vmov	d0, r2, r3
 8008104:	4770      	bx	lr

08008106 <finite>:
 8008106:	ee10 3a90 	vmov	r3, s1
 800810a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800810e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008112:	0fc0      	lsrs	r0, r0, #31
 8008114:	4770      	bx	lr

08008116 <matherr>:
 8008116:	2000      	movs	r0, #0
 8008118:	4770      	bx	lr
 800811a:	0000      	movs	r0, r0
 800811c:	0000      	movs	r0, r0
	...

08008120 <nan>:
 8008120:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008128 <nan+0x8>
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	00000000 	.word	0x00000000
 800812c:	7ff80000 	.word	0x7ff80000

08008130 <rint>:
 8008130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008132:	ec51 0b10 	vmov	r0, r1, d0
 8008136:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800813a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800813e:	2e13      	cmp	r6, #19
 8008140:	460b      	mov	r3, r1
 8008142:	ee10 4a10 	vmov	r4, s0
 8008146:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800814a:	dc56      	bgt.n	80081fa <rint+0xca>
 800814c:	2e00      	cmp	r6, #0
 800814e:	da2b      	bge.n	80081a8 <rint+0x78>
 8008150:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008154:	4302      	orrs	r2, r0
 8008156:	d023      	beq.n	80081a0 <rint+0x70>
 8008158:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800815c:	4302      	orrs	r2, r0
 800815e:	4254      	negs	r4, r2
 8008160:	4314      	orrs	r4, r2
 8008162:	0c4b      	lsrs	r3, r1, #17
 8008164:	0b24      	lsrs	r4, r4, #12
 8008166:	045b      	lsls	r3, r3, #17
 8008168:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800816c:	ea44 0103 	orr.w	r1, r4, r3
 8008170:	460b      	mov	r3, r1
 8008172:	492f      	ldr	r1, [pc, #188]	; (8008230 <rint+0x100>)
 8008174:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008178:	e9d1 6700 	ldrd	r6, r7, [r1]
 800817c:	4602      	mov	r2, r0
 800817e:	4639      	mov	r1, r7
 8008180:	4630      	mov	r0, r6
 8008182:	f7f8 f82b 	bl	80001dc <__adddf3>
 8008186:	e9cd 0100 	strd	r0, r1, [sp]
 800818a:	463b      	mov	r3, r7
 800818c:	4632      	mov	r2, r6
 800818e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008192:	f7f8 f821 	bl	80001d8 <__aeabi_dsub>
 8008196:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800819a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800819e:	4639      	mov	r1, r7
 80081a0:	ec41 0b10 	vmov	d0, r0, r1
 80081a4:	b003      	add	sp, #12
 80081a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081a8:	4a22      	ldr	r2, [pc, #136]	; (8008234 <rint+0x104>)
 80081aa:	4132      	asrs	r2, r6
 80081ac:	ea01 0702 	and.w	r7, r1, r2
 80081b0:	4307      	orrs	r7, r0
 80081b2:	d0f5      	beq.n	80081a0 <rint+0x70>
 80081b4:	0852      	lsrs	r2, r2, #1
 80081b6:	4011      	ands	r1, r2
 80081b8:	430c      	orrs	r4, r1
 80081ba:	d00b      	beq.n	80081d4 <rint+0xa4>
 80081bc:	ea23 0202 	bic.w	r2, r3, r2
 80081c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80081c4:	2e13      	cmp	r6, #19
 80081c6:	fa43 f306 	asr.w	r3, r3, r6
 80081ca:	bf0c      	ite	eq
 80081cc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80081d0:	2400      	movne	r4, #0
 80081d2:	4313      	orrs	r3, r2
 80081d4:	4916      	ldr	r1, [pc, #88]	; (8008230 <rint+0x100>)
 80081d6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80081da:	4622      	mov	r2, r4
 80081dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80081e0:	4620      	mov	r0, r4
 80081e2:	4629      	mov	r1, r5
 80081e4:	f7f7 fffa 	bl	80001dc <__adddf3>
 80081e8:	e9cd 0100 	strd	r0, r1, [sp]
 80081ec:	4622      	mov	r2, r4
 80081ee:	462b      	mov	r3, r5
 80081f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081f4:	f7f7 fff0 	bl	80001d8 <__aeabi_dsub>
 80081f8:	e7d2      	b.n	80081a0 <rint+0x70>
 80081fa:	2e33      	cmp	r6, #51	; 0x33
 80081fc:	dd07      	ble.n	800820e <rint+0xde>
 80081fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008202:	d1cd      	bne.n	80081a0 <rint+0x70>
 8008204:	ee10 2a10 	vmov	r2, s0
 8008208:	f7f7 ffe8 	bl	80001dc <__adddf3>
 800820c:	e7c8      	b.n	80081a0 <rint+0x70>
 800820e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8008212:	f04f 32ff 	mov.w	r2, #4294967295
 8008216:	40f2      	lsrs	r2, r6
 8008218:	4210      	tst	r0, r2
 800821a:	d0c1      	beq.n	80081a0 <rint+0x70>
 800821c:	0852      	lsrs	r2, r2, #1
 800821e:	4210      	tst	r0, r2
 8008220:	bf1f      	itttt	ne
 8008222:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008226:	ea20 0202 	bicne.w	r2, r0, r2
 800822a:	4134      	asrne	r4, r6
 800822c:	4314      	orrne	r4, r2
 800822e:	e7d1      	b.n	80081d4 <rint+0xa4>
 8008230:	08008450 	.word	0x08008450
 8008234:	000fffff 	.word	0x000fffff

08008238 <scalbn>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	ec55 4b10 	vmov	r4, r5, d0
 800823e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008242:	4606      	mov	r6, r0
 8008244:	462b      	mov	r3, r5
 8008246:	b9aa      	cbnz	r2, 8008274 <scalbn+0x3c>
 8008248:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800824c:	4323      	orrs	r3, r4
 800824e:	d03b      	beq.n	80082c8 <scalbn+0x90>
 8008250:	4b31      	ldr	r3, [pc, #196]	; (8008318 <scalbn+0xe0>)
 8008252:	4629      	mov	r1, r5
 8008254:	2200      	movs	r2, #0
 8008256:	ee10 0a10 	vmov	r0, s0
 800825a:	f7f8 f975 	bl	8000548 <__aeabi_dmul>
 800825e:	4b2f      	ldr	r3, [pc, #188]	; (800831c <scalbn+0xe4>)
 8008260:	429e      	cmp	r6, r3
 8008262:	4604      	mov	r4, r0
 8008264:	460d      	mov	r5, r1
 8008266:	da12      	bge.n	800828e <scalbn+0x56>
 8008268:	a327      	add	r3, pc, #156	; (adr r3, 8008308 <scalbn+0xd0>)
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	f7f8 f96b 	bl	8000548 <__aeabi_dmul>
 8008272:	e009      	b.n	8008288 <scalbn+0x50>
 8008274:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008278:	428a      	cmp	r2, r1
 800827a:	d10c      	bne.n	8008296 <scalbn+0x5e>
 800827c:	ee10 2a10 	vmov	r2, s0
 8008280:	4620      	mov	r0, r4
 8008282:	4629      	mov	r1, r5
 8008284:	f7f7 ffaa 	bl	80001dc <__adddf3>
 8008288:	4604      	mov	r4, r0
 800828a:	460d      	mov	r5, r1
 800828c:	e01c      	b.n	80082c8 <scalbn+0x90>
 800828e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008292:	460b      	mov	r3, r1
 8008294:	3a36      	subs	r2, #54	; 0x36
 8008296:	4432      	add	r2, r6
 8008298:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800829c:	428a      	cmp	r2, r1
 800829e:	dd0b      	ble.n	80082b8 <scalbn+0x80>
 80082a0:	ec45 4b11 	vmov	d1, r4, r5
 80082a4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008310 <scalbn+0xd8>
 80082a8:	f000 f83c 	bl	8008324 <copysign>
 80082ac:	a318      	add	r3, pc, #96	; (adr r3, 8008310 <scalbn+0xd8>)
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	ec51 0b10 	vmov	r0, r1, d0
 80082b6:	e7da      	b.n	800826e <scalbn+0x36>
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	dd08      	ble.n	80082ce <scalbn+0x96>
 80082bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80082c8:	ec45 4b10 	vmov	d0, r4, r5
 80082cc:	bd70      	pop	{r4, r5, r6, pc}
 80082ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80082d2:	da0d      	bge.n	80082f0 <scalbn+0xb8>
 80082d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80082d8:	429e      	cmp	r6, r3
 80082da:	ec45 4b11 	vmov	d1, r4, r5
 80082de:	dce1      	bgt.n	80082a4 <scalbn+0x6c>
 80082e0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008308 <scalbn+0xd0>
 80082e4:	f000 f81e 	bl	8008324 <copysign>
 80082e8:	a307      	add	r3, pc, #28	; (adr r3, 8008308 <scalbn+0xd0>)
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	e7e0      	b.n	80082b2 <scalbn+0x7a>
 80082f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082f4:	3236      	adds	r2, #54	; 0x36
 80082f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80082fe:	4620      	mov	r0, r4
 8008300:	4629      	mov	r1, r5
 8008302:	2200      	movs	r2, #0
 8008304:	4b06      	ldr	r3, [pc, #24]	; (8008320 <scalbn+0xe8>)
 8008306:	e7b2      	b.n	800826e <scalbn+0x36>
 8008308:	c2f8f359 	.word	0xc2f8f359
 800830c:	01a56e1f 	.word	0x01a56e1f
 8008310:	8800759c 	.word	0x8800759c
 8008314:	7e37e43c 	.word	0x7e37e43c
 8008318:	43500000 	.word	0x43500000
 800831c:	ffff3cb0 	.word	0xffff3cb0
 8008320:	3c900000 	.word	0x3c900000

08008324 <copysign>:
 8008324:	ec51 0b10 	vmov	r0, r1, d0
 8008328:	ee11 0a90 	vmov	r0, s3
 800832c:	ee10 2a10 	vmov	r2, s0
 8008330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008334:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008338:	ea41 0300 	orr.w	r3, r1, r0
 800833c:	ec43 2b10 	vmov	d0, r2, r3
 8008340:	4770      	bx	lr
	...

08008344 <_init>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	bf00      	nop
 8008348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834a:	bc08      	pop	{r3}
 800834c:	469e      	mov	lr, r3
 800834e:	4770      	bx	lr

08008350 <_fini>:
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	bf00      	nop
 8008354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008356:	bc08      	pop	{r3}
 8008358:	469e      	mov	lr, r3
 800835a:	4770      	bx	lr
